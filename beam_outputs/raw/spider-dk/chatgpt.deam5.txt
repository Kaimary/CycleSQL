SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT  count(*) FROM singer 
SELECT Count(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT  COUNT(*) FROM singer; 
SELECT COUNT(Singer_ID) AS TotalNumberOfSingers FROM singer;
SELECT COUNT(*) AS total_singers FROM singer; 
SELECT COUNT(*) FROM singer 
SELECT  COUNT(*) FROM singer 
SELECT singer.Name, singer.Country FROM singer ORDER BY DATEDIFF(CURRENT_DATE, singer.Birthday) DESC;
SELECT Name, Country FROM singer ORDER BY Birthday;
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday;
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday;
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday;
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday DESC;
SELECT singer.Name, singer.Country FROM singer ORDER BY DATEDIFF(CURRENT_DATE, singer.Birthday) DESC;
SELECT  Name, Country FROM singer ORDER BY Birthday DESC; 
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday DESC;
SELECT singer.Name, singer.Country FROM singer ORDER BY singer.Birthday DESC;
SELECT AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France'; 
SELECT Average(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France';
SELECT AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France'; 
SELECT   SELECT AVG(Singer_ID) as average_id, MIN(Singer_ID) as min_id, MAX(Singer_ID) as max_id   FROM singer   WHERE Country = 'France';
SELECT Average(s.Singer_ID) as AverageID, MIN(s.Singer_ID) as MinimumID, MAX(s.Singer_ID) as MaximumID FROM singer s WHERE s.Country = 'France'; 
SELECT AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France';
SELECT  SELECT AVG(singer.Singer_ID) AS average_id, MIN(singer.Singer_ID) AS minimum_id, MAX(singer.Singer_ID) AS maximum_id FROM singer WHERE singer.Country = 'France'; 
SELECT I can provide you with the SQL query for your question:
SELECT AVG(S.Singer_ID), MIN(S.Singer_ID), MAX(S.Singer_ID) FROM singer S WHERE S.Country = 'France';
SELECT AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France';
SELECT s.Name, s.Song_Name, s.Song_release_year FROM singer s WHERE s.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT Sure, here is the SQL query to answer the question:
SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT Name, Song_release_year FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Birthday = (SELECT MIN(Birthday) FROM singer)
SELECT DISTINCT singer.Country FROM singer WHERE YEAR(singer.Birthday) = 2001;
SELECT DISTINCT singer.Country FROM singer WHERE YEAR(Birthday) = 2001;
SELECT DISTINCT singer.Country FROM singer WHERE YEAR(singer.Birthday) = 2001;
SELECT DISTINCT singer.Country FROM singer WHERE YEAR(Birthday) = 2001;
SELECT singer.Country FROM singer WHERE YEAR(singer.Birthday) = 2001;
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '%2001'
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '2001%'
SELECT DISTINCT Country FROM singer WHERE YEAR(Birthday) = 2001; 
SELECT singer.Country FROM singer WHERE singer.Birthday >= '2001-01-01' AND singer.Birthday <= '2001-12-31'
SELECT singer.Country FROM singer WHERE YEAR(singer.Birthday) = 2001;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country; 
SELECT Country, COUNT(*) as Singer_Count FROM singer GROUP BY Country;
SELECT  singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country; 
SELECT singer.Country, COUNT(*) AS SingerCount FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) as quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS Quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS Quantity FROM singer GROUP BY singer.Country;
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID JOIN concert c ON sc.concert_ID = c.concert_ID JOIN stadium std ON c.Stadium_ID = std.Stadium_ID WHERE s.Birthday <= (YEAR(CURDATE()) - std.Average) GROUP BY s.Song_Name;
SELECT   Song_Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE Birthday < (   SELECT AVG(Birthday)   FROM singer ) 
SELECT s.Song_Name FROM singer_in_concert sc JOIN singer s ON sc.Singer_ID = s.Singer_ID WHERE s.Birthday < (SELECT AVG(Birthday) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Birthday < (SELECT AVG(Birthday) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Birthday <   (SELECT AVG(Birthday) FROM singer)
SELECT s.Song_Name FROM singer s WHERE s.Birthday < (SELECT AVG(s2.Birthday) FROM singer s2)
SELECT singer.Song_Name FROM singer WHERE singer.Birthday < (SELECT AVG(Birthday) FROM singer)
SELECT Name, Song_Name FROM singer WHERE Birthday < (SELECT AVG(Birthday) FROM singer)
SELECT  s.Song_Name FROM singer s WHERE s.Birthday < (SELECT AVG(s.Birthday) FROM singer) 
SELECT s.song_name FROM singer s INNER JOIN singer_in_concert sic ON s.singer_id = sic.singer_id INNER JOIN concert c ON sic.concert_id = c.concert_id INNER JOIN (SELECT AVG(YEAR(GETDATE()) - YEAR(birthday)) as average_age FROM singer) avg_age ON YEAR(GETDATE()) - YEAR(s.birthday) > avg_age.average_age;
SELECT `Location`, `Name` FROM `stadium` WHERE `Capacity` BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT  Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS highest_capacity FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT  SELECT AVG(Capacity), MAX(Capacity) FROM stadium; 
SELECT  SELECT AVG(Capacity), MAX(Capacity) FROM stadium; 
SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS highest_capacity FROM stadium; 
SELECT `  AVG(Capacity) AS average_capacity,  MAX(Capacity) AS highest_capacity FROM stadium; `
SELECT    AVG(Capacity) AS Average_Capacity,   MAX(Capacity) AS Highest_Capacity FROM stadium 
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT  SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS highest_capacity FROM stadium 
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT   stadium.Name,   stadium.Capacity FROM stadium WHERE stadium.Average = (   SELECT MAX(Average)   FROM stadium )
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID IN (   SELECT Stadium_ID   FROM (     SELECT Stadium_ID, AVG(Average) AS AvgAttendance     FROM stadium     GROUP BY Stadium_ID     ORDER BY AvgAttendance DESC     LIMIT 1   ) AS max_avg_attendance )
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium); 
SELECT Sorry, it seems like the query was incomplete. You were writing a query to retrieve the name and capacity for the stadium with the highest average attendance. Here's the complete SQL query:
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT `stadium.Name, stadium.Capacity` `FROM stadium` `ORDER BY stadium.Average` `DESC LIMIT 1`
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium) 
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year >= 2014;
SELECT COUNT(*) FROM concert WHERE Year >= 2014;
SELECT count(*) FROM concert WHERE Year >= 2014;
SELECT COUNT(*) FROM concert WHERE Year >= 2014;
SELECT   COUNT(*) FROM concert WHERE Year >= 2014;
SELECT count(*) FROM concert WHERE Year >= 2014;
SELECT COUNT(*) FROM concert WHERE Year >= 2014;
SELECT COUNT(*) FROM concert WHERE Year >= 2014;
SELECT COUNT(*) FROM concert WHERE Year >= 2014 
SELECT count(*) FROM concert WHERE Year >= 2014;
SELECT stadium.Name, COUNT(concert.concert_ID) as quantity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(*) as quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) as Num_Concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS Concert_Count FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS concert_count FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT stadium.Name, COUNT(*) AS concert_quantity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS concert_quantity FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Location, COUNT(concert.concert_ID) as NumberOfConcerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Location;
SELECT stadium.Stadium_ID, COUNT(*) as quantity FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS quantity FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS quantity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS Quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY Quantity DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS num_concerts FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Capacity ORDER BY num_concerts DESC LIMIT 1;
SELECT   stadium.Name, MAX(stadium.Highest) FROM   concert   INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE   concert.Year > 2013 GROUP BY   concert.Stadium_ID ORDER BY   COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT  stadium.Name, MAX(stadium.Highest) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT stadium.Name, MAX(stadium.Highest) AS Highest_attendance FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID, stadium.Name
SELECT stadium.Name, MAX(stadium.Highest) AS highest_attendance FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT  stadium.Name, MAX(stadium.Highest) AS highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1; 
SELECT concert_ID FROM concert ORDER BY Year ASC LIMIT 1;
SELECT The SQL query for the given question "Which concert is the oldest?" would be:
SELECT concert_Name FROM concert ORDER BY Year LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year ASC LIMIT 1;
SELECT concert_ID, concert_Name, Year FROM concert ORDER BY Year ASC LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year ASC LIMIT 1;
SELECT concert_Name FROM concert ORDER BY Year LIMIT 1;
SELECT MAX(Capacity) FROM stadium
SELECT `Name`, `Capacity` FROM `stadium` WHERE `Stadium_ID` NOT IN (SELECT `Stadium_ID` FROM `concert`);
SELECT MAX(Capacity) as highest_attendance FROM stadium;
SELECT MAX(stadium.Capacity) FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert)
SELECT MAX(stadium.Capacity) FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name, stadium.Lowest FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name, stadium.Lowest FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT Stadium_ID, MIN(Capacity) AS Lowest_attendance FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert) GROUP BY Stadium_ID
SELECT stadium.Name, stadium.Lowest FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name, stadium.Lowest FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert ) 
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '1981%' OR singer.Birthday LIKE '1991%';
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '1981%'  OR singer.Birthday LIKE '1991%'
SELECT singer.Country FROM singer WHERE YEAR(singer.Birthday) = 1981 OR YEAR(singer.Birthday) = 1991;
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '1981%' OR singer.Birthday LIKE '1991%';
SELECT singer.Country FROM singer WHERE singer.Birthday LIKE '1981%' OR singer.Birthday LIKE '1991%';
SELECT stadium.Name, AVG(stadium.Capacity) AS average_attendance FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year != 2014 GROUP BY stadium.Name; 
SELECT AVG(s.Capacity) AS average_attendance FROM stadium s WHERE s.Stadium_ID NOT IN (   SELECT c.Stadium_ID   FROM concert c   WHERE c.Year = 2014 )
SELECT stadium.Stadium_ID, stadium.Name, AVG(stadium.Capacity) AS average_attendance FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 ) GROUP BY stadium.Stadium_ID, stadium.Name; 
SELECT Not handled
SELECT  AVG(stadium.Capacity) AS average_attendance FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014) 
SELECT Name, Lowest FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 ) ORDER BY Lowest;"
SELECT stadium.Stadium_ID, stadium.Name, min(stadium.Capacity) as lowest_attendance FROM stadium WHERE stadium.Stadium_ID NOT IN   (SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014) GROUP BY stadium.Stadium_ID, stadium.Name;
SELECT Name, Lowest FROM stadium WHERE Stadium_ID NOT IN   (SELECT Stadium_ID   FROM concert   WHERE Year = 2014)
SELECT stadium.Name, MIN(stadium.Lowest) AS Lowest_Attendance FROM stadium WHERE stadium.Stadium_ID NOT IN  (SELECT concert.Stadium_ID  FROM concert  WHERE concert.Year = 2014) GROUP BY stadium.Name;
SELECT stadium.Name, MIN(stadium.Lowest) AS lowest_attendance FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014) GROUP BY stadium.Name;
SELECT concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_Count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as singer_quantity FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as quantity FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS singer_quantity FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS singer_count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_Count FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme
SELECT concert_Name, Theme, COUNT(Singer_ID) AS Number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_count FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(*) as concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) as concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(*) as concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS concert_count FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID;
SELECT singer.Name, count(*) as Concert_Count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(*) as Concerts FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer_in_concert.Singer_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Concert_Count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year >= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year >= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year >= 2014;
SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year >= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year >= 2014;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year <= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year <= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year <= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year <= 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year <= 2014
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE EXISTS (   SELECT *   FROM singer_in_concert   WHERE singer.Singer_ID = singer_in_concert.Singer_ID )
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%' )
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN   (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT s.Name, s.Country FROM singer s WHERE EXISTS (   SELECT 1   FROM singer_in_concert sic   JOIN concert c ON sic.concert_ID = c.concert_ID   WHERE sic.Singer_ID = s.Singer_ID   AND s.Song_Name LIKE '%Hey%' )
SELECT MIN(s.Stadium_ID), MIN(s.Lowest) AS lowest_attendance, MAX(s.Highest) AS highest_attendance FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID
SELECT stadium.Name, MIN(stadium.Capacity) AS Lowest_attendance, MAX(stadium.Capacity) AS Highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name;
SELECT stadium.Stadium_ID, MIN(stadium.Lowest) AS lowest_attendance, MAX(stadium.Highest) AS highest_attendance FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE Year IN (2014, 2015) GROUP BY stadium.Stadium_ID;
SELECT stadium.Name, MIN(stadium.Lowest) AS lowest_attendance, MAX(stadium.Highest) AS highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name;
SELECT stadium.Name, MIN(stadium.Lowest) AS lowest_attendance, MAX(stadium.Highest) AS highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name;
SELECT MIN(s.Lowest) AS lowest_attendance, MAX(s.Highest) AS highest_attendance FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2; 
SELECT stadium.Name, MIN(stadium.Capacity) AS lowest_attendance, MAX(stadium.Capacity) AS highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name;
SELECT stadium.Name, MIN(stadium.Capacity) AS lowest_attendance, MAX(stadium.Capacity) AS highest_attendance FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name;
'content'
'content'
SELECT COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium)          )
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium)          );
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium)           )
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1)
SELECT count(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 )
SELECT COUNT(*) FROM concert WHERE Stadium_ID =   (SELECT Stadium_ID    FROM stadium    WHERE Capacity = (SELECT MAX(Capacity) FROM stadium)   );
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) AS quantity FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium)) 
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY birthdate ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY birthdate ASC LIMIT 1; 
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' AND birthdate = (SELECT MIN(birthdate) FROM Pets WHERE PetType = 'dog'); 
SELECT Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' ORDER BY Pets.birthdate ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY birthdate ASC LIMIT 1;
SELECT MIN(birthdate) AS Birthdate FROM Pets WHERE PetType = 'dog'
SELECT MIN(birthdate) FROM Pets WHERE PetType = 'dog'
SELECT (count(*)) FROM Pets WHERE PetType = 'dog' AND birthdate = (SELECT MIN(birthdate) FROM Pets WHERE PetType = 'dog')
SELECT MIN(p.weight) AS "Weight of Youngest Dog" FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog'
SELECT COUNT(*) FROM Pets WHERE PetType = 'dog' AND birthdate = (SELECT MIN(birthdate) FROM Pets WHERE PetType = 'dog')
SELECT PetType, max(weight) as max_weight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) as MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) as max_weight FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT COUNT(p.PetID) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'Puppy' AND Student.Sex = 'F'
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'female'
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'female'
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE PetType = 'puppy' AND Sex = 'female'
SELECT COUNT(DISTINCT PetType)  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT  COUNT(DISTINCT PetType) AS num_distinct_pet_types FROM Pets; 
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) AS numberOfDistinctPetTypes FROM Pets; 
SELECT COUNT(DISTINCT PetType) AS quantity FROM Pets;
SELECT COUNT(DISTINCT PetType) AS quantity FROM Pets;
SELECT COUNT(DISTINCT PetType) as num_of_pet_types FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Count(DISTINCT PetType) FROM Pets;
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('kitten', 'puppy');
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten','puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.FName FROM Student WHERE Student.StuID IN  (SELECT StuID  FROM Has_Pet  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType IN ('kitten', 'puppy')  );
SELECT Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname, Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('Kitten', 'Puppy') GROUP BY Student.StuID HAVING COUNT(*) = 2
SELECT Student.Fname, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('Kitten', 'Puppy') GROUP BY Student.StuID HAVING COUNT(*) = 2;
SELECT Student.Fname, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('Kitten', 'Puppy') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) >= 2;
SELECT I would write the following SQL query to find the name of students who have both Kitten and puppy pets:
SELECT Student.Fname, Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('Kitten', 'Puppy') GROUP BY Student.Fname, Student.LName HAVING COUNT(*) = 2;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('kitten','puppy') GROUP BY s.StuID, s.Fname HAVING COUNT(*) = 2;
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Student.StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'puppy' )
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.Fname HAVING COUNT(*) = 2;
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.FName HAVING COUNT(*) = 2;
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.FName HAVING COUNT(*) = 2
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten');
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'kitten') 
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Student.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten')
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet               INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID               WHERE Pets.PetType = 'kitten');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'kitten' )
SELECT s.Major, s.Age FROM Student s WHERE s.StuID NOT IN (   SELECT hp.StuID   FROM Has_Pet hp   INNER JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'kitten' )
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN   (SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'kitten');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT s.StuID FROM Student s WHERE s.StuID NOT IN  (SELECT hp.StuID   FROM Has_Pet hp   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'kitten');
SELECT Student.StuID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten';
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.weight >= 1
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.weight >= 2
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.PetType <> 'puppy';
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.weight >= 20;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.weight >= 1
SELECT `Fname` FROM `Student` WHERE `StuID` IN (   SELECT `StuID`   FROM `Has_Pet`   JOIN `Pets` ON `Has_Pet`.`PetID` = `Pets`.`PetID`   WHERE `PetType` = 'puppy' ) AND `StuID` NOT IN (   SELECT `StuID`   FROM `Has_Pet`   JOIN `Pets` ON `Has_Pet`.`PetID` = `Pets`.`PetID`   WHERE `PetType` = 'kitten' )
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'puppy' AND s.StuID NOT IN (SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'kitten')
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON P.PetID = HP.PetID WHERE P.PetType = 'puppy' AND S.StuID NOT IN (SELECT S.StuID           FROM Student S           JOIN Has_Pet HP ON S.StuID = HP.StuID           JOIN Pets P ON P.PetID = HP.PetID           WHERE P.PetType = 'kitten')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN (SELECT Student.StuID FROM Has_Pet              JOIN Pets ON Has_Pet.PetID = Pets.PetID             WHERE Pets.PetType = 'kitten')
SELECT Pets.PetType, Pets.weight FROM Pets WHERE birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.birthdate = (SELECT MIN(Pets.birthdate) FROM Pets)
SELECT PetType, weight FROM Pets WHERE birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT pet.PetType, pet.weight FROM Pets pet WHERE pet.birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT PetType, weight FROM Pets WHERE birthdate = (   SELECT MIN(birthdate)   FROM Pets )
SELECT Pets.PetType, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.birthdate = (SELECT MIN(birthdate) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.birthdate = (   SELECT MIN(Pets.birthdate)   FROM Pets )
SELECT Pets.PetType, Pets.weight FROM Pets WHERE birthdate = (   SELECT MIN(birthdate)   FROM Pets )
SELECT Pets.PetID, Pets.weight FROM Pets WHERE DATEPART(YEAR, Pets.birthdate) < 2020
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, weight FROM Pets WHERE birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE year(birthdate) < 2020;
SELECT Pets.PetID, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.birthdate < '2020-01-01';
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.birthdate < '2020-01-01';
SELECT PetType, AVG(PetID) AS AvgID, MAX(PetID) AS MaxID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS avg_id, MAX(PetID) AS max_id FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS average_id, MAX(PetID) AS max_id FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) as avg_id, MAX(PetID) as max_id FROM Pets GROUP BY PetType
SELECT PetType, AVG(Pets.PetID) AS average_id, MAX(Pets.PetID) AS max_id FROM Pets GROUP BY PetType;
SELECT PetType, AVG(Pets.PetID) as average_id, MAX(Pets.PetID) as maximum_id FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) as average_id, MAX(PetID) as maximum_id FROM Pets GROUP BY PetType;
SELECT PetType, AVG(Pets.PetID) AS AverageID, MAX(Pets.PetID) AS MaximumID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID), MAX(PetID) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS AverageID, MAX(PetID) AS MaximumID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(Pets.PetID) as AverageID, MAX(Pets.PetID) as MaximumID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS avg_id, MAX(PetID) AS max_id FROM Pets GROUP BY PetType
SELECT PetType, AVG(PetID) AS AverageID, MAX(PetID) AS MaximumID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS AverageID, MAX(PetID) AS MaximumID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(PetID) AS AvgID, MAX(PetID) AS MaxID FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as average_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as avg_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as average_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as average_weight FROM Pets GROUP BY PetType;
SELECT Student.FName, Student.LName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.LName, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.LName, Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  
SELECT Student.FName, Student.LName, Student.Age FROM Student WHERE Student.StuID IN (SELECT StuID FROM Has_Pet)
SELECT Student.FName, Student.LName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.LName, Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.LName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.LName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.LName, Student.FName, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.LName, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID;
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT COUNT(*) AS NumOfPets, Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT student.StuID, COUNT(*) AS quantity FROM Student JOIN Has_Pet ON student.StuID = has_pet.StuID GROUP BY student.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) AS Num_Pets FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT COUNT(*), Student.StuID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID HAVING COUNT(*) > 1;
SELECT  SELECT Fname, Sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(*) > 1 )
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
SELECT  SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1) 
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.LName FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND Pets.birthdate LIKE '2001%';
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND year(Pets.birthdate) = 2001;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND EXTRACT(YEAR FROM birthdate) = 2001;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT Student.LName FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND YEAR(birthdate) = 2001;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND YEAR(Pets.birthdate) = 2001;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT Find the average age of students who do not have any pet.
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT Round(AVG(Age), 2) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT count(*) FROM continents;
SELECT Count(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT count(*) as ContinentCount FROM continents
SELECT COUNT(*) FROM continents; 
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS Quantity FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS num_countries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count FROM continents INNER JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(*) AS CountryCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as country_count FROM continents INNER JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS quantity FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS country_count FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT COUNT(*) FROM countries;
SELECT  COUNT(*) FROM countries;
SELECT COUNT(DISTINCT CountryId) FROM countries;
SELECT COUNT(*) FROM countries; 
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT car_makers.FullName, car_makers.Id, count(car_names.Model) as Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName, car_makers.Id;
SELECT Maker, Id AS MakerId, COUNT(*) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Maker, MakerId;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT maker.FullName, car_makers.Id, COUNT(model_list.ModelId) as quantity FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker LEFT JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY maker.FullName, car_makers.Id;
SELECT  car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName; 
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS ModelsProduced FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) as ModelsProduced FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.FullName, car_makers.Id, COUNT(*) AS "Quantity" FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.FullName, car_makers.Id;
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1;
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (   SELECT MIN(Horsepower) FROM cars_data )
SELECT Make FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data)
SELECT  SELECT Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT MODEL FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.MakeId INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year >= YEAR(DATE_SUB(NOW(), INTERVAL 2 YEAR));
SELECT car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year >= YEAR(GETDATE()) - 2
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year >= YEAR(CURRENT_DATE) - 2;
SELECT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (       SELECT Id       FROM cars_data       WHERE Year >= YEAR(CURRENT_DATE) - 2     )   ) )
SELECT car_makers.Maker FROM car_makers INNER JOIN model_list ON model_list.Maker = car_makers.Id INNER JOIN car_names ON car_names.Model = model_list.Model INNER JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year >= YEAR(NOW()) - 2;
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year >= YEAR(CURDATE()) - 1;
SELECT cm.Maker FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.Model = cd.Id WHERE cd.Year >= YEAR(CURDATE()) - 1;
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year BETWEEN YEAR(CURDATE()) - 2 AND YEAR(CURDATE()) GROUP BY car_makers.Maker;
SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year >= YEAR(GETDATE()) - 2
SELECT car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year >= YEAR(GETDATE()) - 2;
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_names.Make, cars_data.Year FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT  car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data) 
SELECT cm.Maker, MIN(cd.Year) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id GROUP BY cm.Maker ORDER BY MIN(cd.Year) LIMIT 1;
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker;
SELECT car_makers.Maker, MIN(cars_data.Year) as Earliest_Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker;
SELECT Maker, MIN(Year) AS EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY Maker;
SELECT CM.Maker, CD.Year FROM car_makers CM JOIN model_list ML ON CM.Id = ML.Maker JOIN car_names CN ON ML.Model = CN.Model JOIN cars_data CD ON CN.MakeId = CD.Id WHERE CD.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year <= 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980;
SELECT DISTINCT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year <= 1980;
SELECT cars_data.Model FROM cars_data WHERE Year <= 1980
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year <= 1980;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.Year <= 1980;
SELECT  continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) as maker_count FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT  continents.Continent, COUNT(DISTINCT car_makers.Id) AS Count FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent; 
SELECT c.Continent, COUNT(DISTINCT m.Id) AS MakerCount FROM car_makers m JOIN countries co ON m.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId GROUP BY c.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) AS CntCarMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT  continents.Continent, COUNT(car_makers.Id) AS car_maker_count FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent; 
SELECT Continents.Continent, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM Continents JOIN Countries ON Continents.ContId = Countries.Continent JOIN Car_Makers ON Countries.CountryId = Car_Makers.Country GROUP BY Continents.Continent;
SELECT continents.Continent, COUNT(*) as CarMakersCount FROM continents INNER JOIN countries ON continents.ContId = countries.Continent INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT c.Continent, COUNT(DISTINCT m.Id) AS CarMakersCount FROM continents c INNER JOIN countries co ON c.ContId = co.Continent INNER JOIN car_makers m ON co.CountryId = m.Country GROUP BY c.Continent;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countries.CountryName, COUNT(*) as quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY quantity DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(DISTINCT car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY count(*) DESC LIMIT 1;
SELECT CountryName FROM countries WHERE CountryId = (   SELECT Country   FROM car_makers   GROUP BY Country   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT CountryName FROM countries WHERE CountryId = (SELECT Country 					FROM car_makers 					GROUP BY Country 					ORDER BY COUNT(*) DESC 					LIMIT 1)
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT CountryName FROM countries WHERE CountryId = (  SELECT Country  FROM car_makers  GROUP BY Country  ORDER BY COUNT(*) DESC  LIMIT 1 )
SELECT car_makers.FullName, COUNT(model_list.ModelId) as Count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.FullName, count(car_names.MakeId) as count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(car_names.Model) AS model_count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName;
SELECT COUNT(*) AS count, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT  car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelQuantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName; 
SELECT car_makers.Id, car_makers.FullName, COUNT(*) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) AS Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) AS Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName LIKE '%hornet sportabout (sw)%');
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE model_list.Model = 'amc hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc') AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)') 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Model = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)')
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Model = 'amc hornet sportabout (sw)';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'Japan');
SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'Japan');
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Japan';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'America';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'America'
SELECT COUNT(*) FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'America';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'America';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'America';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT  COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT count(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT COUNT(*) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'United States';
SELECT Count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) AS average_mpg FROM cars_data WHERE Cylinders = 4; 
SELECT  SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT Sorry, it looks like some information is missing. Can you provide the table name for the cars with 4 cylinders?
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT cars_data.Weight FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = 1974 AND cars_data.Cylinders = 8 ORDER BY cars_data.Weight LIMIT 1;
SELECT MIN(Weight) AS MinWeight FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (SELECT Country FROM car_makers)
SELECT countries.CountryName, car_makers.Id FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, car_makers.Id FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, car_makers.Id FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150 
SELECT Count(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150; 
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT YEAR, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY YEAR;
SELECT Year, AVG(Weight) as average_weight FROM cars_data GROUP BY Year; 
SELECT YEAR, AVG(Weight) FROM cars_data GROUP BY YEAR;
SELECT Year, AVG(Weight) as Average_Weight FROM cars_data GROUP BY Year
SELECT YEAR, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY YEAR; 
SELECT YEAR, AVG(Weight), AVG(Year) FROM cars_data GROUP BY YEAR;
SELECT Year, AVG(Weight) AS average_weight, AVG(Year) AS average_year FROM cars_data GROUP BY Year;
SELECT YEAR, AVG(Weight) AS average_weight, AVG(Year) AS average_year FROM cars_data GROUP BY YEAR;
SELECT YEAR, AVG(Weight) AS average_weight, AVG(Year) AS average_year FROM cars_data GROUP BY Year;
SELECT YEAR, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;
SELECT countries.CountryName FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.Continent IN (SELECT ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent='Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT DISTINCT CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(*) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT CountryName FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY cm.Country HAVING COUNT(*) >= 3;
SELECT  countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT MAX(Horsepower) AS MaximumHorsepower, Maker AS CarMake FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 3 GROUP BY Maker;
SELECT MAX(Horsepower) as highest_horsepower, Maker as make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cylinders = 3;
SELECT MAX(Horsepower) AS MaxHorsepower, Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower) AS LargestHorsepower, car_makers.Maker AS Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) AS quantity, Maker AS make FROM cars_data WHERE Cylinders = 3;
SELECT  MAX(Horsepower) AS horsepower, Maker AS make FROM cars_data WHERE Cylinders = 3;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.MakeId INNER JOIN cars_data ON car_names.Make = cars_data.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY MPG DESC LIMIT 1;
SELECT MAX(MPG) AS HighestMPG FROM cars_data;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT MAX(MPG) FROM cars_data;
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980
SELECT  SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980; 
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980;
SELECT  SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980; 
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980
SELECT ROUND(AVG(Horsepower),2) as average_horsepower FROM cars_data WHERE Year <= 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year <= 1980
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'tesla';
SELECT average(cars_data.Edispl) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'tesla'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Tesla';
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Tesla';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Tesla';
SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS maximum_accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT  Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders; 
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT COUNT(*) as quantity, MAX(Accelerate) as max_accelerate, Cylinders FROM cars_data GROUP BY Cylinders;
SELECT COUNT(*) AS quantity, cn.Model FROM car_names cn GROUP BY cn.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(DISTINCT car_names.Make) AS CarsVersion FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY CarsVersion DESC LIMIT 1;
SELECT model_list.Model, COUNT(*) AS quantity FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(car_names.Make) AS Quantity FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY Quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(*) AS quantity FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  SELECT Model, COUNT(*) AS Quantity FROM car_names GROUP BY Model ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(DISTINCT Model) AS Quantity, Model FROM model_list GROUP BY Model ORDER BY Quantity DESC LIMIT 1;
SELECT   Model, COUNT(DISTINCT MakeId) AS Version_Count FROM   car_names GROUP BY   Model ORDER BY   Version_Count DESC LIMIT 1;
SELECT (SELECT Model, COUNT(DISTINCT Make) AS Quantity FROM car_names GROUP BY Model ORDER BY Quantity DESC LIMIT 1);
SELECT model_list.Model, COUNT(DISTINCT car_names.MakeId) AS quantity FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(GETDATE()) - 1;
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(GETDATE()) - 1;
SELECT COUNT(*) FROM cars_data WHERE Year > YEAR(GETDATE()) - 2;
SELECT Count(*) as Quantity FROM cars_data WHERE Year >= YEAR(GETDATE()) - 1
SELECT COUNT(*) FROM cars_data WHERE Year >= (SELECT MAX(Year) - 1 FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(GETDATE()) - 2;
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(NOW()) - 2
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(CURRENT_DATE()) - 2;
SELECT COUNT(*) FROM cars_data WHERE Year > (SELECT MAX(Year) - 2 FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Year >= YEAR(CURDATE()) - 2;
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor'
SELECT COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor'
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor';
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor'
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor')
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor'
SELECT COUNT(*) FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'American Motor';
SELECT car_makers.FullName, car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.Model) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.Model) > 3;
SELECT Maker, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT Id, Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 ); 
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker, COUNT(model_list.ModelId) AS Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3;
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500) GROUP BY model_list.Model;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.MakeId WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT  Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000 GROUP BY Year; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT  DISTINCT Year FROM cars_data WHERE Weight < 4000   OR Weight > 3000; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000  OR Weight > 3000;
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT MAX(Horsepower) AS Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Max(Accelerate), Horsepower FROM cars_data;
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) AS Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) AS Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) AS horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT COUNT(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model WHERE car_names.Model = 'tesla' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId)
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'tesla' AND cars_data.Accelerate = (   SELECT MIN(Accelerate)   FROM cars_data   JOIN car_names ON cars_data.Id = car_names.MakeId   WHERE car_names.Model = 'tesla' )
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'tesla') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data);
SELECT COUNT(*) AS quantity FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'tesla'  AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data                 JOIN car_names ON cars_data.Id = car_names.MakeId                 JOIN model_list ON car_names.Model = model_list.Model                 WHERE model_list.Model = 'tesla');
SELECT COUNT(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_names.Model = 'tesla' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId);
SELECT count(*) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE model_list.Model = 'tesla' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId);
SELECT COUNT(*) as quantity FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE ml.Model = 'tesla' AND cd.Accelerate = (SELECT MIN(Accelerate) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE ml.Model = 'tesla')
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'tesla' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE car_names.Model = 'tesla')
SELECT COUNT(cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Tesla') ORDER BY Accelerate LIMIT 1;
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Tesla') ORDER BY Accelerate LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data) 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT The SQL query for the given question is:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data) 
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Horsepower)   FROM cars_data )
SELECT COUNT(countryName) FROM countries GROUP BY countryName HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS Quantity FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS NumCountries FROM car_makers GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Id) > 2; 
SELECT COUNT(DISTINCT car_makers.Country) AS CountryCount FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2;
SELECT countries.CountryId, COUNT(*) AS quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS Num_of_countries_with_more_than_2_car_makers FROM car_makers GROUP BY car_makers.Country HAVING COUNT(car_makers.Id) > 2;
SELECT COUNT(DISTINCT car_makers.Country) as number_of_countries FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS NumberOfCountries FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT  COUNT(DISTINCT countries.CountryName) AS quantity FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT Make, Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model, MAX(cars_data.Horsepower) FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT  car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1; 
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT cars_data.Model AS Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data WHERE cars_data.Cylinders = 4;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (  SELECT MIN(Horsepower) FROM cars_data )
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN car_makers ON car_names.Make = car_makers.Fullname JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id,car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980;
SELECT  SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980; 
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980;
SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_makers.Id = model_list.Maker WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor';
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON car_names.Make = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor'
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor';
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id INNER JOIN car_makers ON car_makers.Id = model_list.Maker WHERE cars_data.Weight < 3500 AND car_makers.FullName <> 'Ford Motor';
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor';
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker <> (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor')
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor'
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor'
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor'
SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Weight < 3500 AND car_makers.Maker != 'Ford Motor'
SELECT DISTINCT countries.CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers); 
SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers) 
SELECT CountryName FROM countries WHERE NOT EXISTS (SELECT 1 FROM car_makers WHERE car_makers.Country = countries.CountryId) 
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId WHERE car_makers.Id IS NULL;
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Country IS NULL;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_names.Make) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3 AND COUNT(DISTINCT model_list.ModelId) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3;
SELECT   Id,   Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(DISTINCT Model) >= 2 ) AND Id IN (   SELECT Maker   FROM car_names   GROUP BY Make   HAVING COUNT(Make) > 3 );
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3 AND COUNT(DISTINCT model_list.ModelId) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(*) > 3;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR MAX(car_names.Model = 'tesla') > 0;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.ModelId GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Model = 'tesla';
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR car_names.Model = 'tesla';
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE car_makers.Id IN (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(*) > 3 ) OR car_names.Model = 'tesla';
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR MAX(car_names.Model = 'tesla') > 0;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Id > 3 OR car_names.Model = 'Tesla';
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT country_id   FROM car_makers   INNER JOIN car_names ON car_makers.Id = car_names.MakeId   INNER JOIN model_list ON car_names.Model = model_list.Model   WHERE model_list.Model = 'tesla' )
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 OR countries.CountryName IN   (SELECT DISTINCT countries.CountryName    FROM countries   INNER JOIN car_makers ON countries.CountryId = car_makers.Country   INNER JOIN model_list ON car_makers.Id = model_list.Id   INNER JOIN car_names ON model_list.ModelId = car_names.Model   WHERE car_names.Model = 'Tesla');
SELECT countries.CountryId, CountryName FROM countries WHERE countries.CountryId IN (   SELECT DISTINCT car_makers.Country   FROM car_makers   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT DISTINCT countries.CountryId   FROM countries   INNER JOIN car_names ON car_names.Make = 'Tesla'   WHERE car_names.MakeId = countries.CountryId ) 
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryId IN (   SELECT CountryId   FROM car_makers   GROUP BY CountryId   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT CountryId   FROM car_makers   JOIN model_list ON car_makers.Id = model_list.Maker   JOIN car_names ON model_list.Model = car_names.Model   WHERE car_names.Model = 'Tesla' ) ORDER BY countries.CountryId;
SELECT Country FROM airlines WHERE Airline = "JetBlue";
SELECT Country FROM airlines WHERE Airline = 'JetBlue';
SELECT Country FROM airlines WHERE Airline = 'JetBlue';
SELECT Country FROM airlines WHERE Airline = "JetBlue";
SELECT Country FROM airlines WHERE Airline = "JetBlue"
SELECT Country FROM airlines WHERE Airline = 'Jetblue';
SELECT Country FROM airlines WHERE Airline = 'Jetblue';
SELECT Country FROM airlines WHERE Airline = 'Jetblue';
SELECT Country FROM airlines WHERE Airline = 'Jetblue';
SELECT Country FROM airlines WHERE Airline = 'Jetblue'
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue";
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue";
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'America';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'American'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Jackson';
SELECT Airports.AirportCode, Airports.AirportName FROM Airports WHERE Airports.City = 'Jackson';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Syracuse';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Syracuse';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Syracuse';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Syracuse'
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Syracuse';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT Count(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT Count(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT Count(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS num_airports FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT  SELECT count(*) FROM airports; 
SELECT Count(*) FROM flights;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) as flight_count FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'America';
SELECT count(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America';
SELECT COUNT(*) FROM airlines WHERE Country = 'America'; 
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT airports.AirportName FROM airports WHERE airports.City = 'Jackson';
SELECT AirportName FROM airports WHERE City = 'Jackson';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT Count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT Count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT Count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT Count(*) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Jackson';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Jackson');
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Jackson');
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Jackson');
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Syracuse' AND flights.DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Syracuse' AND flights.DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Syracuse' AND flights.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Syracuse') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights f JOIN airports s ON f.SourceAirport = s.AirportCode JOIN airports d ON f.DestAirport = d.AirportCode WHERE s.City = 'Syracuse' AND d.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Syracuse') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Syracuse' AND DestAirport = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Syracuse') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Syracuse') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Syracuse') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline='JetBlue' AND SourceAirport='AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT  COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'JetBlue' AND airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Abbreviation = 'JetBlue' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'JetBlue' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline='JetBlue' AND DestAirport = (SELECT AirportCode FROM airports WHERE City='Aberdeen')
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue' AND DestAirport = 'Aberdeen';
SELECT airports.City, COUNT(flights.DestAirport) as ArrivalFlights FROM airports INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY ArrivalFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) as ArrivingFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS NumArrivingFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS NumberOfArrivingFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS NumArrivingFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.DestAirport) AS frequency FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS Frequency FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS Frequency FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City, COUNT(flights.DestAirport) AS frequency FROM airports INNER JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City, COUNT(flights.FlightNo) AS Num_Departing_Flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY Num_Departing_Flights DESC LIMIT 1; 
SELECT airports.City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) as DepartingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) as quantity FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY quantity DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) AS frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) AS frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT City FROM airports WHERE AirportCode = (   SELECT SourceAirport   FROM (     SELECT SourceAirport, COUNT(*) as Frequency     FROM flights     GROUP BY SourceAirport     ORDER BY COUNT(*) DESC     LIMIT 1   ) AS MostFrequent )
SELECT airports.City, COUNT(*) AS Frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  AirportCode FROM  (   SELECT    SourceAirport AS AirportCode,    COUNT(*) AS Flights   FROM    flights   GROUP BY    SourceAirport   UNION ALL   SELECT    DestAirport AS AirportCode,    COUNT(*) AS Flights   FROM    flights   GROUP BY    DestAirport  ) AS CombinedFlights ORDER BY  Flights DESC LIMIT 1; 
SELECT MAX(AirportCode) AS AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Let's start by counting the number of flights for each airport, then we can find the airport with the highest number of flights. Here's the SQL query to accomplish this:
SELECT AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airportCode FROM   flights GROUP BY   SourceAirport ORDER BY   COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  SourceAirport, COUNT(*) AS FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount ASC LIMIT 1; 
SELECT airports.AirportCode, COUNT(flights.FlightNo) AS NumFlights FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY NumFlights LIMIT 1;
SELECT  AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT   Airline,   COUNT(*) AS num_flights FROM   flights GROUP BY   Airline ORDER BY   num_flights DESC LIMIT 1;
SELECT  Airline, COUNT(*) AS flight_count FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS num_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS num_flights FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS num_flights FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline GROUP BY airlines.Abbreviation, airlines.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) AS NumFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY NumFlights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) AS quantity FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY quantity DESC LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*)   FETCH FIRST ROW ONLY )
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline        FROM flights        GROUP BY Airline        ORDER BY COUNT(*)        LIMIT 1);
SELECT Abbreviation, Country FROM airlines WHERE uid IN (SELECT Airline        FROM flights        GROUP BY Airline        HAVING COUNT(*) = (SELECT MIN(cnt)                  FROM (SELECT COUNT(*) as cnt                     FROM flights                     GROUP BY Airline) as sub))
SELECT Abbreviation, Country FROM airlines WHERE uid = (  SELECT Airline  FROM flights  GROUP BY Airline  ORDER BY COUNT(*) ASC  LIMIT 1 );
SELECT Abbreviation, Country FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT Airline, Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) = (     SELECT MIN(cnt) AS min_cnt     FROM (SELECT COUNT(*) AS cnt FROM flights GROUP BY Airline)   ) ) 
SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Abbreviation, airlines.Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline.Abbreviation, Airline.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline.Abbreviation, Airline.Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'AHD' )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid=flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airline FROM flights WHERE SourceAirport = 'APG' OR SourceAirport = 'CVO' GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT Airlines.Airline FROM Flights JOIN Airlines ON Flights.Airline = Airlines.uid WHERE Flights.SourceAirport = 'APG' OR Flights.SourceAirport = 'CVO' GROUP BY Airlines.Airline HAVING COUNT(DISTINCT Flights.SourceAirport) = 2
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' AND EXISTS (SELECT * FROM flights WHERE flights.DestAirport = 'CVO' AND flights.Airline = airlines.uid)
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.uid JOIN airports AS apg_airport ON apg_airport.AirportCode = flights.SourceAirport JOIN airports AS cvo_airport ON cvo_airport.AirportCode = flights.SourceAirport WHERE apg_airport.AirportCode = 'APG' AND cvo_airport.AirportCode = 'CVO';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.UID = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline, COUNT(*) AS num_departing_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN  (SELECT airlines.uid   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT flights.Airline FROM flights WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (   SELECT airlines.uid   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE flights.SourceAirport = 'APG' ); 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid             FROM airlines             JOIN flights ON airlines.uid = flights.Airline             JOIN airports ON flights.SourceAirport = airports.AirportCode             WHERE airports.AirportCode = 'APG')
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG')
SELECT DISTINCT f.Airline FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'CVO' AND f.Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG') 
SELECT DISTINCT f.Airline FROM flights f JOIN airports dep ON f.SourceAirport = dep.AirportCode LEFT JOIN flights f2 ON f.Airline = f2.Airline  AND f2.SourceAirport = 'APG'  AND f2.DestAirport = dep.AirportCode WHERE dep.City = 'CVO'  AND f2.Airline IS NULL;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (   SELECT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'APG' )
SELECT Airlines FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = 'CVO' AND airlines.uid NOT IN (   SELECT airlines.uid   FROM flights   JOIN airports ON flights.SourceAirport = airports.AirportCode   JOIN airlines ON flights.Airline = airlines.uid   WHERE airports.City = 'APG' )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (   SELECT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'APG' )
SELECT airlines.Airline, count(*) as num_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) >= 10;
SELECT  airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid, airlines.Airline HAVING COUNT(*) >= 10; 
SELECT airlines.Airline, COUNT(*) AS Flights FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airline, COUNT(*) as quantity FROM flights GROUP BY airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) as quantity FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS FlightCount FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
SELECT airlines.Airline, COUNT(*) as Flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, count(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT Airlines.Airline, COUNT(*) as quantity FROM Flights JOIN Airlines ON Flights.Airline = Airlines.Abbreviation GROUP BY Airlines.Airline HAVING COUNT(*) >= 10;
SELECT COUNT(*), Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) AS FlightCount FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, count(*) as flight_count FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) < 200;
SELECT airlines.Airline, COUNT(*) AS TotalFlights FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, COUNT(*) as quantity FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, COUNT(*) as quantity FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT Airlines.Airline FROM Airlines INNER JOIN Flights ON Airlines.UID = Flights.Airline GROUP BY Airlines.Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, count(*) as flight_count FROM airlines JOIN flights on airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) < 200;
SELECT Airline FROM airlines WHERE (SELECT COUNT(*) FROM flights WHERE airlines.uid = flights.Airline) < 200;
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = "JetBlue";
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "JetBlue";
SELECT FlightNo FROM flights WHERE Airline = "JetBlue";
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue'
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'JetBlue';
SELECT FlightNo FROM flights WHERE Airline = 'JetBlue';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = "APG";
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = "APG";
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = "APG";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Jackson";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Jackson";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson'; 
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Jackson";
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Jackson";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Jackson';
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Syracuse', 'Jackson'))
SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Syracuse', 'Jackson');
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Syracuse' OR airports.City = 'Jackson';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Syracuse', 'Jackson');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Syracuse' OR City = 'Jackson');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Syracuse' OR City = 'Jackson');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Syracuse' OR airports.City = 'Jackson';
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Syracuse' OR City = 'Jackson');
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Syracuse', 'Jackson');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Syracuse' OR airports.City = 'Jackson';
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT DISTINCT SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT DISTINCT DestAirport FROM flights);
SELECT airports.AirportName FROM airports LEFT JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode WHERE flights.Airline IS NULL;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN   (SELECT DISTINCT SourceAirport FROM flights    UNION    SELECT DISTINCT DestAirport FROM flights)
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights);
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportCode, airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT count(*) FROM Documents;
SELECT count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents; 
SELECT COUNT(DISTINCT Document_ID) AS Quantity FROM Documents;
SELECT Count(DISTINCT Document_ID) FROM Documents;
SELECT COUNT(*) AS document_count FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(Document_ID) FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Documents.Document_Description FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Document_Description, Document_ID, Template_ID FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Document_Description, Document_ID, Template_ID FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Documents.Document_Description, Documents.Template_ID FROM Documents WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Templates.Template_ID) AS num_templates FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Documents.Template_ID) as quantity FROM Documents;
SELECT COUNT(DISTINCT Documents.Template_ID) AS Number_of_Templates FROM Documents;
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS num_templates_used FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS Quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS template_count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS Template_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) as Quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS num_templates_used FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(*) FROM Documents WHERE Template_ID IN (   SELECT Template_ID   FROM Templates   WHERE Template_Type_Code = 'PPT' )
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT COUNT(*) FROM Documents WHERE Template_ID = (SELECT Template_ID           FROM Templates           WHERE Template_Type_Code = 'PPT');
SELECT COUNT(*) FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT Count(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates            WHERE Template_Type_Code = (SELECT Template_Type_Code                           FROM Ref_Template_Types                           WHERE Template_Type_Description = 'PPT'))
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(*) AS quantity FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS num_documents FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) as quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(*) as usage_count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT DISTINCT Documents.Template_ID, COUNT(*) AS quantity FROM Documents GROUP BY Documents.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS usage_count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM (     SELECT Template_ID, COUNT(*) AS quantity     FROM Documents     GROUP BY Template_ID     ORDER BY quantity DESC     LIMIT 1   ) t )
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY Quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY Quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates WHERE Templates.Template_ID = (   SELECT Documents.Template_ID   FROM Documents   GROUP BY Documents.Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT MAX(document_count) AS max_document_count, MIN(Date_Effective_From) AS min_effective_date, MAX(Date_Effective_To) AS max_effective_date FROM (   SELECT t.Template_ID, t.Date_Effective_From, t.Date_Effective_To, COUNT(d.Document_ID) AS document_count   FROM Templates t   INNER JOIN Documents d ON t.Template_ID = d.Template_ID   GROUP BY t.Template_ID, t.Date_Effective_From, t.Date_Effective_To ) subquery;
SELECT MAX(Date_Effective_From) AS StartDate, MAX(Date_Effective_To) AS EndDate FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT count(*) as quantity FROM Templates;
SELECT COUNT(*) FROM Templates
SELECT COUNT(Template_ID) FROM Templates;
SELECT count(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Count(*) FROM Templates;
SELECT COUNT(*) FROM Templates
SELECT Count(*) FROM Templates
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates;
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates;
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates
SELECT Templates.Template_ID, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates
SELECT `Date_Effective_From`, `Date_Effective_To` FROM Templates;
SELECT MIN(Date_Effective_From) AS effective_from, MAX(Date_Effective_To) AS effective_to FROM Templates;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates;
SELECT DATE_Effective_From, DATE_Effective_To FROM Templates;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT');
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description IN ('PP', 'PPT')
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT');
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT DATE_Effective_From, DATE_Effective_To FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates WHERE Templates.Template_Type_Code = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV';
SELECT `Date_Effective_From`, `Date_Effective_To` FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Date_Effective_From, Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = 'CV';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Date_Effective_From, Date_Effective_To, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) AS quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Date_Effective_From, Date_Effective_To, COUNT(Template_ID) as Templates_Count FROM Templates GROUP BY Date_Effective_From, Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS number_of_templates FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Date_Effective_From, Date_Effective_To, count(Template_ID) AS Template_Count FROM Templates GROUP BY Date_Effective_From, Date_Effective_To
SELECT Date_Effective_From, Date_Effective_To, COUNT(Templates.Template_ID) AS Quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS Quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) as quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Template_Type_Code, Date_Effective_From, Date_Effective_To, COUNT(*) AS template_count FROM Templates GROUP BY Template_Type_Code, Date_Effective_From, Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) as Quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) AS quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, count(*) AS quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, count(*) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, count(*) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY count(*) DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(Template_ID) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(Templates.Template_ID) AS quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(Templates.Template_ID) AS TemplateCount FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY TemplateCount DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Date_Effective_From, Date_Effective_To, count(*) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To ORDER BY count(*) DESC LIMIT 1;
SELECT DATE_Effective_From, DATE_Effective_To FROM Templates GROUP BY DATE_Effective_From, DATE_Effective_To ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Templates.Template_ID) AS num_of_templates FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To HAVING COUNT(Templates.Template_ID) < 3;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Templates.Template_ID) AS Quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To HAVING COUNT(Templates.Template_ID) < 3;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, count(*) as quantity FROM Templates GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To HAVING count(*) < 3;
SELECT  Date_Effective_From, Date_Effective_To, COUNT(Templates.Template_ID) AS Quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING COUNT(Templates.Template_ID) < 3; 
SELECT Date_Effective_From, Date_Effective_To, count(Templates.Template_ID) as template_count FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING count(Templates.Template_ID) < 3;
SELECT Date_Effective_From, Date_Effective_To, COUNT(Template_ID) AS Quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING COUNT(Template_ID) < 3; 
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) as quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING COUNT(*) < 3; 
SELECT Date_Effective_From, Date_Effective_To FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING COUNT(Template_ID) < 3;
SELECT DATE_Effective_From, DATE_Effective_To FROM Templates GROUP BY DATE_Effective_From, DATE_Effective_To HAVING COUNT(*) < 3;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) AS Quantity FROM Templates GROUP BY Date_Effective_From, Date_Effective_To HAVING COUNT(*) < 3;
SELECT MIN(Version_Number) AS smallest_version_number, MIN(Date_Effective_From) AS effective_date_from, MIN(Date_Effective_To) AS effective_date_to FROM Templates;
SELECT MIN(Version_Number) AS smallest_version, Date_Effective_From, Date_Effective_To FROM Templates;
SELECT MIN(Version_Number) AS smallest_version_number, Date_Effective_From, Date_Effective_To FROM Templates;
SELECT MIN(Version_Number) AS smallest_version, Date_Effective_From, Date_Effective_To FROM Templates;
SELECT MIN(Version_Number) AS Smallest_Version_Number, Date_Effective_From, Date_Effective_To FROM Templates;
SELECT `Version_Number, Date_Effective_From, Date_Effective_To FROM Templates ORDER BY Version_Number LIMIT 1;`
SELECT Templates.Template_ID, MIN(Templates.Version_Number) AS Lowest_Version_Number, MIN(Templates.Date_Effective_From) AS Effective_From_Date, MIN(Templates.Date_Effective_To) AS Effective_To_Date FROM Templates GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, MIN(Templates.Version_Number) AS Lowest_Version_Number, MIN(Templates.Date_Effective_From) AS Effective_Date_From, MIN(Templates.Date_Effective_To) AS Effective_Date_To FROM Templates GROUP BY Templates.Template_ID;
SELECT Min(Version_Number), Date_Effective_From, Date_Effective_To FROM Templates
SELECT Templates.Version_Number, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates ORDER BY Templates.Version_Number LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Date_Effective_From, Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Date_Effective_From, Date_Effective_To FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')
SELECT Documents.Document_Name, Documents.Document_ID, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name, Documents.Document_ID, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_ID, Documents.Document_Name, Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name, Documents.Document_ID, Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name, Documents.Document_ID, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name, Documents.Document_ID, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name, Document_ID, Template_ID FROM Documents WHERE Template_ID IN   (SELECT Template_ID    FROM Templates    WHERE Template_Type_Code = 'BK' )
SELECT Documents.Document_Name, Documents.Document_ID, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Template_Type_Description, Date_Effective_From, Date_Effective_To, COUNT(DISTINCT Documents.Document_ID) AS document_count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Description, Date_Effective_From, Date_Effective_To;
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Ref_Template_Types.Template_Type_Description,    Templates.Date_Effective_From,    Templates.Date_Effective_To,    COUNT(*) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description,     Templates.Date_Effective_From,     Templates.Date_Effective_To;
SELECT   Template_Type_Code,   Date_Effective_From,   Date_Effective_To,   COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Template_Type_Code, Date_Effective_From, Date_Effective_To;
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, Ref_Template_Types.Template_Type_Description, COUNT(Documents.Document_ID) AS Quantity FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To, Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description, Templates.Date_Effective_From, Templates.Date_Effective_To;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) AS quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Date_Effective_From, Date_Effective_To ORDER BY quantity DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To ORDER BY quantity DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) AS quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS Quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To ORDER BY Quantity DESC LIMIT 1;
SELECT DATE_Effective_From, DATE_Effective_To, COUNT(*) AS Quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY DATE_Effective_From, DATE_Effective_To ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) as quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Date_Effective_From, Date_Effective_To ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(Date_Effective_From) AS Most_Commonly_Used_Effective_Date_Period FROM Templates
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(*) AS Quantity FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To ORDER BY Quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To, COUNT(*) AS Quantity FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY Date_Effective_From, Date_Effective_To ORDER BY Quantity DESC LIMIT 1;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT  Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents) 
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)  
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID NOT IN (   SELECT Template_ID   FROM Documents )
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Book';
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description
SELECT Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code;
SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Date_Effective_From, Date_Effective_To FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Date_Effective_From, Date_Effective_To FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = 'Presentation';
SELECT  Date_Effective_From, Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = 'Presentation'; 
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Date_Effective_From, Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Date_Effective_From, Date_Effective_To FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Template_ID, Date_Effective_From, Date_Effective_To FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')));
SELECT players.first_name, players.last_name, matches.winner_id, matches.loser_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name AS winner_first_name, players.last_name AS winner_last_name, players_2.first_name AS loser_first_name, players_2.last_name AS loser_last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS players_2 ON matches.loser_id = players_2.player_id;
SELECT players.first_name, players.last_name, matches.winner_id, matches.loser_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, matches.match_num FROM matches LEFT JOIN players ON matches.winner_id = players.player_id LEFT JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, matches.match_num FROM matches INNER JOIN players ON matches.winner_id = players.player_id UNION SELECT players.first_name, players.last_name, matches.match_num FROM matches INNER JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, matches.match_num FROM matches JOIN players ON matches.winner_id = players.player_id UNION ALL SELECT players.first_name, players.last_name, matches.match_num FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id UNION SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, matches.winner_id, matches.loser_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, DATEDIFF(YEAR, players.birth_date, matches.tourney_date) AS winner_age, players_1.first_name, players_1.last_name, DATEDIFF(YEAR, players_1.birth_date, matches.tourney_date) AS loser_age FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players players_1 ON matches.loser_id = players_1.player_id;
SELECT players.first_name, players.last_name, DATEDIFF(year, players.birth_date, matches.tourney_date) AS player_age FROM matches JOIN players ON matches.winner_id = players.player_id UNION SELECT players.first_name, players.last_name, DATEDIFF(year, players.birth_date, matches.tourney_date) AS player_age FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT players.player_id, TIMESTAMPDIFF(YEAR, players.birth_date, CURDATE()) AS winner_age, matches.winner_id, TIMESTAMPDIFF(YEAR, players_1.birth_date, CURDATE()) AS loser_age, matches.loser_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS players_1 ON matches.loser_id = players_1.player_id;
SELECT players.first_name AS winner_first_name, players.last_name AS winner_last_name, players.birth_date AS winner_birth_date, players_1.first_name AS loser_first_name, players_1.last_name AS loser_last_name, players_1.birth_date AS loser_birth_date FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS players_1 ON matches.loser_id = players_1.player_id
SELECT players.player_id,     players.first_name,     players.last_name,     players.birth_date AS winner_birth_date,     loser_player.first_name,     loser_player.last_name,     loser_player.birth_date AS loser_birth_date FROM  matches    INNER JOIN players        ON matches.winner_id = players.player_id    INNER JOIN players AS loser_player        ON matches.loser_id = loser_player.player_id
SELECT players.first_name, players.last_name, 2022-players.birth_date AS player_age, FROM matches LEFT JOIN players ON matches.winner_id = players.player_id LEFT JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name,     players.last_name,     players.birth_date AS winner_birth_date,    matches.winner_id,    players_1.first_name,     players_1.last_name,     players_1.birth_date AS loser_birth_date,    matches.loser_id  FROM matches    JOIN players ON matches.winner_id = players.player_id    JOIN players AS players_1 ON matches.loser_id = players_1.player_id;
SELECT winner_age, loser_age FROM matches; 
SELECT players.first_name, players.last_name, players.birth_date, matches.winner_id, matches.loser_id FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players ON matches.loser_id = players.player_id;
SELECT players.first_name, players.last_name, players.birth_date AS "Player_Age", matches.winner_id, matches.loser_id FROM players JOIN matches ON matches.winner_id = players.player_id JOIN matches ON matches.loser_id = players.player_id;
SELECT `first_name`, `birth_date` FROM `players` WHERE `country_code` = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches 
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) as average_loser_age, AVG(winner_age) as average_winner_age FROM matches
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches 
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT Sorry, I cannot fulfill this request.
SELECT ROUND(AVG(loser_age), 2) AS average_loser_age, ROUND(AVG(winner_age), 2) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT ROUND(AVG(r1.ranking),2) as avg_winner_rank, ROUND(AVG(r2.ranking),2) as avg_loser_rank FROM matches m JOIN rankings r1 ON m.winner_id = r1.player_id JOIN rankings r2 ON m.loser_id = r2.player_id;
SELECT  AVG(winner_rank) AS average_winner_rank, AVG(loser_rank) AS average_loser_rank FROM matches; 
SELECT (SELECT AVG(ranking) AS average_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id UNION SELECT AVG(ranking) AS average_rank FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id);
SELECT AVG(winner_rank) as average_winner_rank, AVG(loser_rank) as average_loser_rank FROM matches;
SELECT AVG(w.winner_rank) AS avg_winner_rank, AVG(l.loser_rank) AS avg_loser_rank FROM matches m JOIN players w ON m.winner_id = w.player_id JOIN players l ON m.loser_id = l.player_id;
SELECT AVG(rank) AS average_rank FROM (   SELECT winner_rank AS rank FROM matches   UNION ALL   SELECT loser_rank AS rank FROM matches ) combined_ranks WHERE rank IS NOT NULL; 
SELECT AVG(rank) AS average_rank FROM   (SELECT winner_rank AS rank FROM matches   UNION ALL   SELECT loser_rank AS rank FROM matches) subquery;
SELECT AVG(rank) AS average_rank FROM (   SELECT winner_rank AS rank   FROM matches   UNION ALL   SELECT loser_rank AS rank   FROM matches ) ranks  
SELECT AVG(rank) AS average_rank FROM (   SELECT winner_rank AS rank FROM matches   UNION ALL   SELECT loser_rank AS rank FROM matches ) ranks;
SELECT  AVG(winner_rank) AS average_winner_rank, AVG(loser_rank) AS average_loser_rank FROM matches 
SELECT MAX(ranking) AS highest_rank FROM rankings; 
SELECT MAX(ranking) AS highest_rank FROM rankings;
SELECT ranking FROM rankings ORDER BY ranking DESC;
SELECT GREATEST(MAX(winner_rank), MAX(loser_rank)) AS highest_rank FROM matches  
SELECT MAX(ranking) AS highest_rank FROM players JOIN rankings ON players.player_id = rankings.player_id;
SELECT MAX(winner_rank) AS best_rank FROM matches UNION SELECT MAX(loser_rank) AS best_rank FROM matches; 
SELECT MAX(rankings.ranking) AS best_rank FROM rankings INNER JOIN players ON rankings.player_id = players.player_id INNER JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id;
SELECT  SELECT MAX(winner_rank) AS best_rank FROM matches UNION SELECT MAX(loser_rank) AS best_rank FROM matches; 
SELECT MAX(rankings.ranking) AS best_rank FROM rankings JOIN players ON rankings.player_id = players.player_id JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id;
SELECT MAX(ranking) AS best_rank FROM rankings;
SELECT count(DISTINCT country_code) AS distinct_country_codes FROM players; 
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players; 
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players; 
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT count(DISTINCT country_code) as distinct_country_codes FROM players; 
SELECT  COUNT(DISTINCT country_code) FROM players; 
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT players.country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches 
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches;
SELECT  SELECT COUNT(DISTINCT losers.name) FROM matches INNER JOIN players AS losers ON matches.loser_id = losers.player_id 
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches;
SELECT  COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches; 
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches;
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT count(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT  tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name, count(*) AS quantity FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 OR year = 2016 UNION SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id WHERE year = 2013 OR year = 2016;
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE EXTRACT(YEAR FROM matches.tourney_date) IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE YEAR(matches.tourney_date) IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE YEAR(matches.tourney_date) IN (2013, 2016) UNION SELECT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.loser_id = players.player_id WHERE YEAR(matches.tourney_date) IN (2013, 2016);
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 OR year = 2016
SELECT players.first_name, players.last_name FROM   players JOIN   matches ON   matches.winner_id = players.player_id   OR matches.loser_id = players.player_id WHERE   YEAR(matches.tourney_date) IN (2013, 2016)
SELECT players.first_name, players.last_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id WHERE year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM players INNER JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE matches.tourney_date BETWEEN '2013-01-01' AND '2013-12-31' AND players.player_id IN (   SELECT player_id   FROM matches   WHERE matches.tourney_date BETWEEN '2016-01-01' AND '2016-12-31' )
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE EXTRACT(year FROM matches.tourney_date) IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE YEAR(matches.tourney_date) IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches LEFT JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE matches.year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id WHERE year = 2013 OR year = 2016;
SELECT m.match_num, p1.first_name as winner_first_name, p1.last_name as winner_last_name, p2.first_name as loser_first_name, p2.last_name as loser_last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.year IN (2013, 2016) 
SELECT m.first_name, m.last_name, l.first_name, l.last_name FROM matches JOIN players m ON matches.winner_id = m.player_id JOIN players l ON matches.loser_id = l.player_id WHERE year IN (2013, 2016)
SELECT m1.winner_name, m2.loser_name FROM matches m1 JOIN matches m2 ON m1.match_num = m2.match_num INNER JOIN players p1 ON m1.winner_id = p1.player_id INNER JOIN players p2 ON m2.loser_id = p2.player_id WHERE m1.year IN (2013, 2016)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id UNION SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id WHERE year IN (2013, 2016);
SELECT m.first_name || ' ' || m.last_name AS winner_name,    l.first_name || ' ' || l.last_name AS loser_name FROM matches INNER JOIN players m ON matches.winner_id = m.player_id INNER JOIN players l ON matches.loser_id = l.player_id WHERE year IN (2013, 2016)
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (   SELECT MIN(birth_date)   FROM players )
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT player_id, first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (   SELECT MAX(tours)   FROM rankings )
SELECT players.first_name, players.country_code FROM players, rankings WHERE players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY SUM(rankings.tours) DESC LIMIT 1;
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id           FROM rankings           GROUP BY player_id           ORDER BY COUNT(*) DESC           LIMIT 1)
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY SUM(rankings.tours) DESC LIMIT 1; 
SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.country_code ORDER BY sum(rankings.tours) DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id WHERE ranks.tours = (SELECT MAX(tours) FROM rankings)
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1;
SELECT YEAR, COUNT(*) AS quantity FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT YEAR t JOIN matches m ON t.tourney_date = m.tourney_date GROUP BY t.year ORDER BY COUNT(m.match_num) DESC LIMIT 1;
SELECT year, COUNT(*) AS quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1; 
SELECT year, COUNT(*) AS quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1;
SELECT Sorry, I cannot fulfill this request.
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1; 
SELECT COUNT(*) AS quantity, year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, count(*) as matches_count FROM matches GROUP BY year ORDER BY matches_count DESC LIMIT 1; 
SELECT year, COUNT(*) AS quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1;
SELECT players.first_name, players.last_name, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(if(winner_id=players.player_id,1,0)) as total_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY total_wins DESC LIMIT 1;
SELECT players.first_name, players.last_name, sum(winner_id) as total_wins FROM matches LEFT JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id ORDER BY total_wins DESC LIMIT 1
SELECT players.first_name, players.last_name, MAX(rankings.ranking_points) AS most_wins_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(winner_wins) as max_wins, rankings.ranking_points FROM (   SELECT winner_id, COUNT(*) AS winner_wins   FROM matches   GROUP BY winner_id ) AS winner_counts INNER JOIN rankings ON rankings.player_id = winner_counts.winner_id INNER JOIN players ON players.player_id = winner_counts.winner_id;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(count(*)) as max_wins, rankings.ranking_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name, rankings.ranking_points;
SELECT matches.winner_name, matches.loser_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT matches.winner_name, matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (   SELECT MAX(ranking_points) FROM rankings   WHERE player_id = matches.winner_id )
SELECT matches.winner_name, matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' AND winner_rank_points = (  SELECT MAX(winner_rank_points)  FROM matches  WHERE tourney_name = 'Australian Open' )
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings) UNION SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id JOIN rankings ON matches.loser_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings);
SELECT matches.winner_name, matches.loser_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON matches.winner_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC;
SELECT matches.winner_name, matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (   SELECT MAX(ranking_points)   FROM rankings   WHERE player_id = matches.winner_id ); 
SELECT player_id, first_name, last_name FROM matches JOIN players winner ON matches.winner_id = winner.player_id JOIN players loser ON matches.loser_id = loser.player_id WHERE matches.tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points) FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT matches.winner_name, matches.loser_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' AND rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings WHERE player_id = matches.winner_id)
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT matches.match_num,   players.first_name AS winner_first_name,   players.last_name AS winner_last_name,   players.hand AS winner_hand,   players.birth_date AS winner_birth_date,   players.country_code AS winner_country_code,   players_1.first_name AS loser_first_name,   players_1.last_name AS loser_last_name,   players_1.hand AS loser_hand,   players_1.birth_date AS loser_birth_date,   players_1.country_code AS loser_country_code FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS players_1 ON matches.loser_id = players_1.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (   SELECT MAX(minutes)   FROM matches )
SELECT matches.match_num,    winner.first_name AS winner_first_name,    winner.last_name AS winner_last_name,    loser.first_name AS loser_first_name,    loser.last_name AS loser_last_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT matches.match_num,    players.first_name AS winner_first_name,    players.last_name AS winner_last_name,    players.hand AS winner_hand,    players.birth_date AS winner_birth_date,    players.country_code AS winner_country,    loser.first_name AS loser_first_name,    loser.last_name AS loser_last_name,    loser.hand AS loser_hand,    loser.birth_date AS loser_birth_date,    loser.country_code AS loser_country FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players AS loser ON matches.loser_id = loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches) 
SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name AS winner_first_name,    players.last_name AS winner_last_name,    players_1.first_name AS loser_first_name,    players_1.last_name AS loser_last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN players players_1 ON matches.loser_id = players_1.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) as avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name;
SELECT players.first_name, players.last_name, sum(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name,     players.last_name,     SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, sum(ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name
SELECT players.first_name, players.last_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.country_code, count(*) AS player_count FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as player_count FROM players GROUP BY players.country_code; 
SELECT players.country_code, count(*) AS quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) AS quantity FROM players GROUP BY players.country_code; 
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT players.country_code, COUNT(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) AS quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code;
SELECT  SELECT country_code, count(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1 
SELECT players.country_code AS country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT player.country_code AS country_code,  COUNT(*) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
SELECT  SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code ORDER BY quantity DESC LIMIT 1; 
SELECT country_code,    COUNT(*) AS quantity FROM players GROUP BY country_code ORDER BY quantity DESC LIMIT 1;
SELECT MAX(country_code) AS most_players_country FROM players;
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*) AS player_count, players.country_code FROM players GROUP BY players.country_code ORDER BY player_count DESC LIMIT 1;
SELECT country_code, COUNT(*) as quantity FROM players GROUP BY country_code ORDER BY quantity DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT  players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50; 
SELECT country_code, COUNT(player_id) AS quantity FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code, count(*) FROM players GROUP BY country_code HAVING count(*) > 50;
SELECT country_code, COUNT(*) AS quantity FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT players.country_code, COUNT(*) as quantity FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT country_code, COUNT(player_id) AS quantity FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code, COUNT(player_id) AS quantity FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT ranking_date, count(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, count(*) as total_tours FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, count(tours) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_tours FROM rankings GROUP BY ranking_date;
SELECT YEAR(tourney_date) as year, count(*) as quantity FROM matches GROUP BY year;
SELECT  year, count(*) as quantity FROM matches GROUP BY year; 
SELECT  YEAR(tourney_date) AS year, COUNT(*) AS quantity FROM matches GROUP BY year; 
SELECT  year, COUNT(*) AS quantity FROM matches GROUP BY year; 
SELECT year, count(*) as quantity FROM matches GROUP BY year;
SELECT  YEAR(tourney_date) AS year, COUNT(*) AS matches_played FROM matches GROUP BY year; 
SELECT year, count(*) AS quantity FROM matches GROUP BY year;
SELECT year, count(*) as quantity FROM matches GROUP BY year 
SELECT year, COUNT(*) as quantity FROM matches GROUP BY year;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year; 
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY matches.winner_age LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3; 
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT winners.winner_id) FROM (   SELECT m.winner_id   FROM matches m   WHERE m.tourney_name = 'WTA Championships' ) winners JOIN players p ON winners.winner_id = p.player_id WHERE p.hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tournament_name = 'WTA Championships';
SELECT COUNT(players.player_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT count(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank_points_table ON matches.winner_id = max_rank_points_table.winner_id AND matches.winner_rank_points = max_rank_points_table.max_rank_points;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank ON matches.winner_id = max_rank.winner_id AND matches.winner_rank_points = max_rank.max_rank_points;
SELECT players.first_name, players.last_name, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches )
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_points ON players.player_id = max_points.winner_id WHERE players.player_id = max_points.winner_id;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id ORDER BY SUM(rankings.ranking_points) DESC LIMIT 1;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank ON matches.winner_id = max_rank.winner_id AND matches.winner_rank_points = max_rank.max_rank_points;
SELECT players.first_name, players.last_name, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY sum(matches.winner_rank_points) DESC LIMIT 1;
SELECT COUNT(*) AS quantity, hand FROM players GROUP BY hand;
SELECT hand, count(*) as quantity FROM players GROUP BY hand; 
SELECT hand, count(*) as quantity FROM players GROUP BY hand 
SELECT hand, count(*) as quantity FROM players GROUP BY hand;
SELECT hand, count(*) as quantity FROM players GROUP BY hand; 
SELECT hand, COUNT(*) AS quantity FROM players GROUP BY hand; 
SELECT hand, COUNT(*) AS quantity FROM players GROUP BY hand;
SELECT hand, count(*) AS quantity FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS quantity FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS quantity FROM players GROUP BY hand;
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT address_id, line_1, line_2, line_3 FROM Addresses
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT line_1, line_2, line_3 FROM Addresses
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses;
SELECT line_1, line_2, line_3 FROM Addresses;
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT address_id, line_1, line_2, line_3 FROM Addresses;
SELECT COUNT(*) AS quantity FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) AS quantity FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) FROM show WHERE If_first_show = true;
SELECT COUNT(*) as Quantity FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) FROM show WHERE If_first_show = 'Yes';
SELECT COUNT(*) as Quantity FROM show WHERE If_first_show = 'Yes';
SELECT Count(If_first_show) FROM show
SELECT COUNT(*) FROM show WHERE If_first_show = 1;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor_ID, Name FROM conductor ORDER BY birthday;
SELECT Conductor_ID, Name FROM conductor ORDER BY birthday;
SELECT Name FROM conductor ORDER BY birthday;
SELECT Name FROM conductor ORDER BY birthday ASC;
SELECT Conductor_ID,Name, birthday FROM conductor ORDER BY birthday;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday;
SELECT I understand that you are asking for the SQL query to retrieve the names of conductors ordered by age. Here is the SQL query:
SELECT Conductor.Name FROM Conductor ORDER BY Conductor.birthday;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday;
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT Name FROM conductor WHERE Nationality = 'American';
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded;
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded;
SELECT AVG(Attendance) AS Average_Attendance FROM show WHERE If_first_show = 'No' 
SELECT AVG(Attendance) FROM show WHERE If_first_show = 'No';
SELECT  AVG(Attendance) FROM show WHERE If_first_show = 'No' 
SELECT AVG(Attendance) FROM show WHERE If_first_show = 'No';
SELECT AVG(Attendance) FROM show WHERE If_first_show = 'No'
SELECT AVG(Attendance) FROM show WHERE If_first_show = 0;
SELECT AVG(Attendance) as average_attendance FROM show WHERE If_first_show = 0; 
SELECT AVG(attendance) FROM show WHERE If_first_show = 'No';
SELECT AVG(Attendance) as avg_attendance FROM show WHERE If_first_show = 0 
SELECT AVG(Attendance) FROM show WHERE If_first_show = 'No';
SELECT Max(Share) AS Maximum_Share, Min(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS maximum_share, MIN(Share) AS minimum_share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final'; 
SELECT  SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final' 
SELECT  SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final'; 
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type <> 'Live final'; 
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) as Quantity FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS Total_Nationalities FROM conductor; 
SELECT COUNT(DISTINCT Nationality) AS Number_of_nationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS number_of_different_nationalities FROM conductor; 
SELECT COUNT(DISTINCT Nationality) AS Quantity FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS Number_of_Different_Nationalities FROM conductor;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor.Name FROM conductor ORDER BY (CURRENT_DATE - conductor.birthday) ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.birthday;
SELECT Conductor_ID, Name FROM conductor ORDER BY TIMESTAMPDIFF(YEAR, birthday, CURDATE()) ASC;
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor); 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor WHERE Year_of_Work = (   SELECT MAX(Year_of_Work)   FROM conductor );
SELECT  CONDUCTOR_ID, Name FROM conductor WHERE YEAR_OF_WORK = (   SELECT MAX(YEAR_OF_WORK)   FROM conductor ); 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Conductor.Name FROM   conductor ORDER BY   conductor.Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Conductor.Name, Orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Conductor.Name FROM Conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name FROM Conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name, COUNT(*) AS quantity FROM conductor GROUP BY Conductor.Name HAVING COUNT(*) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, Conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT conductor.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name, COUNT(Orchestra.Orchestra_ID) AS Quantity FROM Conductor INNER JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY Quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra.Orchestra_ID) AS Quantity FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Conductor_ID ORDER BY Quantity DESC LIMIT 1;
SELECT Name FROM conductor WHERE Conductor_ID = (   SELECT Conductor_ID   FROM orchestra   GROUP BY Conductor_ID   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Conductor.Name, COUNT(Orchestra_ID) AS quantity FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra.Orchestra_ID) AS quantity FROM Conductor LEFT JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Conductor_ID ORDER BY quantity DESC LIMIT 1;
SELECT CONDUCTOR.Name FROM CONDUCTOR INNER JOIN ORCHESTRA ON CONDUCTOR.Conductor_ID = ORCHESTRA.Conductor_ID GROUP BY CONDUCTOR.Conductor_ID ORDER BY COUNT(DISTINCT ORCHESTRA.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name, count(*) as quantity FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra_ID) AS Quantity FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY Quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS quantity FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY quantity DESC LIMIT 1;
SELECT conductor.Name, COUNT(*) AS quantity FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY quantity DESC LIMIT 1;
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID ORDER BY orchestra.Year_of_Founded ASC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded LIMIT 1;
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded LIMIT 1;
SELECT Conductor.Name FROM Conductor INNER JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID ORDER BY Orchestra.Year_of_Founded ASC LIMIT 1;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded LIMIT 1;
SELECT Conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded DESC
SELECT Conductors.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID ORDER BY orchestra.Year_of_Founded DESC;
SELECT Name FROM conductor WHERE Conductor_ID IN (   SELECT Conductor_ID   FROM orchestra   WHERE Year_of_Founded = (     SELECT MAX(Year_of_Founded)     FROM orchestra   ) )
SELECT Name FROM conductor WHERE Conductor_ID IN (SELECT Conductor_ID            FROM orchestra            ORDER BY Year_of_Founded DESC            LIMIT 1);
SELECT Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra)
SELECT Record_Company, COUNT(Orchestra_ID) AS Quantity FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(orchestra.Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(orchestra.Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT  Record_Company, COUNT(DISTINCT Orchestra_ID) as Orchestra_Count FROM orchestra GROUP BY Record_Company; 
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT RECORD_COMPANY, COUNT(DISTINCT ORCHESTRA_ID) AS NUM_ORCHESTRAS FROM ORCHESTRA GROUP BY RECORD_COMPANY;
SELECT record_company, count(orchestra_id) as quantity FROM orchestra GROUP BY record_company;
SELECT record_company, COUNT(orchestra_id) AS total_orchestras_managed FROM orchestra GROUP BY record_company;
SELECT COUNT(*) AS Quantity, Record_Company FROM orchestra GROUP BY Record_Company;
SELECT record_company, count(orchestra_id) as number_of_orchestras_managed FROM orchestra GROUP BY record_company;
SELECT  orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Year_of_Founded ASC; 
SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Major_Record_Format, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT orchestra.Major_Record_Format, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded;
SELECT Orchestra_ID, Major_Record_Format FROM orchestra ORDER BY Year_of_Founded;
SELECT 	SELECT Orchestra, Major_Record_Format 	FROM orchestra 	ORDER BY Year_of_Founded;
SELECT  orchestra.Major_Record_Format, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded; 
SELECT Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MIN(Year_of_Founded) FROM orchestra)
SELECT record_company FROM orchestra WHERE Year_of_Founded = (SELECT MIN(Year_of_Founded) FROM orchestra)
SELECT orc.Record_Company FROM orchestra orc JOIN (   SELECT Orchestra_ID, MIN(Year_of_Founded) AS OldestYear   FROM orchestra   GROUP BY Orchestra_ID ) oldest ON orc.Orchestra_ID = oldest.Orchestra_ID WHERE orc.Year_of_Founded = oldest.OldestYear;
SELECT  Record_Company FROM orchestra o WHERE Year_of_Founded = (SELECT MIN(Year_of_Founded) FROM orchestra) 
SELECT DISTINCT orchestra.Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MIN(Year_of_Founded) FROM orchestra)
SELECT Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra) 
SELECT  Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra) 
SELECT  Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra); 
SELECT Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra)
SELECT orchestra.Record_Company FROM orchestra WHERE Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM orchestra)
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT  Record_Company FROM orchestra WHERE Year_of_Founded <= 2003; 
SELECT Record_Company FROM orchestra WHERE Year_of_Founded <= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded <= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded <= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded <= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003 GROUP BY Record_Company HAVING COUNT(*) > 1;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003 INTERSECT SELECT Record_Company FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Year_of_Founded >= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003 INTERSECT SELECT Record_Company FROM orchestra 
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 1;
SELECT Count(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 'Yes';
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE show.If_first_show = 'Yes' AND orchestra.Orchestra = 'Glebe Park';
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 'Yes';
SELECT count(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 1;
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE show.If_first_show = 'Yes' AND orchestra.Orchestra = 'Glebe Park';
SELECT COUNT(*) FROM show INNER JOIN performance ON show.Performance_ID = performance.Performance_ID INNER JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 'Yes'
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 1;
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE show.If_first_show = 'Yes' AND orchestra.Orchestra = 'Glebe Park';
SELECT COUNT(*) FROM show JOIN performance ON show.Performance_ID = performance.Performance_ID JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE orchestra.Orchestra = 'Glebe Park' AND show.If_first_show = 'Yes';
SELECT Type FROM performance WHERE Performance_ID IN (   SELECT Performance_ID   FROM show   WHERE If_first_show = 'No'   GROUP BY Performance_ID   HAVING COUNT(*) > 1 )
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID GROUP BY performance.Type HAVING COUNT(DISTINCT show.If_first_show = 'No') > 1;
SELECT performance.Type FROM performance INNER JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'No' GROUP BY performance.Type HAVING COUNT(DISTINCT show.Show_ID) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'no' GROUP BY performance.Performance_ID HAVING COUNT(*) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'No' GROUP BY performance.Performance_ID HAVING COUNT(*) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'no' GROUP BY performance.Type HAVING count(*) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'No' GROUP BY performance.Type HAVING COUNT(DISTINCT show.Show_ID) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'N' GROUP BY performance.Type HAVING COUNT(DISTINCT show.Show_ID) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'No' GROUP BY performance.Type HAVING COUNT(DISTINCT show.Show_ID) > 1;
SELECT performance.Type FROM performance JOIN show ON performance.Performance_ID = show.Performance_ID WHERE show.If_first_show = 'No' GROUP BY performance.Type HAVING COUNT(DISTINCT show.Performance_ID) > 1;
SELECT state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state GROUP BY Owners.state;
SELECT DISTINCT state FROM Owners WHERE state IN (   SELECT state   FROM Professionals )
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)
SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals) GROUP BY state HAVING COUNT(DISTINCT owner_id) > 0 AND COUNT(DISTINCT professional_id) > 0;
SELECT  SELECT DISTINCT o.state FROM Owners o WHERE EXISTS (SELECT 1 FROM Professionals p WHERE p.state = o.state) 
SELECT DISTINCT o.state FROM Owners o WHERE EXISTS (   SELECT 1   FROM Professionals p   WHERE o.state = p.state )
SELECT DISTINCT o.state FROM Owners o WHERE o.state IN (SELECT p.state FROM Professionals p)
SELECT DISTINCT Owners.state FROM Owners WHERE Owners.state IN (SELECT state FROM Professionals)
SELECT DISTINCT owners.state FROM owners JOIN professionals ON owners.state = professionals.state;
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;
SELECT  SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) 
SELECT ROUND(AVG(age), 2) AS average_age_of_treated_dogs FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments) 
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments            GROUP BY professional_id            HAVING COUNT(*) > 2);
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments            GROUP BY professional_id            HAVING COUNT(*) > 2);
SELECT Professionals.professional_id, last_name, cell_phone FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professionals.professional_id, last_name, cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE state = 'Indiana' OR    (SELECT COUNT(*) FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id) > 2;
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN   (SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2);
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000 OR SUM(Treatments.cost_of_treatment) IS NULL;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000 OR SUM(Treatments.cost_of_treatment) IS NULL;
SELECT   name FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments   GROUP BY dog_id   HAVING SUM(cost_of_treatment) > 1000 ); 
SELECT Dogs.name FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE (SELECT SUM(cost_of_treatment) FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id) > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE (SELECT SUM(cost_of_treatment) FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id) > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs);
SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT DISTINCT first_name FROM (  SELECT first_name FROM Owners  UNION ALL  SELECT first_name FROM Professionals  ) AS Names WHERE first_name NOT IN  (SELECT name FROM Dogs)
SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION ALL   SELECT first_name FROM Owners ) AS Names WHERE first_name NOT IN (   SELECT name FROM Dogs )
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT DISTINCT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS names WHERE first_name NOT IN (   SELECT DISTINCT name FROM Dogs );
SELECT DISTINCT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS names WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT DISTINCT name FROM Dogs;
SELECT DISTINCT first_name FROM (SELECT first_name FROM Owners    UNION    SELECT first_name FROM Professionals) AS all_names WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT Professional_ID, First_Name, Last_Name FROM Professionals WHERE NOT EXISTS (   SELECT *   FROM Treatments   WHERE Treatments.Professional_ID = Professionals.Professional_ID )
SELECT Professional.professional_id, Professional.first_name, Professional.last_name FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL;
SELECT Professional_id, first_name, last_name FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Professionals.professional_id, Professionals.first_name, Professionals.last_name FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Professional.professional_id, Professional.first_name, Professional.last_name FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL;
SELECT Professional_id, first_name FROM Professionals WHERE Professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Professional.professional_id, Professionals.first_name, Professionals.last_name FROM Professionals WHERE Professional.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT professional_id, first_name FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name HAVING count(*) = (SELECT max(owner_count) FROM (SELECT Owners.owner_id, count(*) as owner_count FROM Dogs GROUP BY Owners.owner_id) as owner_counts);
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   HAVING COUNT(*) = (     SELECT MAX(dog_count)     FROM (       SELECT owner_id, COUNT(*) AS dog_count       FROM Dogs       GROUP BY owner_id     ) AS dog_counts   ) ) 
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id         FROM Dogs         GROUP BY owner_id         ORDER BY count(*) DESC         LIMIT 1)
SELECT owner_id, CONCAT(first_name, ' ', last_name) AS owner_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs          GROUP BY owner_id          ORDER BY COUNT(*) DESC          LIMIT 1)
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   HAVING COUNT(*) = (     SELECT MAX(owner_dog_count)     FROM (       SELECT COUNT(*) as owner_dog_count       FROM Dogs       GROUP BY owner_id     ) as owner_dog_counts   ) )
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Professional_id, home_phone, cell_number FROM Professionals WHERE Professional_id IN (SELECT Professional_id              FROM Treatments              GROUP BY Professional_id              HAVING COUNT(*) >= 2)
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id              FROM Treatments              GROUP BY professional_id              HAVING COUNT(*) >= 2); 
SELECT Professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 )
SELECT Professionals.professional_id, Professionals.home_phone, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, Professionals.home_phone, Professionals.cell_number HAVING COUNT(*) >= 2;
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id in (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 ); 
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN  (SELECT professional_id  FROM Treatments  GROUP BY professional_id   HAVING COUNT(*) >= 2)
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 )
SELECT Professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );
SELECT Professional_id, home_phone, cell_number  FROM Professionals, Treatments  WHERE Professionals.professional_id = Treatments.professional_id  GROUP BY Professionals.professional_id  HAVING COUNT(*) >= 2;
SELECT breeds.breed_name, count(dogs.breed_code) as quantity FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code WHERE dogs.abandoned_yn = 'Y' GROUP BY breeds.breed_name ORDER BY quantity DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code           FROM Dogs           WHERE abandoned_yn = 'Y'           GROUP BY breed_code           ORDER BY COUNT(*) DESC           LIMIT 1);
SELECT breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE abandoned_yn = 'Y' GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code IN (   SELECT breed_code   FROM Dogs   WHERE abandoned_yn = 'Y'   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT breed_name FROM Breeds WHERE breed_code IN (   SELECT breed_code   FROM Dogs   WHERE abandoned_yn = 'Y'   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT breeds.breed_name FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code WHERE dogs.abandoned_yn = 'Y' GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code IN (   SELECT breed_code   FROM Dogs   WHERE abandoned_yn = 'Y'   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code WHERE dogs.abandoned_yn = 'Y' GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs WHERE abandoned_yn = 'Y' GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT breed_name FROM Breeds WHERE breed_code IN (   SELECT breed_code   FROM Dogs   WHERE abandoned_yn = 'Y'   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
SELECT Owners.owner_id, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1;
SELECT  owner_id, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   JOIN Treatments ON Dogs.dog_id = Treatments.dog_id   GROUP BY owner_id   ORDER BY SUM(cost_of_treatment) DESC   LIMIT 1 ) 
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY SUM(     (SELECT cost_of_treatment     FROM Treatments     WHERE dog_id = Dogs.dog_id)   ) DESC   LIMIT 1 ) 
SELECT  MAX(sum_cost) as max_spent FROM (SELECT owner_id, last_name, SUM(cost_of_treatment) as sum_cost FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id, last_name) as total_spent;
SELECT d.owner_id, o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id GROUP BY d.owner_id, o.last_name ORDER BY SUM((SELECT t.cost_of_treatment FROM Treatments t WHERE t.dog_id = d.dog_id)) DESC LIMIT 1; 
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   WHERE dog_id IN (     SELECT dog_id     FROM Treatments     GROUP BY dog_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1   ) ) LIMIT 1;
SELECT treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1  );
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (  SELECT treatment_type_code  FROM Treatments  GROUP BY treatment_type_code  ORDER BY SUM(cost_of_treatment)  LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(cost_of_treatment) LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code  FROM Owners  JOIN Dogs ON Owners.owner_id = Dogs.owner_id  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id  GROUP BY Owners.owner_id, Owners.zip_code  ORDER BY SUM(Treatments.cost_of_treatment) DESC  LIMIT 1;
SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY SUM(     (SELECT charge_amount      FROM Charges      WHERE charge_type = 'adoption fee')    + COALESCE(     (SELECT SUM(cost_of_treatment)      FROM Treatments      WHERE Treatments.dog_id = Dogs.dog_id), 0)   ) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Charges ON Treatments.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN (   SELECT owner_id, SUM(cost_of_treatment) as total_cost   FROM treatments   JOIN dogs ON treatments.dog_id = dogs.dog_id   GROUP BY owner_id   ORDER BY total_cost DESC   LIMIT 1 ) as top_spender ON owners.owner_id = top_spender.owner_id;
SELECT  owner_id, zip_code FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE owner_id IN (     SELECT owner_id     FROM Treatments     GROUP BY owner_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1   ) ) 
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Professional_id, first_name, last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professional_id, first_name, last_name HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT Professional_id, first_name, last_name FROM Professionals INNER JOIN (   SELECT professional_id, COUNT(DISTINCT treatment_type_code) as num_treatments   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 ) AS ProfTreatCounts ON Professionals.professional_id = ProfTreatCounts.professional_id;
SELECT Professional_id FROM Treatments GROUP BY Professional_id HAVING COUNT(DISTINCT Treatment_type_code) >= 2;
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN   (SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2)
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professional_id, home_phone, cell_number FROM Professionals WHERE Professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING count(DISTINCT treatment_type_code) >= 2 );
SELECT professional_id, home_phone, cell_number FROM Professionals GROUP BY professional_id, home_phone, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT Professional_id, home_phone, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professional.first_name, Professional.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))
SELECT Professional.first_name, Professional.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professional.first_name, Professional.last_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT Professional.first_name, Professional.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professional.first_name, Professional.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT treatment_id, cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT treatment_type_description, cost_of_treatment FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT treatment_id, cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)
SELECT name, date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM Dogs       GROUP BY breed_code       ) AS x     )   ) ORDER BY name;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM (     SELECT breed_code, COUNT(*) AS breed_count     FROM Dogs     GROUP BY breed_code     ORDER BY breed_count ASC     LIMIT 1   ) )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 ) ORDER BY Dogs.name;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds WHERE breed_name = (  SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) ASC  LIMIT 1 ));
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name =   (SELECT breed_name    FROM Breeds    GROUP BY breed_name    HAVING COUNT(*) =      (SELECT MIN(breed_count)      FROM (SELECT COUNT(*) AS breed_count         FROM Dogs         GROUP BY breed_code) AS counts)) ORDER BY Treatments.date_of_treatment;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = (   SELECT breed_name   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT TOP 1 breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC) ORDER BY Dogs.name, Treatments.date_of_treatment;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'VA'
SELECT date_arrived AS arrival_date, date_departed AS departure_date, date_of_treatment AS treatment_date FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT DATEDIFF(day, date_arrived, date_departed) AS treatment_duration FROM Dogs;
SELECT TIMESTAMPDIFF(DAY, date_arrived, date_departed) AS treatment_duration FROM Dogs;
SELECT DATEDIFF(day, date_arrived, date_departed) AS treatment_duration FROM Dogs;
SELECT DATE_DIFF(date_departed, date_arrived) AS treatment_duration FROM Dogs;
SELECT DATEDIFF(day, date_arrived, date_departed) AS treatment_period FROM Dogs;
SELECT DATEDIFF(date_departed, date_arrived) AS treatment_period FROM Dogs
SELECT TIMESTAMPDIFF(DAY, date_arrived, date_departed) AS treatment_period FROM Dogs;
SELECT DATEDIFF(day, date_arrived, date_departed) AS treatment_period FROM Dogs;
SELECT DATEDIFF(day, date_arrived, date_departed) AS treatment_period FROM Dogs;
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT  Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (   SELECT MIN(age)   FROM Dogs )
SELECT o.last_name FROM dogs d JOIN owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE date_of_birth = (   SELECT MIN(date_of_birth)   FROM Dogs )
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(Dogs.age) FROM Dogs)
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('HI', 'WI');
SELECT  email_address FROM Professionals WHERE state IN ('HI', 'WI') 
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI');
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('HI', 'WI');
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI') 
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('HI', 'WI');
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI')
SELECT professional_id,email_address FROM Professionals WHERE state = 'HI' OR state = 'WI'; 
SELECT professional_id, email_address FROM Professionals WHERE state IN ('HI', 'WI');
SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI');
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT  date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y' 
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT date_arrived, date_departed FROM Dogs WHERE abandoned_yn = 'Y';
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT count(DISTINCT Dogs.dog_id) as quantity FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(DISTINCT Dogs.dog_id) AS quantity FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT count(*) FROM Treatments;
SELECT COUNT(*) FROM Treatments;
SELECT COUNT(DISTINCT Dogs.dog_id) AS number_of_dogs_treated FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id;
SELECT Count(*) AS num_dogs_with_treatment FROM Treatments;
SELECT COUNT(*) as number_of_dogs FROM Treatments;
SELECT COUNT(*) AS number_of_dogs_with_treatments FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT professional_id, first_name, last_name FROM Professionals WHERE city LIKE '%West%';
SELECT professional_id, first_name, last_name FROM Professionals WHERE city LIKE '%West%'
SELECT professional_id, first_name, last_name FROM Professionals WHERE city LIKE '%West%'
SELECT professional_id, first_name, last_name FROM Professionals WHERE city LIKE '%West%';
SELECT professional_id, first_name, last_name FROM Professionals WHERE city LIKE '%West%';
SELECT  SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%' 
SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%';
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE city LIKE '%West%'
SELECT *From Professionals WHERE city LIKE '%West%';
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE city LIKE '%West%';
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%';
SELECT first_name,last_name FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) as recent_treatment_cost FROM Treatments
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1;
SELECT MAX(cost_of_treatment) as recent_treatment_cost FROM Treatments
SELECT MAX(cost_of_treatment) AS recent_treatment_cost FROM Treatments;
SELECT charge_amount FROM Charges ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT Treatments.cost_of_treatment FROM Treatments WHERE Treatments.date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT treatment_type_description, cost_of_treatment FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code ORDER BY date_of_treatment DESC LIMIT 1;
SELECT  MAX(date_of_treatment) AS most_recent_treatment_date, cost_of_treatment FROM Treatments 
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(DISTINCT Treatments.dog_id) AS number_of_dogs_received_treatment FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS num_dogs_received_treatment FROM Treatments;
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (   SELECT owner_id   FROM Dogs   WHERE abandoned_yn = 'Y' )
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o WHERE NOT EXISTS   (SELECT 1    FROM Dogs d    WHERE d.owner_id = o.owner_id    AND d.abandoned_yn = 'Y')
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT count(*) as owners_without_abandoned_dogs FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y');
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y')
SELECT COUNT(*) FROM Owners WHERE NOT EXISTS   (SELECT 1    FROM Dogs    WHERE abandoned_yn = 'Y' AND Dogs.owner_id = Owners.owner_id)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments )
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT  name, age, weight FROM Dogs WHERE abandoned_yn = 1 
SELECT dog_name, age, weight FROM Dogs WHERE abandoned_yn = 1 
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'
SELECT   SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 1
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'; 
SELECT AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';
SELECT CAST(AVG(age) AS DECIMAL(10,2)) AS average_age FROM Dogs WHERE abandoned_yn = 'Y';
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) AS age_of_oldest_dog FROM Dogs;
SELECT MAX(age) as oldest_dog_age FROM Dogs;
SELECT MAX(age) as oldest_age FROM Dogs;
SELECT MAX(age) AS oldest_age FROM Dogs;
SELECT DATEDIFF(CURRENT_DATE, date_of_birth) AS age_of_oldest_dog FROM Dogs ORDER BY date_of_birth LIMIT 1;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) AS max_charge_cost FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount)  FROM Charges;
SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges);
SELECT MAX(charge_amount) FROM Charges;
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT email_address, first_name, last_name FROM Professionals;
SELECT email_address, CONCAT(first_name, ' ', last_name) as name FROM Professionals;
SELECT Professionals.first_name, Professionals.last_name, Professionals.email_address FROM Professionals
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals;
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals;
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals
SELECT professional_id, email_address, first_name, last_name FROM Professionals;
SELECT Professionals.email_address, Professionals.first_name, Professionals.last_name FROM Professionals
SELECT breed_name, size_description FROM Breeds, Sizes;
SELECT breed_code, size_code FROM Breeds, Sizes;
SELECT breed_code, size_code FROM Breeds, Sizes
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT breed_name, size_description FROM Breeds, Sizes
SELECT Distinct breed_type, size_type FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds, Sizes, Dogs WHERE Breeds.breed_code = Dogs.breed_code AND Sizes.size_code = Dogs.size_code GROUP BY Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description;
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds, Dogs, Sizes WHERE Dogs.breed_code = Breeds.breed_code AND Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_name, Sizes.size_description;
SELECT Breeds.breed_code, Sizes.size_code FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY Breeds.breed_code, Sizes.size_code;
SELECT Breed_Code, Size_Code FROM Dogs
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) FROM singer;
SELECT  SELECT count(*) FROM singer; 
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year ASC;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year ASC;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Name FROM singer ORDER BY Birth_Year;
SELECT Singer_ID, Name, Birth_Year, Net_Worth_Millions, Citizenship FROM singer;
SELECT `Birth_Year`, `Citizenship` FROM `singer`;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer; 
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Birth_Year <= 1948
SELECT Name FROM singer WHERE Birth_Year <= 1948
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer WHERE Birth_Year <= 1948;
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer ORDER BY Birth_Year ASC LIMIT 1;
SELECT Singer.Name FROM Singer WHERE Birth_Year = (   SELECT MIN(Birth_Year)   FROM Singer )
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer WHERE Birth_Year = (SELECT MIN(Birth_Year) FROM singer);
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Name FROM singer ORDER BY Birth_Year LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT CItizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship;
SELECT Singer.Citizenship, COUNT(*) AS quantity FROM Singer GROUP BY Singer.Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, count(*) as quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) as quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) as Highest_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Singer.Citizenship, MAX(Singer.Net_Worth_Millions) AS Highest_Net_Worth FROM Singer GROUP BY Singer.Citizenship;
SELECT   Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth   FROM singer   GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) as Highest_Net_Worth FROM singer GROUP BY Citizenship; 
SELECT Citizenship, MAX(Net_Worth_Millions) AS highest_net_worth FROM singer GROUP BY Citizenship;
SELECT  Citizenship, MAX(Net_Worth_Millions) AS Highest_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title FROM song WHERE song.Sales = (SELECT MAX(Sales) FROM song)
SELECT song.Title FROM song WHERE song.Sales = (SELECT MAX(Sales) FROM song);
SELECT song.Title FROM song WHERE song.Sales = (SELECT MAX(Sales) FROM song)
SELECT song.Title FROM song WHERE song.Sales = (SELECT MAX(Sales) FROM song)
SELECT song.Title FROM song WHERE Sales = (SELECT MAX(Sales) FROM song)
SELECT song.Title FROM song WHERE Sales = (SELECT MAX(Sales) FROM song);
SELECT   song.Title FROM   song WHERE   song.Sales = (SELECT MAX(Sales) FROM song);
SELECT song.Title FROM song WHERE song.Sales = (SELECT MAX(Sales) FROM song)
SELECT song.Title FROM song WHERE Sales = (SELECT MAX(Sales) FROM song)
SELECT Title FROM song WHERE Sales = (SELECT MAX(Sales) FROM song)
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT DISTINCT Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000) 
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   WHERE Sales > 300000 );
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer.Name HAVING COUNT(*) > 1;
SELECT  SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1) 
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 ); 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(*) > 1;
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer.Name HAVING COUNT(*) > 1;
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer.Singer_ID, Singer.Name HAVING COUNT(*) > 1;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(*) > 1;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1;
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*) > 1;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) AS Max_Highest_Position FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer.Name;
SELECT singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Singer.Name, MAX(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer.Name;
SELECT singer.Name, max(song.Highest_Position) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song);
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;
SELECT Singer.Name FROM Singer LEFT JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Singer_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT singer.Name AS sname FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year <= 1945;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year <= 1945;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year <= 1945
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year <= 1945;
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945; 
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945;
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945;
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945;
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945;
SELECT Citizenship FROM singer WHERE Birth_Year <= 1945;
