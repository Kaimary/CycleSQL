SELECT Singer.Name, Singer.Country, Singer.Age FROM singer ORDER BY Singer.Age;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age; 
SELECT Singer.Name, Singer.Country, Singer.Age FROM   singer ORDER BY   Singer.Age;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France';
SELECT AVG(s.Age) AS avg_age, MIN(s.Age) AS min_age, MAX(s.Age) AS max_age FROM singer s WHERE s.Country = 'France';
SELECT AVG(s.Age) AS Average_Age, MIN(s.Age) AS Minimum_Age, MAX(s.Age) AS Maximum_Age FROM singer s WHERE s.Country = 'France'; 
SELECT   AVG(Age) AS average_age,   MIN(Age) AS min_age,   MAX(Age) AS max_age FROM singer WHERE Country = 'France';
SELECT  SELECT AVG(s.Age) AS average_age, MIN(s.Age) AS min_age, MAX(s.Age) AS max_age FROM singer s WHERE s.Country = 'France'; 
SELECT AVG(s.Age) AS average_age, MIN(s.Age) AS min_age, MAX(s.Age) AS max_age FROM singer s WHERE s.Country = 'France';
SELECT  SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = 'France' 
SELECT  Average(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' 
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'; 
SELECT s.Name, s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1;
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT s.Song_Name, s.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer) 
SELECT s.Song_Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT  s.Country FROM singer s WHERE s.Age > 20 
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT  singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country; 
SELECT singer.Country, COUNT(singer.Singer_ID) AS Quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS Singer_Count FROM singer GROUP BY singer.Country; 
SELECT  singer.Country, COUNT(*) as singer_count FROM singer GROUP BY singer.Country; 
SELECT singer.Country, COUNT(*) as singer_count FROM singer GROUP BY singer.Country; 
SELECT singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) AS quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) as Quantity FROM singer GROUP BY singer.Country;
SELECT Country, COUNT(*) FROM singer GROUP BY Country;
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(sg.Age) FROM singer sg);
SELECT song.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN song ON singer.Song_Name = song.Song_Name WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT song_name FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE age > (SELECT AVG(age) FROM singer) 
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer);
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT  stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000; 
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000;
SELECT `Location`, `Name` FROM `stadium` WHERE `Capacity` BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT  Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000;
SELECT  Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT `Location, Name` FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000; 
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015); 
SELECT count(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015); 
SELECT COUNT(concert_ID) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT stadium.Name, stadium.Capacity, COUNT(concert.concert_ID) AS num_concerts FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY num_concerts DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity, COUNT(*) AS quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Capacity ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year >= 2014   GROUP BY concert.Stadium_ID   HAVING COUNT(*) = (     SELECT MAX(concert_count)     FROM (       SELECT stadium.Stadium_ID, COUNT(*) AS concert_count       FROM concert       WHERE concert.Year >= 2014       GROUP BY stadium.Stadium_ID     ) subquery   ) );
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year > 2013   GROUP BY concert.Stadium_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  stadium.Name, stadium.Capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID IN (   SELECT c.Stadium_ID   FROM concert c   WHERE c.Year > 2013   GROUP BY c.Stadium_ID   HAVING COUNT(*) = (     SELECT MAX(concert_count)     FROM (       SELECT Stadium_ID, COUNT(*) AS concert_count       FROM concert       WHERE Year > 2013       GROUP BY Stadium_ID     ) sub   ) )
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert);
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert) 
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT singer.Country FROM singer WHERE singer.Age > 40 UNION SELECT singer.Country FROM singer WHERE singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 OR singer.Age < 30;
SELECT singer.Country FROM singer WHERE Age > 40 UNION SELECT singer.Country FROM singer WHERE Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 OR singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40   OR singer.Age < 30;
SELECT  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 ); 
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN   (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014);
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014);
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT  stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN  (SELECT concert.Stadium_ID  FROM concert  WHERE concert.Year = 2014) 
SELECT  stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID                  FROM concert                  WHERE Year = 2014) 
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) 
SELECT A.Name FROM stadium A WHERE NOT EXISTS (SELECT 1 FROM concert C WHERE A.stadium_ID = C.stadium_ID AND C.year = 2014)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) 
SELECT concert_Name, Theme, COUNT(singer.Singer_ID) AS Singer_Count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID LEFT JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert_Name, Theme, COUNT(Singer_ID) as num_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_Count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert_Name, Theme, COUNT(Singer_ID) AS quantity FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as Singer_Count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(*) as concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(*) as number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Concerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) as concert_count FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) AS concert_count FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID LEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT Singer.Name, COUNT(concert.concert_ID) AS Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY Singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE YEAR = 2014;
SELECT Singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE YEAR = 2014;
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT Singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN   (SELECT Singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%');
SELECT Singer.Name, Singer.Country FROM singer WHERE Singer.Singer_ID IN (   SELECT Singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%' )
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT singer_in_concert.Singer_ID   FROM singer_in_concert   JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID   WHERE singer_in_concert.Singer_ID = singer.Singer_ID   AND singer.Song_Name LIKE '%Hey%' )
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN   (SELECT Singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%')
SELECT DISTINCT stadium.Name, stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015);
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium WHERE stadium.Stadium_ID IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year IN (2014, 2015)   GROUP BY concert.Stadium_ID   HAVING COUNT(DISTINCT concert.Year) = 2 )
SELECT  stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert_ID) = 2; 
SELECT s.Name, s.Location FROM stadium s WHERE s.Stadium_ID IN (   SELECT c.Stadium_ID   FROM concert c   WHERE c.Year IN (2014, 2015)   GROUP BY c.Stadium_ID   HAVING COUNT(DISTINCT c.Year) = 2 ) 
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND EXISTS (SELECT 1       FROM concert AS c       WHERE c.Stadium_ID = concert.Stadium_ID       AND c.Year = 2015)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID   FROM stadium  WHERE Capacity = (SELECT MAX(Capacity)            FROM stadium))
SELECT Count(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium));
SELECT COUNT(*) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium));
SELECT Count(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (   SELECT MAX(Capacity)   FROM stadium )
SELECT  COUNT(*) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1)
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'
SELECT weight FROM Pets WHERE pet_type = 'dog' ORDER BY pet_age LIMIT 1; 
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';
SELECT min(weight) FROM Pets WHERE PetType='dog' ORDER BY pet_age LIMIT 1;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(Has_Pet.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT Count(*) FROM Has_Pet hp INNER JOIN Student s ON hp.StuID = s.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT count(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'female' AND p.PetType = 'dog';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'female';
SELECT count(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID INNER JOIN Student ON Has_Pet.StuID=Student.StuID WHERE Pets.PetType='dog' AND Student.Sex='F';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND Sex = 'female'; 
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'female' AND p.PetType = 'dog';
SELECT COUNT(*) FROM Has_Pet hp INNER JOIN Student s ON hp.StuID = s.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'female' AND p.PetType = 'dog';
SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType IN ('cat', 'dog') );
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE PetType IN ('cat', 'dog'))
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.LName, Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.LName, Student.FName HAVING COUNT(*) = 2
SELECT Student.Fname, Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Has_Pet.StuID HAVING COUNT(*) = 2;
SELECT Student.LName, Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog' GROUP BY Student.StuID, Student.LName, Student.FName HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT s.Fname, s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog') GROUP BY s.StuID, s.Fname, s.LName HAVING COUNT(*) = 2;
SELECT Student.Fname, Student.LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname, Student.LName HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Fname FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT S.Fname FROM Student S INNER JOIN Has_Pet HP ON S.StuID = HP.StuID INNER JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND S.StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'));
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(*) = 2;
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType<>'cat'));
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType <> 'cat'));
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN   (SELECT h.StuID   FROM Has_Pet h   JOIN Pets p ON h.PetID = p.PetID   WHERE p.PetType = 'cat');
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN   (SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'cat')
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN   (SELECT Has_Pet.StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat');
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType <> 'cat';
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetID IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN   (SELECT Student.StuID   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat')
SELECT Student.FName, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN   (SELECT Student.StuID   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID              FROM Student              INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID              INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID              WHERE Pets.PetType = 'cat')
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN  (SELECT DISTINCT StuID  FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' ) 
SELECT Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Has_Pet.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT pet_type, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.pet_type, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1;
SELECT Pets.PetType, MIN(Pets.pet_age) AS youngest_age, Pets.weight FROM Pets GROUP BY Pets.PetType, Pets.weight HAVING Pets.pet_age = MIN(Pets.pet_age)
SELECT Pets.PetType, Pets.pet_age, Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1;
SELECT Pets.PetType, Pets.weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT `Last name` FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT AVERAGE(Age) FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet )
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT (SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID           FROM Has_Pet))
SELECT   AVG(Age) as average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT  SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN   (SELECT StuID   FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT  SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT car_makers.FullName, car_makers.Id, count(car_names.Model) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, count(car_names.Model) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, count(model_list.ModelId) AS quantity FROM car_makers LEFT JOIN model_list ON car_makers.Id=model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) AS ModelQuantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, count(car_names.Model) as ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) as model_quantity FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM car_names WHERE MakeId IN (   SELECT Id   FROM cars_data   WHERE Weight < (SELECT AVG(Weight) FROM cars_data) ) 
SELECT  Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data); 
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT  Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data) 
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT c.Maker FROM car_makers c INNER JOIN model_list m ON c.Id = m.Maker INNER JOIN car_names cn ON m.Model = cn.Model INNER JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM cars_data WHERE Year = 1970)));
SELECT Maker FROM car_makers WHERE Id IN (   SELECT DISTINCT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (       SELECT Id       FROM cars_data       WHERE Year = 1970     )   ) )
SELECT Maker FROM car_makers WHERE Id IN (   SELECT DISTINCT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (       SELECT Id       FROM cars_data       WHERE Year = 1970     )   ) )
SELECT c.Maker FROM car_makers c INNER JOIN model_list m ON c.Id = m.Maker INNER JOIN car_names n ON m.Model = n.Model INNER JOIN cars_data d ON n.MakeId = d.Id WHERE d.Year = 1970;
SELECT car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id ORDER BY cars_data.Year LIMIT 1;
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_names.make, cars_data.year FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)
SELECT Make, Year FROM cars_data WHERE Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_names.Make, MIN(cars_data.Year) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Make;
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT car_makers.Maker, MIN(cars_data.Year) AS Earliest_year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker;
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Maker;
SELECT car_makers.Maker, MIN(cars_data.Year) AS Earliest_production_year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker;
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id GROUP BY car_makers.Maker;
SELECT DISTINCT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980;
SELECT DISTINCT Model FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON car_names.Model = model_list.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countries.CountryName, COUNT(car_makers.Id) AS quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY quantity DESC LIMIT 1;
SELECT countries.CountryName, COUNT(car_makers.Id) AS quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY quantity DESC LIMIT 1;
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT countries.CountryName FROM countries JOIN (SELECT car_makers.Country AS CountryId, COUNT(*) AS MakerCount    FROM car_makers    GROUP BY car_makers.Country) AS MakerCounts ON countries.CountryId = MakerCounts.CountryId ORDER BY MakerCounts.MakerCount DESC LIMIT 1;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countries.CountryName, COUNT(car_makers.Id) AS carmaker_count FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY carmaker_count DESC LIMIT 1;
SELECT CountryName, COUNT(Maker) AS maker_count FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY maker_count DESC LIMIT 1;
SELECT CountryName FROM countries GROUP BY CountryName ORDER BY COUNT(DISTINCT car_makers.Id) DESC LIMIT 1;
SELECT CountryName FROM   car_makers   JOIN countries ON car_makers.Country = countries.CountryId GROUP BY   CountryName ORDER BY   COUNT(DISTINCT car_makers.Id) DESC LIMIT 1; 
SELECT car_makers.FullName, COUNT(car_names.Model) AS ModelCount FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS count_models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(*) AS model_count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(car_names.Model) AS model_count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.FullName, COUNT(model_list.ModelId) as model_count FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) AS Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, count(*) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(car_names.Model) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS Number_of_Models FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)')
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'amc hornet sportabout (sw)');
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc') AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'amc hornet sportabout (sw)'
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(DISTINCT car_makers.Id) FROM car_makers WHERE car_makers.Country IN (SELECT CountryId FROM countries WHERE CountryName='France');
SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';
SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France'
SELECT COUNT(DISTINCT cm.Id) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa'
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT COUNT(*) FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'USA';
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT count(DISTINCT car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT Count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT countries.CountryName, car_makers.Id FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, car_makers.Id FROM car_makers LEFT JOIN countries ON car_makers.Country = countries.CountryId
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT  COUNT(*) FROM cars_data WHERE Horsepower > 150 
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) as quantity FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT countries.CountryName, count(car_makers.Id) as quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON continents.ContId = countries.Continent WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING count(car_makers.Id) >= 3;
SELECT countries.CountryName, COUNT(DISTINCT car_makers.Id) as quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(*) >= 3;
SELECT CountryName FROM countries WHERE Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(DISTINCT Maker) >= 3;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT Model FROM cars_data WHERE MPG = (   SELECT MAX(MPG)   FROM cars_data )
SELECT model_list.Maker, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.ModelId ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT car_names.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT  SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980; 
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(Horsepower),2) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(Horsepower), 2) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(Horsepower), 2) FROM cars_data WHERE Year < 1980;
SELECT AVG(edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT ROUND(AVG(cars_data.Edispl), 2) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT car_names.Model as Car_Model, COUNT(DISTINCT car_names.MakeId) as Quantity FROM car_names GROUP BY car_names.Model ORDER BY Quantity DESC LIMIT 1;
SELECT car_names.Model, COUNT(DISTINCT car_names.MakeId) AS Versions FROM car_names GROUP BY car_names.Model ORDER BY COUNT(DISTINCT car_names.MakeId) DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make, COUNT(DISTINCT car_names.Model) as quantity FROM car_names GROUP BY car_names.MakeId, car_names.Make ORDER BY COUNT(DISTINCT car_names.Model) DESC LIMIT 1;
SELECT car_names.Model, COUNT(DISTINCT car_names.MakeId) AS Versions FROM car_names GROUP BY car_names.Model ORDER BY Versions DESC LIMIT 1;
SELECT car_names.Model, COUNT(DISTINCT car_names.MakeId) AS quantity FROM car_names GROUP BY car_names.Model ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(Id) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor Company';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor Company'
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(car_names.Model) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Id = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor Company';
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.Model) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT DISTINCT car_names.Model FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500 lbs;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
SELECT YEAR FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;
SELECT COUNT(*) AS quantity FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId);
SELECT count(Cylinders) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'volvo' AND cd.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = cn.MakeId)
SELECT COUNT(*) FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo' AND cd.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker = 'volvo')))
SELECT count(*) FROM cars_data WHERE Id = (SELECT MakeId       FROM car_names       WHERE Make = 'volvo'       ORDER BY Accelerate       LIMIT 1) ORDER BY Accelerate LIMIT 1;
SELECT count(*) FROM cars_data WHERE Id IN   (SELECT MakeId    FROM car_names    WHERE Model IN      (SELECT model      FROM model_list      WHERE Maker =        (SELECT Id         FROM car_makers         WHERE FullName = 'volvo'))   ) AND Accelerate =   (SELECT MIN(Accelerate)    FROM cars_data    WHERE Id IN      (SELECT MakeId      FROM car_names      WHERE Model IN        (SELECT model         FROM model_list         WHERE Maker =           (SELECT Id           FROM car_makers           WHERE FullName = 'volvo'))      )   );
SELECT COUNT(*) AS quantity FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId)
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE cars_data.Id = car_names.MakeId) GROUP BY cars_data.Cylinders;
SELECT COUNT(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cn.Make = 'Volvo' AND cd.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = cn.MakeId);
SELECT count(*) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_names.Make = 'volvo' ORDER BY cars_data.Accelerate LIMIT 1;
SELECT count(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId)
SELECT COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT countries.CountryName) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2;
SELECT COUNT(countries.CountryName) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) > 2;
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT countries.CountryName) FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT car_makers.Country) as NumNations FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS NumberOfNations FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS num_nations FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS numberOfNations FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT  model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model
SELECT model_list.Model, MAX(cars_data.Horsepower) as HighestHorsepower FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 
SELECT  MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 
SELECT  MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980 
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker != 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.ModelId WHERE countries.CountryName IN (  SELECT CountryName  FROM car_makers  GROUP BY CountryName  HAVING COUNT(*) > 3  OR 'fiat' IN (SELECT Make FROM car_names WHERE car_names.Model = model_list.Model) )
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IN (SELECT Id FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR car_makers.Id IN (SELECT Id FROM car_makers WHERE Maker = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IN (SELECT Id FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR car_makers.Id = (SELECT Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE car_names.Make = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IN (   SELECT Id   FROM car_makers   GROUP BY Id   HAVING COUNT(*) > 3   ) OR countries.CountryId IN (   SELECT CountryId   FROM car_makers   JOIN model_list ON car_makers.Id = model_list.Maker   JOIN car_names ON model_list.ModelId = car_names.MakeId   WHERE car_names.Model = 'fiat'   ) GROUP BY countries.CountryId, countries.CountryName;
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN  (SELECT car_makers.Country  FROM car_makers  GROUP BY car_makers.Country  HAVING COUNT(*) > 3  UNION  SELECT car_makers.Country  FROM car_makers  INNER JOIN model_list ON car_makers.Id = model_list.Maker  INNER JOIN car_names ON model_list.Model = car_names.Model  WHERE car_names.Make = 'fiat'  ) ORDER BY countries.CountryId;
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT countries.CountryId   FROM countries   JOIN car_makers ON car_makers.Country = countries.CountryId   JOIN model_list ON model_list.Maker = car_makers.Id   JOIN car_names ON car_names.Model = model_list.Model   WHERE car_names.Make = 'Fiat' )
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IN   (SELECT car_makers.Id    FROM car_makers   GROUP BY car_makers.Country   HAVING count(*) > 3) OR car_makers.Id IN   (SELECT car_makers.Id    FROM car_makers   INNER JOIN model_list ON car_makers.Id = model_list.Maker   INNER JOIN car_names ON model_list.Model = car_names.Model   WHERE car_names.Make = 'Fiat');
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 OR countries.CountryName IN (SELECT countries.CountryName               FROM countries               JOIN car_makers ON countries.CountryId = car_makers.Country               JOIN model_list ON car_makers.Id = model_list.Maker               JOIN car_names ON model_list.ModelId = car_names.MakeId               WHERE car_names.Model = 'fiats')
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT countries.CountryId   FROM countries   JOIN car_names ON countries.CountryId = car_names.MakeId   WHERE car_names.Model = 'Fiat' )
SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( 	SELECT Country 	FROM car_makers 	GROUP BY Country 	HAVING COUNT(*) > 3 ) OR CountryId IN ( 	SELECT CountryId 	FROM car_makers 	JOIN model_list ON car_makers.Id = model_list.Maker 	JOIN car_names ON model_list.ModelId = car_makers.Id 	WHERE Make = 'Fiat' )
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA";
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = "USA";
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.AirportName = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.AirportName = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.AirportName = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Airline = 'UAL';
SELECT Airline FROM airlines WHERE Airline = 'UAL';
SELECT Airline FROM airlines WHERE Airline = 'UAL';
SELECT Airline FROM airlines WHERE Airline = 'UAL';
SELECT Airline FROM airlines WHERE Airline = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT AIRLINE FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO'
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation='AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT Airline FROM airlines WHERE Abbreviation = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT Count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT  COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights INNER JOIN airports on flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT Count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport='Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(flights.FlightNo) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'); 
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ABZ';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'AHD' )
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid=flights.Airline JOIN airports ON flights.DestAirport=airports.AirportCode WHERE airports.AirportCode='AHD';
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD');
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM airlines WHERE uid IN  (SELECT Airline  FROM flights  WHERE DestAirport = 'AHD'  )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'AHD';
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airline FROM flights WHERE SourceAirport IN ('APG','CVO') GROUP BY airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT air.Airline FROM airlines air INNER JOIN flights f ON air.uid = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY air.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG' OR airports.City = 'CVO' GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.City) = 2;
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'APG' ) AND uid IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'CVO' );
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports AS apg_airport ON flights.SourceAirport = apg_airport.AirportCode INNER JOIN airports AS cvo_airport ON flights.SourceAirport = cvo_airport.AirportCode WHERE apg_airport.AirportCode = 'APG' AND cvo_airport.AirportCode = 'CVO';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode WHERE source_airport.AirportCode = 'CVO' AND airlines.uid NOT IN (   SELECT airlines.uid   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports AS source_airport ON flights.SourceAirport = source_airport.AirportCode   JOIN airports AS dest_airport ON flights.DestAirport = dest_airport.AirportCode   WHERE source_airport.AirportCode = 'APG' )
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT flights.Airline              FROM flights              WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid                 FROM airlines                 JOIN flights ON airlines.uid = flights.Airline                 WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid              FROM airlines             JOIN flights ON airlines.uid = flights.Airline             JOIN airports ON flights.SourceAirport = airports.AirportCode             WHERE airports.AirportCode = 'APG');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.uid NOT IN (  SELECT airlines.uid  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG' )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG')
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG')
SELECT   airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (   SELECT airlines.Airline   FROM airlines   JOIN flights ON flights.Airline = airlines.uid   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'APG' ) GROUP BY airlines.Airline;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline  FROM airlines  JOIN flights ON airlines.uid = flights.Airline  JOIN airports ON flights.SourceAirport = airports.AirportCode  WHERE airports.AirportCode = 'APG');
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines";
SELECT flights.FlightNo FROM flights WHERE flights.Airline = "United Airlines";
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG"
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) AS quantity FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen' OR DestAirport = 'Abilene';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport = 'Aberdeen' OR DestAirport = 'Abilene';
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights  UNION  SELECT DestAirport FROM flights)
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT DestAirport FROM flights);
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN   (SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights);
SELECT airports.AirportName FROM airports WHERE NOT EXISTS (SELECT 1 FROM flights WHERE flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode)
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (   SELECT flights.SourceAirport FROM flights   UNION   SELECT flights.DestAirport FROM flights )
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportCode, airports.AirportName, airports.City FROM airports LEFT JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode WHERE flights.FlightNo IS NULL;
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) AND airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights);
SELECT airports.AirportCode, airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT AIRPORTCODE FROM AIRPORTS WHERE AIRPORTCODE NOT IN (SELECT SOURCEAIRPORT FROM FLIGHTS               UNION               SELECT DESTAIRPORT FROM FLIGHTS)
SELECT Employee_Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT  Name FROM employee ORDER BY Age 
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1 
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT COUNT(*), shop.Location FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) AS number_of_shops FROM shop GROUP BY shop.Location;
SELECT COUNT(shop.Shop_ID) AS num_shops, shop.Location FROM shop GROUP BY shop.Location;
SELECT I can write the SQL query to count the number of shops in each place as follows:
SELECT shop.Location, count(*) as number_of_shops FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) AS shop_count FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(shop.Shop_ID) as Num_Shops FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) AS number_of_shops FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) as quantity FROM shop GROUP BY shop.Location;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop) 
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Shop_ID = (   SELECT Shop_ID   FROM shop   ORDER BY Number_products DESC   LIMIT 1 )
SELECT s.shop.manager_name, s.district FROM shop s ORDER BY s.number_products DESC LIMIT 1;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT  shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC; 
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC; 
SELECT s.Shop_ID, s.Name, s.Location, s.District FROM shop s ORDER BY s.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Shop.Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT  Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop); 
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT Employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY num_employees DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS number_of_employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY number_of_employees DESC LIMIT 1;
SELECT shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name, COUNT(*) as quantity FROM hiring INNER JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID ORDER BY quantity DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY num_employees DESC LIMIT 1;
SELECT shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000;
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING MIN(Number_products) < 3000 AND MAX(Number_products) > 10000;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN (SELECT District FROM shop WHERE Number_products > 10000)
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN (   SELECT shop.District   FROM shop   WHERE shop.Number_products > 10000 )
SELECT shop.District FROM shop WHERE Number_products < 3000 AND shop.District IN (   SELECT shop.District   FROM shop   WHERE Number_products > 10000 )
SELECT DISTRICT FROM shop WHERE Number_products < 3000 AND Number_products > 10000 GROUP BY DISTRICT;
SELECT shop.District FROM shop WHERE shop.Shop_ID IN (   SELECT Shop_ID   FROM shop   WHERE Number_products < 3000 ) AND shop.District IN (   SELECT District   FROM shop   WHERE Number_products > 10000 )
SELECT DISTRICT FROM shop WHERE Number_products < 3000 AND District IN  (SELECT District  FROM shop  WHERE Number_products > 10000);
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN 1 END) > 0;
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 AND s.District IN (   SELECT s1.District   FROM shop s1   WHERE s1.Number_products > 10000 )
SELECT Name FROM teacher ORDER BY Age ASC; 
SELECT teacher.Name FROM teacher ORDER BY teacher.Age
SELECT Name FROM teacher ORDER BY Age;
SELECT NAME FROM teacher ORDER BY Age;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age;
SELECT teacher.Name FROM teacher ORDER BY Age;
SELECT    Name FROM teacher ORDER BY Age;
SELECT Name FROM teacher ORDER BY Age;
SELECT Name FROM teacher ORDER BY Age;
SELECT  Name FROM teacher ORDER BY Age; 
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT  teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District'; 
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT Teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT I understand that you are asking for SQL to retrieve the names of the teachers who are either 32 or 33 years old. You can use the following query to achieve this:
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Name, Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, count(*) as quantity FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(*) AS quantity FROM teacher GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(*) as Count_of_Teachers FROM teacher GROUP BY teacher.Hometown;
SELECT Hometown, count(*) as quantity FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS quantity FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS quantity FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) as quantity FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2; 
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math'
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math'
SELECT teacher.Name FROM teacher JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'math';
SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Course_Arrange.Teacher_ID FROM Course_Arrange)
SELECT Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange) 
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL;
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL;
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT DISTINCT teacher_id FROM course_arrange)
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Count(*) FROM visitor WHERE Age < 30;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT  ROUND(AVG(Age), 2) AS avg_age FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) FROM visitor WHERE Level_of_membership <= 4;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) FROM visitor WHERE Level_of_membership <= 4;
SELECT  Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (   SELECT MAX(Num_of_Staff)   FROM museum )
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT   SELECT Name   FROM museum   WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT Museum.Name FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 )
SELECT Name FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 )
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT Name FROM museum WHERE Num_of_Staff >   (SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM   visitor JOIN   visit ON visitor.ID = visit.visitor_ID GROUP BY   visitor.ID, visitor.Name, visitor.Age HAVING   COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Museum_ID IN (   SELECT Museum_ID   FROM visit   GROUP BY visitor_ID, Museum_ID   HAVING COUNT(*) > 1 )
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visit.visitor_ID, visitor.Name, visitor.Level_of_membership FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.visitor_ID) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum INNER JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.visitor_ID) DESC LIMIT 1;
SELECT Museum_ID, Name FROM museum WHERE Museum_ID IN   (SELECT Museum_ID    FROM visit    GROUP BY Museum_ID    ORDER BY COUNT(*) DESC    LIMIT 1);
SELECT museum.Museum_ID, museum.Name FROM museum INNER JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Museum_ID, Name FROM museum WHERE Museum_ID IN (   SELECT Museum_ID   FROM visit   GROUP BY Museum_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.visitor_ID IS NULL;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit)
SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN  (SELECT visit.Museum_ID  FROM visit)
SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN (SELECT visit.Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY SUM(visit.Num_of_Ticket) DESC LIMIT 1;
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (   SELECT MAX(Num_of_Ticket)   FROM visit )
SELECT v.Name, vi.Age FROM visit vi JOIN visitor v ON vi.visitor_ID = v.ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT Total_spent FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 'lv 1';
SELECT Total_spent FROM visit INNER JOIN visitor on visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 'lv 1';
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 'lv 1'
SELECT SUM(visit.Total_spent) AS total_expense FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 'lv 1' 
SELECT SUM(visit.Num_of_Ticket * visit.Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 'lv 1';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'; 
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name, count(*) as matches_count FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_date BETWEEN '2013-01-01' AND '2013-12-31' AND players.player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_date BETWEEN '2016-01-01' AND '2016-12-31'   GROUP BY winner_id   HAVING COUNT(DISTINCT tourney_date) = 2 )
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE EXTRACT(year FROM matches.tourney_date) IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT EXTRACT(year FROM matches.tourney_date)) = 2;
SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE YEAR = 2013 OR YEAR = 2016 GROUP BY players.player_id HAVING COUNT(DISTINCT YEAR) = 2;
SELECT DISTINCT p.first_name, p.last_name FROM matches m INNER JOIN players p ON m.winner_id = p.player_id WHERE m.year IN (2013, 2016) GROUP BY p.first_name, p.last_name HAVING COUNT(DISTINCT m.year) = 2;
SELECT players.first_name, players.last_name FROM players INNER JOIN matches AS m1 ON players.player_id = m1.winner_id INNER JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE YEAR(m1.tourney_date) = 2013 AND YEAR(m2.tourney_date) = 2016
SELECT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_date BETWEEN '2013-01-01' AND '2013-12-31' AND p.player_id IN  (SELECT winner_id  FROM matches  WHERE  tourney_date BETWEEN '2016-01-01' AND '2016-12-31'  GROUP BY winner_id  HAVING count(*) > 1)
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2013 OR matches.year = 2016 GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT matches.year) = 2;
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE year IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE YEAR(tourney_date) IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT YEAR(tourney_date)) = 2;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT count(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) AS quantity FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT  COUNT(*) FROM matches WHERE year IN (2013, 2016) 
SELECT count(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.country_code, players.first_name HAVING count(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id, players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.country_code, players.first_name HAVING count(*) = 2
SELECT players.country_code, players.first_name FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.first_name, players.country_code FROM matches JOIN players ON matches.winner_id = players.player_id WHERE (matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open') GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND    matches.year IN (SELECT year FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id) 
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND    matches.tourney_name = 'Australian Open';
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (   SELECT MAX(birth_date)   FROM players )
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT `first_name`, `last_name` FROM `players` ORDER BY `birth_date`;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.full_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name AS full_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY players.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(winner_id) AS total_wins FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id ORDER BY total_wins DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(rankings.ranking_points) FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1;
SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name ORDER BY total_rank_points DESC LIMIT 1; 
SELECT players.first_name, players.last_name, MAX(rankings.ranking_points) AS rank_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name, players.last_name
SELECT players.first_name, players.last_name, MAX(count(*)) as total_wins, rankings.ranking_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_wins DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(rankings.tours) as number_of_matches_won, rankings.ranking_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name, rankings.ranking_points;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY SUM(rankings.ranking_points) DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(wins) as most_wins, rankings.ranking_points FROM   (SELECT winner_id, COUNT(*) as wins    FROM matches    GROUP BY winner_id) as wins_count JOIN players ON wins_count.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id;
SELECT players.first_name, players.last_name FROM   players   JOIN matches ON players.player_id = matches.winner_id   JOIN rankings ON players.player_id = rankings.player_id WHERE   matches.tourney_name = 'Australian Open' ORDER BY   rankings.ranking_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches); 
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.minutes = (   SELECT MAX(minutes)   FROM matches   )
SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.minutes = (   SELECT MAX(minutes)   FROM matches )
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches) 
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code; 
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code;
SELECT  players.country_code as nation, count(*) as player_count FROM players GROUP BY players.country_code 
SELECT country_code, count(*) AS player_count FROM players GROUP BY country_code;
SELECT players.country_code, count(*) as country_player_count FROM players GROUP BY players.country_code; 
SELECT I can see that the information needed to answer the question is scattered across different tables, and we need to count the number of players from each nation. Here's an SQL query that combines the necessary tables and uses a GROUP BY clause to count the number of players from each nation:
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) as quantity FROM players GROUP BY players.country_code;
SELECT (SELECT p.country_code FROM players p GROUP BY p.country_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT  ioc, count(*) AS quantity FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY ioc ORDER BY quantity DESC LIMIT 1; 
SELECT  SELECT p.country_code FROM players p GROUP BY p.country_code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT max(winner_ioc) FROM ( 	SELECT winner_ioc, COUNT(*) as player_count 	FROM players 	GROUP BY winner_ioc ) as country_count;
SELECT player_id, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT   SELECT p.country_code, COUNT(*) as quantity   FROM players p   GROUP BY p.country_code   ORDER BY quantity DESC   LIMIT 1;
SELECT  MAX(player_count) AS max_players_count, country_code AS nation_code FROM (   SELECT COUNT(*) AS player_count, country_code   FROM players   GROUP BY country_code ) subquery;
SELECT country_code, count(*) AS quantity FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT countries.country_code, count(*) AS quantity FROM players GROUP BY countries.country_code ORDER BY count(*) DESC LIMIT 1;
SELECT code as nation, count(*) as quantity FROM players GROUP BY code ORDER BY quantity DESC LIMIT 1;
SELECT player_id, country_code FROM players GROUP BY country_code HAVING count(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code, count(*) as quantity FROM players GROUP BY country_code HAVING count(*) > 50;
SELECT  player_country_code, COUNT(*) AS player_count FROM players GROUP BY player_country_code HAVING COUNT(*) > 50; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50; 
SELECT COUNT(*) AS quantity, players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code HAVING count(*) > 50; 
SELECT players.country_code, count(*) AS quantity FROM players GROUP BY players.country_code HAVING count(*) > 50; 
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT DISTINCT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(*) > 50;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name,     players.last_name,     rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age in (SELECT DISTINCT winner_age FROM matches ORDER BY winner_age LIMIT 3) 
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT `winner_name, winner_rank` FROM `matches` JOIN `players` ON matches.winner_id = players.player_id ORDER BY `winner_age` LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT Count(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT id, name FROM battle WHERE id IN (   SELECT lost_in_battle   FROM ship   WHERE id IN (     SELECT caused_by_ship_id     FROM death     GROUP BY caused_by_ship_id     HAVING COUNT(*) > 10   ) )
SELECT battle.id, battle.name FROM battle INNER JOIN death ON death.caused_by_ship_id = battle.id GROUP BY battle.id, battle.name HAVING COUNT(*) > 10;
SELECT id, name FROM battle WHERE id IN (   SELECT lost_in_battle   FROM ship   WHERE id IN (     SELECT caused_by_ship_id     FROM death     GROUP BY caused_by_ship_id     HAVING COUNT(*) > 10   ) )
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id WHERE d.killed > 10;
SELECT battle.id, battle.name FROM battle INNER JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING COUNT(*) > 10;
SELECT ship.id, ship.name, SUM(death.injured) AS total_injuries FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY total_injuries DESC LIMIT 1;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY sum(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT name, date FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE name IN ('Lettice', 'HMS Atalanta'));
SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE (ship.name = 'Lettice' OR ship.name = 'HMS Atalanta')
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE (s.name = 'Lettice' OR s.name = 'HMS Atalanta')
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT FROM battle WHERE location <> 'English Channel' AND id NOT IN (  SELECT lost_in_battle  FROM ship ) SELECT name, result, bulgarian_commander 
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location != 'English Channel' OR ship.location IS NULL;
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location <> 'English Channel' or ship.location is null;
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.location <> 'English Channel' OR ship.location IS NULL;
SELECT Courses.course_description FROM Courses WHERE course_name = 'Math'
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name = 'Mathematics';
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name = 'Math'
SELECT Sections.section_description, Courses.course_name FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id WHERE Courses.course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT section_description FROM Sections JOIN Courses ON Sections.course_id = Courses.course_id WHERE course_name = 'Math'
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT section_description FROM Sections INNER JOIN Courses ON Sections.course_id = Courses.course_id WHERE course_description = 'math';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT last_name FROM Students WHERE current_address_id IN   (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN   (SELECT student_id FROM Student_Enrolment) 
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (   SELECT student_id   FROM Student_Enrolment   ) 
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_enrolment_id IS NULL 
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id LEFT JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_id IS NULL;
SELECT Okay, the SQL query for the given natural language question will be:
SELECT Sorry, I cannot fulfill this request.
SELECT    last_name FROM Students WHERE current_address_id IN   (SELECT address_id   FROM Addresses   WHERE state_province_county = 'North Carolina') AND student_id NOT IN   (SELECT student_id   FROM Student_Enrolment) ORDER BY last_name;
SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON student_enrolment.student_id = students.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.degree_program_id IS NULL;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT I believe the correct SQL query to retrieve the phone number of Timmothy Ward would be:
SELECT    cell_mobile_number FROM   Students WHERE   first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (   SELECT MIN(date_first_registered)   FROM Students )
SELECT ( SELECT first_name, middle_name, last_name  FROM Students ORDER BY date_first_registered LIMIT 1 )
SELECT I apologize for misunderstanding your database schema earlier. Kindly provide me with the structure of the database schema to address your request.
SELECT To determine the earliest graduate of the school, we can use the following SQL query:
SELECT  first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1 
SELECT First, we need to identify the earliest graduate from the database. We can do this by checking the `date_left` column in the `Students` table and filtering for the minimum date. Then, we can retrieve the first name, middle name, and last name of the student with that minimum leaving date. Here's the SQL query to achieve this:
SELECT  first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1; 
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (   SELECT MIN(date_left)   FROM Students   WHERE date_left IS NOT NULL ) 
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NULL ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT MAX(address_count) as max_students,   address_id,   line_1,   line_2,   line_3,   city,   zip_postcode,   state_province_county,   country,   other_address_details FROM   (SELECT     COUNT(*) AS address_count,       a.address_id,       a.line_1,       a.line_2,       a.line_3,       a.city,       a.zip_postcode,       a.state_province_county,       a.country,       a.other_address_details   FROM     Students s   JOIN     Addresses a ON s.current_address_id = a.address_id   GROUP BY     a.address_id,       a.line_1,       a.line_2,       a.line_3,       a.city,       a.zip_postcode,       a.state_province_county,       a.country,       a.other_address_details) AS counts;
SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 ORDER BY COUNT(Students.student_id) DESC LIMIT 1; 
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details FROM Addresses INNER JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Sure, here's the SQL query for the given question:  SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON s.current_address_id = a.address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1; 
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.address_id = (   SELECT Students.current_address_id   FROM Students   GROUP BY Students.current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT MAX(students_count) AS max_students_count,    address_id,    line_1,    line_2 FROM (   SELECT a.address_id,      a.line_1,      a.line_2,      COUNT(se.student_enrolment_id) AS students_count   FROM Addresses a   JOIN Students s ON s.current_address_id = a.address_id   JOIN Student_Enrolment se ON se.student_id = s.student_id   GROUP BY a.address_id, a.line_1, a.line_2 ) subquery;
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 ORDER BY COUNT(Students.student_id) DESC LIMIT 1; 
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY Semesters.semester_name HAVING COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Master' THEN Student_Enrolment.student_id END) > 0 AND COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Bachelor' THEN Student_Enrolment.student_id END) > 0;
SELECT Semesters.semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY Semesters.semester_name HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Master' OR Degree_Programs.degree_summary_name = 'Bachelor' GROUP BY Semesters.semester_name HAVING COUNT(*) = 2;
SELECT Semesters.semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor')
SELECT semester_name FROM Semesters WHERE semester_id IN (   SELECT se.semester_id   FROM Student_Enrolment se   JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id   WHERE dp.degree_summary_name IN ('Master', 'Bachelor')   GROUP BY se.semester_id   HAVING COUNT(DISTINCT dp.degree_summary_name) = 2 )
SELECT  SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN   (SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_description LIKE '%Master%') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN   (SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_description LIKE '%Bachelor%'); 
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN  (SELECT degree_program_id  FROM Degree_Programs  WHERE degree_summary_name IN ('Masters', 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN  (SELECT degree_program_id   FROM Degree_Programs  WHERE degree_summary_name IN ('Masters', 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (   SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_name IN ('Masters', 'Bachelors')   GROUP BY degree_program_id   HAVING COUNT(DISTINCT degree_summary_name) = 2 ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN  (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Masters%')  AND semester_id IN  (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN   (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelors%')) GROUP BY semester_id HAVING COUNT(*) >= 2 
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT First_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuh';
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC;
SELECT TV_Channel.Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC;
SELECT TV_Channel.Country, count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY count(*) DESC;
SELECT Country, COUNT(*) AS num_of_channels FROM TV_Channel GROUP BY Country ORDER BY num_of_channels DESC;
SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC;
SELECT TV_Channel.Country, COUNT(*) AS Num_Of_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Country, COUNT(*) as Channel_count FROM TV_Channel GROUP BY Country ORDER BY Channel_count DESC LIMIT 1;
SELECT TV_Channel.Country, count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY count(*) DESC LIMIT 1;
SELECT (SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1);
SELECT TV_Channel.Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.Series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Title = "The Rise of the Blue Beetle"
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.Air_date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = 'A Love of a Lifetime';
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE TV_series.Title = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Title = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Title = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE TV_series.Title = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Title = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Title = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Title = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Title = "A Love of a Lifetime";
SELECT series_name FROM TV_series WHERE Title = 'A Love of a Lifetime';
SELECT series_name FROM TV_series WHERE Title = 'A Love of a Lifetime';
SELECT Title FROM Cartoon WHERE Title = "A Love of a Lifetime";
SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series WHERE TV_series.Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT cartoon.Directed_by, COUNT(*) AS quantity FROM cartoon GROUP BY cartoon.Directed_by;
SELECT Directed_by, COUNT(*) AS Cartoon_Count FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS Director_cartoon_count FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(*) AS Quantity FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) as quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(*) as Quantity FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) as quantity FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel WHERE TV_series.Air_Date = (SELECT MAX(Air_Date) FROM TV_series)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date DESC LIMIT 1;
SELECT `Production_code`, `Channel` FROM `Cartoon` WHERE `Original_air_date` = (SELECT MAX(`Original_air_date`) FROM `Cartoon`)
SELECT Production_code, Cartoon.Channel FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date DESC LIMIT 1;
SELECT TV_series.Production_code, TV_Channel.series_name FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY TV_series.Air_Date DESC LIMIT 1;
SELECT Production_code, Cartoon.Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'HD';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_series.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 'Yes'
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT TV_Channel.Country FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT DISTINCT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Written_by = 'Todd Casey');
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' );
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Channel FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey');
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' )
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey');
SELECT TC.Country FROM TV_Channel TC WHERE EXISTS(   SELECT 1   FROM Cartoon C   WHERE C.Written_by <> 'Todd Casey'   AND C.Channel = TC.id)
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' )
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT TV_Channel.id   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' )
SELECT TC.Country FROM TV_Channel TC WHERE TC.id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' )
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id IN   (SELECT Channel    FROM Cartoon    WHERE Directed_by IN ('Ben Jones', 'Michael Chang'))
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English'
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING count(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones'   )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT Channel    FROM Cartoon    WHERE Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (  SELECT TV_Channel.id  FROM Cartoon  WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones');
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.id IS NULL
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.id FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT TV_Channel.id   FROM Cartoon   JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones');
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_series.Channel FROM TV_series WHERE TV_series.id IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones'));
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IS NULL OR Cartoon.Directed_by <> 'Ben Jones'
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT TV_series.Channel   FROM TV_series   INNER JOIN Cartoon ON TV_series.Channel = Cartoon.Channel   WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT TV_Channel.id    FROM TV_Channel    INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id    WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT DISTINCT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT c.Channel   FROM Cartoon c   WHERE c.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT poker_player.Name, poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Name, poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT p.Poker_Player_ID, p.Best_Finish, p.Money_Rank, p.Earnings FROM poker_player p ORDER BY p.Earnings DESC;
SELECT poker_player.Name, poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Poker_Player_ID, poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT money_rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT AVG(Earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE Height > 200;
SELECT  SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200; 
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200; 
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT (SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200);
SELECT AVG(p.earnings) AS average_earnings FROM poker_player p JOIN people pe ON p.people_id = pe.people_id WHERE pe.height > 200; 
SELECT Nationality, COUNT(*) as Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(People_ID) AS quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';
SELECT count(*) FROM VOTES WHERE state='NY' OR state='CA';
SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT count(*) as quantity FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT count(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT V.created, A.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number JOIN AREA_CODE_STATE A ON V.state = A.state WHERE C.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, AREA_CODE_STATE.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT area_code FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling' AND ac.area_code IN   (SELECT ac2.area_code   FROM VOTES v2   JOIN AREA_CODE_STATE ac2 ON v2.state = ac2.state   JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number   WHERE c2.contestant_name = 'Kelly Clauss')
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2;
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_number) = 2
SELECT  area_code FROM  AREA_CODE_STATE a WHERE  EXISTS (SELECT *      FROM VOTES v      JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number      WHERE v.state = a.state      AND c.contestant_name = 'Tabatha Gehling')  AND EXISTS (SELECT *        FROM VOTES v        JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number        WHERE v.state = a.state        AND c.contestant_name = 'Kelly Clauss');
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' OR CONTESTANTS.contestant_name = 'Kelly Clauss' GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT VOTES.contestant_number) = 2;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Country.Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE country.IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE country.IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT count(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region='Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT SurfaceArea FROM country WHERE Continent = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'North America' OR Continent = 'South America';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean' 
SELECT SUM(SurfaceArea) AS total_surface_area FROM country WHERE Continent = 'Carribean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent='Caribbean';
SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent = 'Caribbean';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT country.Continent FROM country WHERE country.Code = 'AIA';
SELECT Continent FROM   country WHERE   Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM   city JOIN   country ON   city.CountryCode = country.Code WHERE   city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT Region FROM city WHERE Name = 'Kabul';
SELECT country.Region FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' ORDER BY countrylanguage.Percentage DESC LIMIT 1;
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
SELECT Language, MAX(Percentage) AS Most_Popular_Percentage FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language;
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' 
SELECT language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';
SELECT CountryLanguage.Language FROM CountryLanguage JOIN Country ON CountryLanguage.CountryCode = Country.Code WHERE Country.Name = 'Aruba' AND CountryLanguage.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' AND countrylanguage.IsOfficial = 'T'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT  country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'; 
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT    country.Name FROM   country WHERE   country.Continent = 'Asia' ORDER BY   country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT `country.Name` FROM `country` WHERE `LifeExpectancy` = (   SELECT MIN(`LifeExpectancy`)   FROM `country`   WHERE `Continent` = 'Asia' )
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy LIMIT 1;
SELECT SUM(c.Population) AS TotalPopulation, MAX(co.GNP) AS MaxGNP FROM city c INNER JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Asia';
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS max_gnp FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS max_gnp FROM country WHERE continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS maximum_GNP FROM country WHERE country.Continent = 'Asia';
SELECT COUNT(country.Population) AS Population,     MAX(country.GNP) AS Largest_GNP FROM country WHERE continent = 'Asia';
SELECT SUM(population) AS total_population, MAX(GNP) AS largest_GNP FROM country WHERE continent = 'Asia';
SELECT SUM(country.Population) AS population_in_asia, MAX(country.GNP) AS largest_gnp_in_asia FROM country WHERE country.Continent = 'Asia';
SELECT COUNT(*) AS population_in_asia, MAX(GNP) AS largest_gnp_in_asia FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) AS people_in_asia, MAX(GNP) AS largest_gnp FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(c.LifeExpectancy) FROM country c WHERE c.Continent = 'Africa' AND c.GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT LifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT LifeExpectancy AS AvgLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT lifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT COUNT(*) AS Population FROM city WHERE District = 'Gelderland';
SELECT COUNT(*) as Population FROM city WHERE District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland'
SELECT Population FROM city WHERE Name = 'Gelderland';
SELECT COUNT(*) as total_population FROM city WHERE District = 'Gelderland';
SELECT SUM(city.Population) AS total_population FROM city JOIN country ON city.CountryCode = country.Code WHERE country.District = 'Gelderland';
SELECT SUM(city.population) FROM city WHERE city.district = 'Gelderland'
SELECT SUM(country.Population) FROM country JOIN city ON city.CountryCode = country.Code WHERE city.District = 'Gelderland'
SELECT SUM(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT SUM(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT AVG(GNP) as avg_gnp, SUM(population) as total_population FROM country WHERE continent = 'North America' AND code = 'USA'
SELECT AVG(GNP) AS average_GNP, SUM(Population) AS total_population FROM country WHERE Continent = 'North America' AND Code = 'USA';
SELECT AVG(GNP) AS avg_gnp,     SUM(Population) AS total_population FROM country WHERE Continent = 'North America' AND Name LIKE '%United States%';
SELECT AVG(GNP) AS average_gnp, SUM(Population) AS total_population FROM country WHERE Continent = 'North America' AND GovernmentForm LIKE '%Republic%'
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Continent = 'North America' AND country.GNP IS NOT NULL AND country.CountryCode = 'USA';
SELECT  SUM(country.Population) AS total_population, AVG(country.GNP) AS mean_GNP FROM country WHERE country.Continent = 'North America' AND country.Region = 'Caribbean'
SELECT mean(GNP) as mean_gnp, sum(Population) as total_population FROM country WHERE Continent = 'North America' AND GovernmentForm = 'Nonmetropolitan Territory of the US'
SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND GovernmentForm LIKE '%Territory%'
SELECT mean(c.GNP), sum(c.Population) FROM country c WHERE c.Continent = 'North America' and c.GovernmentForm LIKE '%US%' 
SELECT  AVG(country.GNP) as mean_gnp, SUM(country.Population) as total_population FROM country WHERE country.Continent = 'North America' AND country.GovernmentForm = 'Non-metropolitan Territory of the US'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT GovernmentForm, COUNT(*) FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm;
SELECT Count(distinct GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) AS total_languages FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(DISTINCT Language) AS total_languages FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(DISTINCT Language) as Quantity FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT Count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(Language)  FROM countrylanguage  WHERE CountryCode = 'AFG'  AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) as quantity FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' and IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(*) as LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1;
SELECT Country.Name FROM country WHERE Code = (   SELECT CountryCode   FROM (     SELECT CountryCode, COUNT(*) AS LanguageCount     FROM countrylanguage     GROUP BY CountryCode     ORDER BY LanguageCount DESC     LIMIT 1   ) ) 
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(*) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) AS maxLanguages ON country.Code = maxLanguages.CountryCode;
SELECT country.Name FROM country WHERE country.Code = (   SELECT CountryCode   FROM countrylanguage   GROUP BY CountryCode   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(Language) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) AS max_language ON country.Code = max_language.CountryCode;
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1;
SELECT (SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name ORDER BY COUNT(*) DESC LIMIT 1)
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(Language) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) AS MaxLanguage ON country.Code = MaxLanguage.CountryCode;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) as LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT continent, count(*) as language_count FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY language_count DESC LIMIT 1;
SELECT continent, COUNT(DISTINCT language) AS language_count FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY language_count DESC LIMIT 1;
SELECT country.Continent, count(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT   country.Continent,   COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM   country JOIN   countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY   country.Continent ORDER BY   LanguageCount DESC LIMIT 1;
SELECT continent, count(*) as language_count FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY language_count DESC;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC;
SELECT continent, count(distinct Language) as num_languages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY num_languages DESC;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC;
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English','French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT country.Name FROM country WHERE country.Code IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language IN ('English', 'French')   GROUP BY cl.CountryCode   HAVING COUNT(*) = 2 )
SELECT C1.Name FROM country C1 JOIN countrylanguage CL1 ON C1.Code = CL1.CountryCode AND CL1.Language = 'English' AND CL1.IsOfficial = 'T' JOIN countrylanguage CL2 ON C1.Code = CL2.CountryCode AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
SELECT country.Name FROM country WHERE country.Code IN (   SELECT cl1.CountryCode   FROM countrylanguage cl1   WHERE cl1.Language = 'English'   AND cl1.IsOfficial = 'T' ) AND country.Code IN (   SELECT cl2.CountryCode   FROM countrylanguage cl2   WHERE cl2.Language = 'French'   AND cl2.IsOfficial = 'T' );
SELECT  country.Name FROM country WHERE country.Code IN   (SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T') AND country.Code IN   (SELECT CountryCode   FROM countrylanguage   WHERE Language = 'French' AND IsOfficial = 'T');
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT country.Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T');
SELECT country.Name FROM country WHERE (country.Code IN   (SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' AND cl.IsOfficial = 'T') AND country.Code IN   (SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'French' AND cl.IsOfficial = 'T'))
SELECT country.Name FROM country WHERE country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English', 'French')   GROUP BY CountryCode   HAVING COUNT(DISTINCT Language) = 2    AND MAX(IsOfficial) = 'T' )
SELECT country.Name FROM country WHERE country.Code IN   (SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T'   INTERSECT   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'French' AND IsOfficial = 'T')
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English','French') AND countrylanguage.IsOfficial = 'T' GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT c1.Name FROM   country c1 WHERE   EXISTS (SELECT *       FROM countrylanguage       WHERE CountryCode = c1.Code       AND Language = 'English'       AND IsOfficial = 'T')   AND EXISTS (SELECT *         FROM countrylanguage         WHERE CountryCode = c1.Code         AND Language = 'French'         AND IsOfficial = 'T')
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'French') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')  OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T') OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T') OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) AS distinct_continents FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT co.Continent) FROM countrylanguage cl JOIN country co ON cl.CountryCode = co.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c1.Continent) AS Quantity FROM countrylanguage cl JOIN country c1 ON cl.CountryCode = c1.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(*) AS NumberOfContinents FROM countrylanguage WHERE Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) AS count_continents FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch');
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch';
SELECT country.Region, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English';
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English';
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language;
SELECT Language, COUNT(*) as Quantity FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')))
SELECT Language, COUNT(*) AS Quantity FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) ORDER BY Percentage DESC LIMIT 1;
SELECT Language, COUNT(*) AS Quantity FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT c.CountryCode) AS Quantity FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY Quantity DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;
SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(DISTINCT CountryCode) = 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;
SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1
SELECT cl.Language FROM countrylanguage cl WHERE cl.IsOfficial = 'T' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT   Language FROM   countrylanguage WHERE   IsOfficial = 'T' GROUP BY   Language HAVING   COUNT(DISTINCT CountryCode) = 1   AND GovernmentForm = 'Republic';
SELECT Language FROM countrylanguage cl JOIN country c ON c.Code = cl.CountryCode WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(*) = 1 
SELECT DISTINCT cl.Language FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(*) = 1 
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1 
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1 AND GovernmentForm = 'Republic';
SELECT city.Name FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode and countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name FROM city WHERE city.ID = (   SELECT city.ID   FROM city   JOIN country ON city.CountryCode = country.Code   JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode   WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'   ORDER BY city.Population DESC   LIMIT 1 )
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) as Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name, countrylanguage.Language;
SELECT city.Name FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT City.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY city.Population DESC LIMIT 1; 
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT LifeExpectancy FROM country WHERE CountryCode NOT IN   (SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT LifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT MEAN(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT ROUND(AVG(LifeExpectancy), 2) as MeanLifeExpectancy FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT MEAN(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT ROUND(AVG(LifeExpectancy), 2) AS mean_life_expectancy FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' ) 
SELECT COUNT(*) as total_population FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN   (SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English'    AND IsOfficial = 'T');
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT SUM(Country.Population) FROM country WHERE Country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T');
SELECT COUNT(*) as TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) AS 'People living in non-English speaking countries' FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT COUNT(country.Population) FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T');
SELECT COUNT(*) AS "Population" FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) AS population FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS TotalUniqueOfficialLanguages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)
SELECT COUNT(DISTINCT language) AS total_languages FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930);
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT Code, COUNT(DISTINCT Language) AS TotalDistinctOfficialLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE IndepYear < 1930 AND IsOfficial = 'T' GROUP BY Code;
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalDistinctLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS total_distinct_languages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS distinct_languages FROM countrylanguage cl INNER JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 and countrylanguage.IsOfficial = 'T';
SELECT country.Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' )
SELECT Code FROM country WHERE SurfaceArea > ALL (SELECT SurfaceArea FROM country WHERE Continent = 'Europe')
SELECT country.* FROM country WHERE SurfaceArea > (  SELECT MAX(SurfaceArea)  FROM country  WHERE Continent = 'Europe' );
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' )
SELECT country.Name FROM country WHERE country.SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' )
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'); 
SELECT Country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'); 
SELECT country.Name AS Country FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.name FROM country WHERE continent = 'Africa' AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (   SELECT MAX(Population)   FROM country   WHERE Continent = 'Africa'   )
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(Population) FROM country c2 WHERE c2.Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (  SELECT MAX(Population)  FROM country  WHERE continent = 'Africa' )
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (   SELECT MAX(Population)   FROM country   WHERE Continent = 'Africa' )
SELECT Country.Name FROM Country WHERE Country.Continent = 'Asia' AND Country.Population > ALL (SELECT Country.Population FROM Country WHERE Continent = 'Africa')
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT DISTINCT CountryCode   FROM countrylanguage   WHERE Language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' )
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT country.Code FROM country WHERE country.Code NOT IN  (SELECT cl.CountryCode  FROM countrylanguage cl  WHERE cl.Language = 'English');
SELECT  country.Code FROM country WHERE country.Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English') 
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language <> 'English';
SELECT country.Code FROM country WHERE country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language <> 'English' )
SELECT country.Code FROM countrylanguage WHERE Language <> 'English';
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT DISTINCT country.Code FROM country WHERE country.Code NOT IN   (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' )
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code=countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic'
SELECT country.Code FROM country WHERE country.Code NOT IN   (SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English') AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM country WHERE country.Code NOT IN (  SELECT CountryCode  FROM countrylanguage  WHERE Language = 'English'  AND IsOfficial = 'T' ) AND GovernmentForm != 'Republic';
SELECT country.Code FROM country WHERE GovernmentForm <> 'Republic' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT country.Code FROM country WHERE GovernmentForm <> 'Republic' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage  WHERE Language = 'English'  AND IsOfficial = 'T');
SELECT country.Code FROM country WHERE GovernmentForm <> 'Republic' AND country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm <> 'Republic' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'T';
SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' WHERE country.Continent = 'Europe' AND (countrylanguage.Language IS NULL OR countrylanguage.Language != 'English')
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' WHERE country.Continent = 'Europe' AND (countrylanguage.Language IS NULL OR countrylanguage.IsOfficial = 'F') 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name, city.CountryCode FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name, city.CountryCode;
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese' AND country.Continent = 'Asia' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') AND ID IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T')
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Code = (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY COUNT(*) LIMIT 1)
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Code = (   SELECT countrylanguage.CountryCode   FROM countrylanguage   GROUP BY countrylanguage.CountryCode   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name, country.IndepYear, country.SurfaceArea ORDER BY COUNT(DISTINCT countrylanguage.Language) ASC LIMIT 1;
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Code = (   SELECT cl.CountryCode   FROM countrylanguage cl   GROUP BY cl.CountryCode   ORDER BY COUNT(*) ASC   LIMIT 1 ); 
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Code = (   SELECT CountryCode   FROM countrylanguage   GROUP BY CountryCode   ORDER BY COUNT(*)   LIMIT 1 )
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1;
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1;
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT  country.Name,  country.IndepYear,  country.SurfaceArea FROM  country WHERE  country.Population = (   SELECT    MIN(Population)   FROM    country  );
SELECT  country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country) 
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1; 
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country); 
SELECT city.District, COUNT(*) as Num_Cities FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT city.District, COUNT(*) AS NumberOfCities FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT city.District, COUNT(*) AS Quantity FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT city.District, count(*) as quantity FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) AS NUM_CITIES FROM city WHERE POPULATION > (SELECT AVG(POPULATION) FROM city) GROUP BY DISTRICT;
SELECT city.District, COUNT(*) FROM city WHERE city.Population > (SELECT AVG(city.Population) FROM city) GROUP BY city.District;
SELECT city.District, COUNT(*) FROM city WHERE city.Population > (SELECT AVG(city.Population) FROM city) GROUP BY city.District;
SELECT city.District, COUNT(*) FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT DISTRICT, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT   Name, SurfaceArea FROM  country ORDER BY  SurfaceArea DESC LIMIT 5;
SELECT     country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT Sure, here's the SQL query for your question:
SELECT  SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Country.Name, COUNT(*) FROM country JOIN city ON country.Code = city.CountryCode GROUP BY country.Name ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Name, Population FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Country.Name FROM Country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT country.Name FROM country ORDER BY population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3; 
SELECT  Name FROM  country ORDER BY  Population LIMIT 3;
SELECT  Name FROM country ORDER BY Population LIMIT 3; 
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) AS country_count FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT country.Name FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Europe' AND city.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT country.Name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(c.Population) AS total_population, AVG(c.Population) AS average_population FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'North America' AND co.SurfaceArea > 3000; 
SELECT SUM(c.Population) AS total_population, AVG(c.Population) AS average_population FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE continent = 'North America' AND SurfaceArea > 3000;
SELECT population, AVG(population) FROM country WHERE continent = 'North America' and SurfaceArea > 3000;
SELECT  SELECT SUM(country.Population) AS total_population, AVG(country.Population) AS average_population FROM country WHERE continent = 'North America' AND SurfaceArea > 3000 
SELECT * FROM city WHERE Population > 160000 AND Population < 900000;
SELECT city.Name FROM city WHERE city.Population > 160000 AND city.Population < 900000;
SELECT City.Name FROM City WHERE City.Population > 160000 AND City.Population < 900000;
SELECT city.Name FROM city WHERE city.Population > 160000 AND city.Population < 900000;
SELECT  ID, Name FROM city WHERE Population > 160000 AND Population < 900000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population between 160000 and 900000;
SELECT countrycode, language FROM countrylanguage WHERE percentage = (SELECT MAX(percentage) FROM countrylanguage GROUP BY countrycode)
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE countrylanguage.CountryCode = country.Code )) ORDER BY country.Name;
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code)
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code);
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS CL WHERE CL.CountryCode = country.Code);
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = country.Code )
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) ORDER BY country.Code;
SELECT country.Code, countrylanguage.Language FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) ORDER BY country.Code;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) ORDER BY country.Code;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code)) GROUP BY country.Code;
SELECT COUNT(*) AS TotalCountries FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*) AS TotalCountries FROM countrylanguage WHERE Language = 'Spanish' GROUP BY Language HAVING Percentage = MAX(Percentage)
SELECT COUNT(DISTINCT cl.CountryCode) AS total_countries FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'Spanish' GROUP BY CountryCode HAVING Percentage = MAX(Percentage);
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' and IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language='Spanish' AND IsOfficial='T';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50 AND IsOfficial = 'T';
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor_ID, Name, Age FROM conductor ORDER BY Age;
SELECT Conductor.Name FROM conductor ORDER BY Conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY Age;
SELECT Conductor.Name FROM conductor ORDER BY Conductor.Age;
SELECT Conductor_ID, Name FROM conductor ORDER BY Age;
SELECT Conductor_ID, Name FROM conductor ORDER BY Age;
SELECT Conductor_ID, Name FROM conductor ORDER BY Age;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY Age;
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA';
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality != 'USA';
SELECT Conductor.Name FROM conductor WHERE Conductor.Nationality <> "USA";
SELECT Conductor.Name FROM conductor WHERE Conductor.Nationality <> "USA";
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality <> "USA";
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT RECORD_COMPANY FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT  Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT `Record_Company` FROM `orchestra` ORDER BY `Year_of_Founded` ASC;
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded; 
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded ASC; 
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded ASC; 
SELECT  Record_Company FROM orchestra ORDER BY Year_of_Founded ASC; 
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(orchestra.Orchestra_ID) AS quantity FROM orchestra WHERE orchestra.Major_Record_Format IN ('CD', 'DVD') 
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(orchestra.Orchestra_ID) FROM orchestra WHERE orchestra.Major_Record_Format IN ('CD', 'DVD');
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10; 
SELECT name FROM Highschooler WHERE grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name='Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10) 
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, count(*) as number_of_high_schoolers FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as num_of_high_schoolers FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT Highschooler.grade, COUNT(*) AS quantity FROM Highschooler GROUP BY Highschooler.grade;
SELECT grade, count(*) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) AS quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT  COUNT(*), grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade as year, count(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (   SELECT ID   FROM Highschooler   WHERE name = 'Kyle' )
SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.friend_id              FROM Friend              WHERE Friend.student_id = (SELECT ID                           FROM Highschooler                           WHERE name = 'Kyle'));
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID           FROM Highschooler           WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID           FROM Highschooler           WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT 	count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = "Kyle");
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id;
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT AVG(H.grade) AS avg_grade FROM Friend F JOIN Highschooler H ON F.student_id = H.ID;
SELECT AVG(H.grade) AS average_grade FROM Highschooler H JOIN Friend F ON H.ID = F.student_id 
SELECT AVG(h.grade) FROM Highschooler h WHERE h.ID IN (SELECT f.student_id FROM Friend f)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT Avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id        FROM Friend)
SELECT AVG(H.grade) FROM Highschooler H WHERE H.ID IN (SELECT F.student_id FROM Friend F)
SELECT min(grade) as minimum_grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.grade FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN   (SELECT student_id FROM Friend    UNION    SELECT friend_id FROM Friend)   
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Professional.professional_id, Professional.last_name, Professional.cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' OR Professionals.professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR Professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2); 
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments           GROUP BY professional_id           HAVING COUNT(*) > 2)
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN   (SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2)
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals WHERE Professionals.state = 'Indiana' OR Professionals.professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING count(*) > 2 )
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN   (SELECT professional_id    FROM Treatments    GROUP BY professional_id    HAVING COUNT(*) > 2)
SELECT  professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments            GROUP BY professional_id            HAVING COUNT(*) > 2);
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals WHERE Professionals.state = 'Indiana' OR    (SELECT COUNT(*) FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id) > 2;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE (SELECT SUM(cost_of_treatment) FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id) > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, first_name, last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 ); 
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM (     SELECT owner_id, COUNT(dog_id) as num_dogs     FROM Dogs     GROUP BY owner_id     ORDER BY num_dogs DESC     LIMIT 1   ) AS most_dogs )
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professional_id, role_code, first_name HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id, role_code, first_name HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals GROUP BY Professional_id, role_code, first_name HAVING count(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
SELECT Professional_id, role_code, first_name FROM Professionals WHERE Professional_id IN (   SELECT Professional_id   FROM Treatments   GROUP BY Professional_id   HAVING COUNT(*) >= 2 );
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 ); 
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 ) 
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code                FROM Treatments                GROUP BY treatment_type_code                ORDER BY SUM(cost_of_treatment)                LIMIT 1)
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code               FROM Treatments               GROUP BY treatment_type_code               ORDER BY SUM(cost_of_treatment)               LIMIT 1);
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE Treatment_Types.treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) LIMIT 1 )
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types WHERE cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments)
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code JOIN Charges ON Charges.charge_id = Treatments.cost_of_treatment ORDER BY Charges.charge_amount LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1 )
SELECT It appears that you want to find the owner who has paid the largest amount of money in total for their dogs, and display their owner ID and zip code. To achieve this, you can use the following SQL query:
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT d.owner_id, o.zip_code FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN (   SELECT owner_id, SUM(charge_amount) AS total_charge   FROM Dogs d   JOIN Charges c ON d.size_code = c.charge_id   GROUP BY owner_id   ORDER BY total_charge DESC   LIMIT 1 ) t ON d.owner_id = t.owner_id 
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT   owner_id, zip_code FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   WHERE owner_id IS NOT NULL   GROUP BY owner_id   ORDER BY SUM(     (SELECT cost_of_treatment FROM Treatments WHERE dog_id = Dogs.dog_id)   ) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.zip_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT MAX(total_cost) AS total_cost, owner_id, zip_code FROM ( SELECT SUM(cost_of_treatment) AS total_cost, owner_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY owner_id ) subquery JOIN Owners ON subquery.owner_id = Owners.owner_id GROUP BY owner_id, zip_code;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professional.first_name, Professional.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT Professional.first_name, Professional.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (   SELECT AVG(cost_of_treatment)   FROM Treatments )
SELECT Professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING AVG(cost_of_treatment) > (SELECT AVG(charge_amount) FROM Charges) ) 
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING AVG(cost_of_treatment) > (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT Professional_ID, First_Name, Last_Name FROM Professionals WHERE Professional_ID IN (SELECT Professional_ID             FROM Treatments             WHERE Cost_of_Treatment < (SELECT AVG(Cost_of_Treatment) FROM Treatments))
SELECT Professional.first_name, Professional.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT   professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING AVG(cost_of_treatment) > (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) ); 
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT o.first_name, d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE o.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia'
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT first_name, name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia';
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age LIMIT 1;
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE age = (     SELECT MIN(age)     FROM Dogs   ) )
SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE date_of_birth = (     SELECT MIN(date_of_birth)     FROM Dogs   ) )
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (   SELECT MIN(age) FROM Dogs );
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT  email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin'); 
SELECT professional.email_address FROM professionals WHERE professionals.state IN ('Hawaii', 'Wisconsin');
SELECT professional_id, email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT professional_id, email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('Hawaii', 'Wisconsin');
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('Hawaii', 'Wisconsin');
SELECT The SQL query to retrieve the emails of the professionals living in either Hawaii or Wisconsin would be:
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE date_of_birth > (SELECT AVG(date_of_birth) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE date_of_birth > (SELECT AVG(date_of_birth) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE date_of_birth > (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(dog_id) FROM Dogs WHERE date_of_birth > (SELECT AVG(date_of_birth) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT MAX(cost_of_treatment) as most_recent_treatment_cost FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT MAX(cost_of_treatment) AS most_recent_treatment_cost FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT MAX(cost_of_treatment) AS most_recent_treatment_cost FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT MAX(cost_of_treatment) as recent_treatment_cost FROM Treatments
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT MAX(date_of_treatment) as recently_performed, cost_of_treatment FROM Treatments
SELECT charge_amount FROM Treatments JOIN Charges ON Treatments.cost_of_treatment = Charges.charge_id ORDER BY date_of_treatment DESC LIMIT 1;
SELECT  t.cost_of_treatment FROM Treatments t WHERE t.date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments) 
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'Y';
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'Y';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'Y';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'Y';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'Y';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'Y';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'Y';
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 'Y'
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 'Y';
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 'Y';
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC;
SELECT Singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French' 
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT singer.Name FROM singer WHERE singer.Net_Worth_Millions = (   SELECT MAX(singer.Net_Worth_Millions)   FROM singer )
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as quantity FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Quantity FROM Singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT  Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) as Quantity FROM singer GROUP BY Citizenship;
SELECT Countrt,COUNT(*) as SingerCount FROM singer GROUP BY Country;
SELECT singer.Citizenship, COUNT(singer.Singer_ID) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT Citizenship, count(*) as quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT singer.Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY singer.Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT  SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT DISTINCT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT Country, MAX(Net_Worth_Millions) AS Maximum_Net_Worth FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Maximum_Net_Worth FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN   (SELECT Singer_ID    FROM song    WHERE Sales > 300000);
SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000; 
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT  Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000) 
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   WHERE Sales > 300000 ); 
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955;
SELECT  Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT citizenship FROM singer WHERE birth_year < 1945 OR birth_year > 1955;
SELECT property_name FROM Properties WHERE room_count > 1 AND (property_type_code = 'apt' OR property_type_code = 'hse');
SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code IN ('apt','hse') AND Properties.room_count > 1;
SELECT property_name FROM Properties WHERE property_type_code IN ('apt', 'hse') AND room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'apt' OR Properties.property_type_code = 'hse') AND Properties.room_count > 1;
SELECT property_name FROM Properties WHERE property_type_code IN ('APT', 'HSE') AND room_count > 1;
