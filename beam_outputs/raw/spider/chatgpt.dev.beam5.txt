SELECT COUNT(Singer_ID) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT count(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(Singer_ID) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(Singer_ID) FROM singer
SELECT COUNT(*) FROM singer;
SELECT count(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT  singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC; 
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM Singer ORDER BY Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France'; 
SELECT  AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France'; 
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' 
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
SELECT  AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'; 
SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age) FROM singer s WHERE s.Country = 'France'; 
SELECT  AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' 
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'; 
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'; 
SELECT  AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Country = 'France'; 
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer ORDER BY singer.Age LIMIT 1;
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer_in_concert.Singer_ID, singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT Country FROM singer WHERE Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, count(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT Country, COUNT(*) FROM singer GROUP BY Country;
SELECT song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT song_name FROM singer WHERE age > (SELECT AVG(Age) FROM singer)
SELECT song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer);
SELECT  s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT  song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) 
SELECT song_name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)  This query selects the song names from the singer table where the age of the singer is greater than the average age of all singers.
SELECT singer.Song_Name FROM singer WHERE singer.Age > (   SELECT AVG(Age)   FROM singer )
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT  s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer); 
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT Stadium_ID, Location, Name FROM stadium WHERE Capacity >= 5000 AND Capacity <= 10000
SELECT stadium.Location, stadium.Name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT max(stadium.Capacity), avg(stadium.Capacity) FROM stadium;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT  AVG(Capacity),  MAX(Capacity) FROM  stadium;
SELECT  AVG(Capacity),  MAX(Capacity) FROM  stadium;
SELECT ROUND(AVG(Capacity), 2), MAX(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium; 
SELECT AVG(Capacity), MAX(Capacity) FROM stadium; 
SELECT  stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (SELECT stadium_ID               FROM (SELECT stadium_ID, AVG(average) FROM stadium GROUP BY stadium_ID ORDER BY avg_attendance DESC LIMIT 1))
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT stadium_ID   FROM (     SELECT Stadium_ID, Average     FROM stadium     ORDER BY Average DESC     LIMIT 1   ) )
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (SELECT stadium.Stadium_ID               FROM stadium               ORDER BY stadium.Average DESC               LIMIT 1)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT stadium_ID   FROM (     SELECT Stadium_ID, AVG(Average) FROM stadium     GROUP BY Stadium_ID     ORDER BY avg_attendance DESC     LIMIT 1   ) )
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT Stadium_ID   FROM (     SELECT Stadium_ID     FROM concert     GROUP BY Stadium_ID     ORDER BY AVG(Highest + Lowest + Average) DESC     LIMIT 1   ) )
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT stadium_ID   FROM (     SELECT Stadium_ID, AVG(Highest+Lowest+Average) FROM stadium     GROUP BY Stadium_ID     ORDER BY avg_attendance DESC     LIMIT 1   ) );
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID = (   SELECT stadium_ID   FROM (     SELECT stadium_ID, AVG(Attendance) FROM concert     GROUP BY stadium_ID     ORDER BY avg_attendance DESC     LIMIT 1   ) )
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT count(*) FROM concert WHERE Year IN (2014, 2015);
SELECT count(*) FROM concert WHERE Year=2014 OR Year=2015;
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT stadium.Name, COUNT(concert.Stadium_ID) FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(concert.concert_ID) FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT stadium.Name, count(*) FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(*) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(concert.concert_ID) FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(*) FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT stadium.Stadium_ID, COUNT(*) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT stadium.Name, COUNT(*) FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID IN   (SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year >= 2014   GROUP BY concert.Stadium_ID   HAVING COUNT(*) =      (SELECT MAX(concert_count)      FROM       (SELECT COUNT(*)        FROM concert        WHERE concert.Year >= 2014        GROUP BY concert.Stadium_ID))) 
SELECT stadium.Name, stadium.Capacity, COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY quantity DESC LIMIT 1;
SELECT  stadium.Name, stadium.Capacity FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.year > 2013 GROUP BY stadium.Stadium_ID ORDER BY count(*) DESC LIMIT 1; 
SELECT stadium.Name, stadium.Capacity FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Stadium.Name, Stadium.Capacity FROM Stadium JOIN Concert ON Stadium.Stadium_ID = Concert.Stadium_ID WHERE Concert.Year > 2013 GROUP BY Stadium.Stadium_ID ORDER BY count(*) DESC LIMIT 1;
SELECT Year, count(*) FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Year, count(*) FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT   Year,   COUNT(*) FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY Quantity DESC LIMIT 1;
SELECT ` Year, COUNT(*) FROM concert GROUP BY Year ORDER BY Num_Concerts DESC LIMIT 1; `
SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Year, Count(*) FROM concert GROUP BY Year ORDER BY ConcertsCount DESC LIMIT 1;
SELECT Year, COUNT(*) FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year, count(*) FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT The query to show the stadium names without any concert can be achieved using the following SQL statement:
SELECT stadium.name FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT Stadium.Name FROM stadium LEFT JOIN concert on stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT singer.Country FROM singer WHERE singer.Age > 40 OR singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 INTERSECT SELECT singer.Country FROM singer WHERE singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 UNION SELECT singer.Country FROM singer WHERE singer.Age < 30;
SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30; 
SELECT singer.Country FROM singer WHERE singer.Age > 40 AND singer.Singer_ID IN (  SELECT Singer_ID  FROM singer  WHERE Age < 30 )
SELECT  stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year != 2014 OR concert.Year IS NULL; 
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 );
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID not in (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014);
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 )
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014)
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year != 2014 OR concert.Year IS NULL 
SELECT Stadium.Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) 
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN   (SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014)
SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme;
SELECT concert_Name, Theme, COUNT(*) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert_Name, Theme, COUNT(Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert_Name, Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY concert.concert_ID;
SELECT concert_name, theme, COUNT(singer_id) FROM concert LEFT JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id, concert_name, theme;
SELECT concert.concert_Name, concert.Theme, count(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, count(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert_Name, Theme, COUNT(singer_in_concert.Singer_ID) FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Singer_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID LEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, count(*) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014; 
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year=2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT   singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%')
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT Singer.Name, Singer.Country FROM Singer WHERE Singer.Singer_ID IN(SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%hey%')
SELECT singer.Name, singer.Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 OR concert.Year = 2015 GROUP BY stadium.Stadium_ID HAVING count(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND stadium.Stadium_ID IN (  SELECT stadium.Stadium_ID  FROM concert  WHERE concert.Year = 2015 )
SELECT stadium.Name, stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 OR concert.Year = 2015 GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT DISTINCT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND stadium.Stadium_ID IN  (SELECT concert.Stadium_ID  FROM concert  WHERE concert.Year = 2015)
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND EXISTS (SELECT 1 FROM concert as c2 WHERE c2.Stadium_ID = concert.Stadium_ID AND c2.Year = 2015)
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium))
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium) )
SELECT count(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1);
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT count(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 )
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1);
SELECT count(*) FROM concert WHERE stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1)
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT count(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT count(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT count(*) FROM Pets WHERE weight > 10;
SELECT count(*) FROM Pets WHERE weight > 10;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age LIMIT 1;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'dog' ORDER BY Pets.pet_age ASC LIMIT 1;
SELECT count(*) FROM Pets WHERE PetType='dog' AND pet_age=(SELECT MIN(pet_age) FROM Pets WHERE PetType='dog');
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT count(*) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MIN(p.pet_age), p.weight FROM Pets p WHERE p.PetType = 'dog'  
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT Max(weight), PetType FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(weight) FROM Pets GROUP BY PetType;
SELECT PetType, max(weight) FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) FROM Pets GROUP BY Pets.PetType;
SELECT Pets.pet_type, MAX(Pets.weight) FROM Pets GROUP BY Pets.pet_type;
SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT count(Has_Pet.PetID) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20
SELECT count(*) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'Dog' AND S.Sex = 'F'
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT count(*) FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'female' AND Pets.PetType = 'dog';
SELECT COUNT(*) FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID JOIN Student AS S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'female';
SELECT COUNT(DISTINCT PetType) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT count(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT pet_type) FROM pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT count(distinct PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Student.Fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT FirstName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));
SELECT   Fname FROM  Student WHERE  StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE petType IN ('cat', 'dog')));
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';
SELECT Student.Fname FROM Student WHERE Student.StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID=Pets.PetID   WHERE PetType='cat'   INTERSECT   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID=Pets.PetID   WHERE PetType='dog' )
SELECT  Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'cat' ) AND StuID IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'dog' ); 
SELECT First, we need to join the Has_Pet, Pets, and Student tables and filter the results based on the PetType. Then we can use the COUNT function to check if a student has both cat and dog pets. Here's the query:
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(*) = 2;
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.FName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Has_Pet.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2
SELECT Student.Fname FROM Student WHERE Student.StuID IN   (SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'cat') AND Student.StuID IN   (SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN   (SELECT Has_Pet.StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat')
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.petType <> 'cat' OR Pets.petType IS NULL;
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN  (SELECT StuID FROM Has_Pet  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat')
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetID IS NULL;
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat');
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType != 'cat';
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID IN (SELECT PetID FROM Pets WHERE PetType <> 'cat')
SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID IN (SELECT PetID FROM Pets WHERE PetType <> 'cat');
SELECT Has_Pet.StuID FROM Has_Pet LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat' OR Pets.PetType IS NULL;
SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID NOT IN (   SELECT PetID   FROM Pets   WHERE PetType = 'Cat' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat';
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat')
SELECT  Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN   (SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat')  
SELECT Student.Fname, Student.Age FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Has_Pet.StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN   (SELECT StuID FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE Pets.PetType = 'cat')
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' )
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet hp2         JOIN Pets p2 ON hp2.PetID = p2.PetID         WHERE hp2.StuID = Has_Pet.StuID         AND p2.PetType = 'cat');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND NOT EXISTS   (SELECT 1   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Has_Pet.StuID = Student.StuID   AND Pets.PetType = 'cat');
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID=Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student INNER JOIN Has_Pet ON Student.StuID=Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT pet_type, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets ORDER BY Pets.pet_age LIMIT 1;
SELECT Pets.PetType, MIN(Pets.pet_age), Pets.weight FROM Pets GROUP BY Pets.PetType ORDER BY youngest_age ASC LIMIT 1;
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID,weight FROM Pets WHERE pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetType, AVG(Student.Age), MAX(Student.Age) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Student.Age), MAX(Student.Age) FROM Pets INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Pets.PetType;
SELECT pet_type, AVG(pet_age), MAX(pet_age) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY pet_type;
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(Age), MAX(Age) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType;
SELECT PetType, AVG(Age), MAX(Age) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType;
SELECT PetType, AVG(Age), MAX(Age) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, AVG(Student.Age), MAX(Student.Age) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY PetType;
SELECT pet_type,   AVG(age),   MAX(age) FROM   pets GROUP BY   pet_type;
SELECT Pets.PetType, AVG(Pets.weight) FROM Pets GROUP BY Pets.PetType;
SELECT PetType, AVG(weight) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT pets.pet_type, avg(pets.weight) FROM has_pet JOIN pets ON has_pet.petid = pets.petid GROUP BY pets.pet_type;
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Student.StuID, count(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID;
SELECT Student.StuID, COUNT(Has_Pet.PetID) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID;
SELECT  COUNT(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT COUNT(*) FROM Has_Pet GROUP BY StuID;
SELECT count(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT count(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT COUNT(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT count(*), StuID FROM Has_Pet GROUP BY StuID;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING count(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN   (SELECT StuID    FROM Has_Pet    GROUP BY StuID    HAVING COUNT(*) > 1);
SELECT Student.FName, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1; 
SELECT Student.Fname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING COUNT(*) > 1;
SELECT Student.FName, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(student.age) FROM student LEFT JOIN has_pet on student.stuid = has_pet.stuid WHERE has_pet.petid IS NULL
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT DISTINCT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(*) FROM continents;
SELECT count(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT count(*) FROM continents;
SELECT Count(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT count(*) FROM continents
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent ORDER BY continents.ContId;
SELECT CONTINENTS.CONTID, CONTINENTS.CONTINENT, COUNT(COUNTRIES.COUNTRYID) FROM CONTINENTS LEFT JOIN COUNTRIES ON CONTINENTS.CONTID = COUNTRIES.CONTINENT GROUP BY CONTINENTS.CONTID, CONTINENTS.CONTINENT;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents INNER JOIN countries ON countries.Continent = continents.ContId GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT count(*) FROM countries;
SELECT Count(*) FROM countries;
SELECT Count(*) FROM countries;
SELECT count(*) from countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(DISTINCT CountryId) FROM countries;
SELECT count(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT count(*) FROM countries;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, count(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, count(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, count(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Maker, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model, min(Horsepower) FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model GROUP BY model ORDER BY min_horsepower LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT cars_data.Id, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight)              FROM cars_data)
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT model_list.Model FROM cars_data LEFT JOIN car_names ON cars_data.Id = car_names.MakeId LEFT JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE Model IN (       SELECT Model       FROM cars_data       WHERE Year = 1970     )   ) );
SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE ModelId IN (SELECT Id FROM cars_data WHERE Year = 1970)))
SELECT Maker FROM car_makers WHERE Id IN (   SELECT ModelId   FROM model_list   INNER JOIN car_names ON model_list.Model = car_names.Model   INNER JOIN cars_data ON car_names.MakeId = cars_data.Id   WHERE Year = 1970 )
SELECT Maker FROM car_makers WHERE Id IN (SELECT DISTINCT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Year=1970));
SELECT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE MakeId IN (       SELECT Id       FROM cars_data       WHERE Year = 1970     )   ) )
SELECT car_makers.Maker FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT Maker FROM car_makers WHERE Id IN   (SELECT Maker   FROM model_list   WHERE ModelId IN     (SELECT MakeId     FROM car_names     WHERE Model IN       (SELECT Model       FROM cars_data       WHERE Year = 1970))) GROUP BY Maker;
SELECT Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.ModelId INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year IN (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT Maker, MIN(Year) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT Maker, Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Year LIMIT 1;
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT Maker, Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT car_names.Model, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Maker = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.ModelId = car_names.MakeId INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model FROM car_names JOIN model_list ON car_names.Model = mode_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980
SELECT countries.Continent, count(distinct car_makers.Id) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent;
SELECT  continents.Continent, count(car_makers.Id) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT  continents.Continent, COUNT(DISTINCT car_makers.Id) FROM continents LEFT JOIN countries ON countries.Continent = continents.ContId LEFT JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent; 
SELECT Continents.Continent, COUNT(car_makers.Id) FROM Continents LEFT JOIN Countries ON Continents.ContId = Countries.Continent LEFT JOIN Car_makers ON Countries.CountryId = Car_makers.Country GROUP BY Continents.Continent;
SELECT continents.Continent, COUNT(car_makers.Id) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, count(car_makers.Id) FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT continents.Continent, count(car_makers.Id) FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT countries.Continent, continents.Continent, COUNT(*) FROM countries INNER JOIN continents ON countries.Continent = continents.ContId INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(DISTINCT car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;
SELECT countries.CountryName FROM countries, car_makers WHERE countries.CountryId = car_makers.Country GROUP BY car_makers.Country ORDER BY count(*) DESC LIMIT 1;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CountryName FROM countries WHERE CountryId = (  SELECT Country  FROM car_makers  GROUP BY Country  ORDER BY COUNT(*) DESC  LIMIT 1 );
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(Country) DESC LIMIT 1;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId ORDER BY count(car_makers.Id) DESC LIMIT 1;
SELECT CountryName FROM countries WHERE CountryId = (SELECT CountryId FROM car_makers GROUP BY CountryId ORDER BY COUNT(*) DESC LIMIT 1)
SELECT CountryName, count(Id) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName ORDER BY CarMakerCount DESC LIMIT 1;
SELECT COUNT(car_names.Model), car_makers.FullName FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT COUNT(*), Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Maker;
SELECT maker.Id , Maker.FullName , COUNT(Model.Id) FROM car_makers AS Maker JOIN model_list AS Model ON Maker.Id = Model.Maker GROUP BY Maker.Id, Maker.FullName;
SELECT car_makers.FullName, count(model_list.Model) FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.Maker, car_makers.Id, car_makers.FullName, count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Maker, car_makers.Id, car_makers.FullName;
SELECT  car_makers.Id, car_makers.FullName, count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id 
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers, model_list WHERE car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model AND car_names.Make = model_list.Maker WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Model = 'hornet sportabout (sw)' AND car_makers.Maker = 'amc';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'amc hornet sportabout (sw)'; 
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)'; 
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND car_names.Model LIKE '%hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'amc hornet sportabout (sw)';
SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT count(*) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'France';
SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT count(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryName = 'USA';
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa';
SELECT count(*) FROM car_names cn JOIN model_list ml ON cn.ModelId = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';
SELECT count(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT count(model_list.ModelId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'United States';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT count(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE countries.CountryName = 'United States';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model WHERE countries.CountryName = 'United States';
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT ROUND(AVG(MPG), 2) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG)  FROM cars_data  WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT ROUND(AVG(MPG), 2) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year=1974 AND Cylinders=8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data  WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT Distinct car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Make
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Maker = car_names.Model;
SELECT `car_makers.Maker`, `car_names.Model` FROM `car_makers` INNER JOIN `model_list` ON `car_makers.Id` = `model_list.Maker` INNER JOIN `car_names` ON `model_list.Model` = `car_names.Model`;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId
SELECT CountryName, CountryId FROM countries WHERE CountryId IN (  SELECT Country  FROM car_makers )
SELECT countries.CountryName, car_makers.Id FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryName, countries.CountryId FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT count(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year; 
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
SELECT YEAR(Year), AVG(Weight) FROM cars_data GROUP BY YEAR(Year); 
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
SELECT year, AVG(weight) FROM cars_data GROUP BY year;
SELECT ROUND(AVG(Weight),2), Year FROM cars_data GROUP BY Year;
SELECT YEAR, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;
SELECT cars_data.Year, AVG(cars_data.Weight), AVG(cars_data.Year) FROM cars_data GROUP BY cars_data.Year;
SELECT Avg(Weight), Year FROM cars_data GROUP BY Year;
SELECT Round(AVG(Weight), 2), Year FROM cars_data GROUP BY Year;
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe' GROUP BY countries.CountryName HAVING count(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(*) >= 3;
SELECT  countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId INNER JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "Europe" GROUP BY countries.CountryId HAVING count(*) >= 3;
SELECT CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY CountryName HAVING COUNT(*) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent IN (SELECT Continent FROM continents WHERE Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(*) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = "Europe") GROUP BY countries.CountryId HAVING COUNT(*) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING count(*) >= 3;
SELECT MAX(Horsepower), Maker FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 3;
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker, Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE Cylinders = 3;
SELECT MAX(Horsepower), Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders=3;
SELECT MAX(Horsepower), Maker FROM cars_data WHERE Cylinders = 3;
SELECT cars_data.Id, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT MAX(MPG) FROM cars_data;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT cars_data.MPG, car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Maker, car_names.Model, MAX(cars_data.MPG) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Maker, car_names.Model;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(cars_data.Horsepower),2) FROM cars_data WHERE cars_data.Year < 1980;
SELECT ROUND(AVG(Horsepower),2) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(cars_data.Horsepower), 2) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(Horsepower), 2) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Year < 1980;
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON model_list.Model = car_names.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo');
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'volvo';
SELECT ROUND(AVG(cars_data.Edispl),2) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT COUNT(*), Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT ROUND(MAX(Accelerate), 2), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;
SELECT model_list.Model, count(car_names.MakeId) FROM model_list JOIN car_names ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY Quantity DESC LIMIT 1;
SELECT model_list.Model, count(*) FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY num_versions DESC LIMIT 1;
SELECT MAX(version_count) FROM  (  SELECT car_names.Model , count(*) FROM car_names  GROUP BY car_names.Model  )
SELECT Model, COUNT(Make) FROM car_names GROUP BY Model ORDER BY Quantity DESC LIMIT 1;
SELECT car_names.Model, count(*) FROM car_names GROUP BY car_names.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(DISTINCT car_names.MakeId) FROM model_list JOIN car_names ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY Versions DESC LIMIT 1;
SELECT model_list.Model, COUNT(DISTINCT car_names.MakeId) FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY num_versions DESC LIMIT 1;
SELECT model_list.Model, COUNT(DISTINCT car_names.MakeId) FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY versions_count DESC LIMIT 1;
SELECT model_list.Model, count(DISTINCT car_names.Model) FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(*) FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) from cars_data where Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT Count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';
SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT count(*) FROM car_makers m JOIN model_list ml ON m.Id = ml.Maker WHERE m.FullName = 'American Motor Company';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company';
SELECT count(distinct model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')
SELECT count(DISTINCT model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM   car_names   JOIN model_list ON car_names.Model = model_list.Model   JOIN car_makers ON model_list.Maker = car_makers.Id WHERE   car_makers.Maker = 'American Motor Company'
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING count(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.Model) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT Maker, Id FROM car_makers WHERE Id IN   (SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3)
SELECT Maker, Id FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3)
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3);
SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker       FROM model_list       GROUP BY Maker       HAVING count(*) > 3)
SELECT Maker, Id FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 )
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE ((car_makers.FullName = 'General Motors') OR (cars_data.Weight > 3500));
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model 
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model, cars_data.Weight FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON car_names.Model = model_list.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT cars_data.Year, count(*) FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000 GROUP BY cars_data.Year;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000;
SELECT cars_data.Year, FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 OR cars_data.Weight > 3000 GROUP BY cars_data.Year;
SELECT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000 GROUP BY Year
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 UNION SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 OR cars_data.Weight > 3000 GROUP BY cars_data.Year
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (   SELECT MAX(Accelerate)   FROM cars_data );
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT max(Horsepower) FROM cars_data WHERE Accelerate = (SELECT max(Accelerate) FROM cars_data)
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT cars_data.Horsepower FROM cars_data WHERE Accelerate = (   SELECT MAX(Accelerate) FROM cars_data )
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT cars_data.Horsepower FROM cars_data WHERE Accelerate = (   SELECT MAX(Accelerate)   FROM cars_data )
SELECT count(Cylinders) FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON model_list.Model = car_names.Model WHERE model_list.Maker = 'volvo' AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId)
SELECT COUNT(*) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo'       AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo'));
SELECT COUNT(*) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo' ORDER BY Accelerate ASC LIMIT 1)
SELECT cylinders, count(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo' AND accelerate = (SELECT MIN(accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo') GROUP BY cylinders;
SELECT COUNT(*) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names   WHERE ModelId IN (SELECT ModelId FROM model_list     WHERE Maker IN (SELECT Id FROM car_makers       WHERE FullName in ('Volvo')))) AND Accelerate IN (SELECT MIN(Accelerate) FROM cars_data         WHERE Id IN (SELECT MakeId FROM car_names           WHERE ModelId IN (SELECT ModelId FROM model_list             WHERE Maker IN (SELECT Id FROM car_makers               WHERE FullName in ('Volvo')))));
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo')) 
SELECT COUNT(cars_data.Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') ORDER BY cars_data.Accelerate LIMIT 1;
SELECT COUNT(cars_data.Cylinders) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo'));
SELECT cars_data.Cylinders, COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId) GROUP BY cars_data.Cylinders;
SELECT cylinders, count(*) FROM cars_data WHERE Id IN (   SELECT MakeId   FROM car_names   WHERE Model = 'volvo' ) ORDER BY Accelerate LIMIT 1;
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower)           FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate >   (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Horsepower)   FROM cars_data )
SELECT COUNT(*) FROM countries WHERE CountryId IN (SELECT Country           FROM car_makers           GROUP BY Country           HAVING COUNT(Id) > 2)
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT countries.CountryId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT countries.CountryName) FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT count(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING count(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2; 
SELECT count(*) FROM cars_data WHERE cylinders > 6;
SELECT count(*) FROM cars_data WHERE cylinders > 6;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6; 
SELECT COUNT(cars_data.Id) FROM cars_data WHERE cars_data.Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM   cars_data WHERE   Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT  car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1; 
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT  car_names.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1; 
SELECT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT  car_names.MakeId, car_names.Make FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3 
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.Id = cars_data.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) 
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders < 4 AND cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data);
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.ModelId = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company'
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker != 'Ford Motor Company'
SELECT car_names.Model FROM car_names INNER JOIN model_list ON car_names.Model = model_list.ModelId INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND model_list.Maker <> 'Ford Motor Company'
SELECT  CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers) 
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT DISTINCT CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId WHERE car_makers.Id IS NULL;
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId WHERE car_makers.Id ISNULL;
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Maker) > 3
SELECT Id, Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT model_list.Maker) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING count(*) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) >= 2 ORDER BY COUNT(DISTINCT car_names.MakeId) DESC LIMIT 3;
SELECT Car makers that produce at least 2 models and more than 3 car makers can be listed by using the following SQLite SQL query:
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3 AND COUNT(DISTINCT car_names.Model) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model GROUP BY car_makers.Id HAVING COUNT(DISTINCT car_names.MakeId) > 3 AND COUNT(DISTINCT model_list.ModelId) > 1;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(car_names.Make) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(car_names.Make) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Make GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(*) > 3;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.Id IN (SELECT car_makers.Id FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 3) OR car_names.Model = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model WHERE car_makers.Id IN (SELECT Id FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR car_names.Model = 'fiat';
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model WHERE car_makers.Id IN (SELECT Id FROM car_makers             GROUP BY Country             HAVING COUNT(*) > 3) OR car_names.Model = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE (SELECT count(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 OR car_names.Make = 'fiat';
SELECT countries.CountryId,countries.CountryName FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE car_makers.Id IN (SELECT Id FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) UNION SELECT countries.CountryId,countries.CountryName FROM car_names INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE car_names.Model = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.Id IN (SELECT car_makers.Id FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 3) OR car_names.Make = 'fiat'
SELECT countries.CountryId, countries.CountryName FROM countries WHERE (SELECT count(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3 OR countries.CountryId IN (SELECT countries.CountryId FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model WHERE car_names.Make = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN (   SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(*) > 3 ) OR countries.CountryId IN (   SELECT countries.CountryId   FROM countries   JOIN continents ON countries.Continent = continents.ContId   JOIN car_makers ON car_makers.Country = countries.CountryId   JOIN model_list ON model_list.Maker = car_makers.Id   JOIN car_names ON car_names.Model = model_list.Model   WHERE car_names.Make = 'Fiat' )
SELECT countries.CountryId, countries.CountryName FROM countries WHERE countries.CountryId IN   (SELECT car_makers.Country   FROM car_makers   GROUP BY car_makers.Country   HAVING COUNT(*) > 3)   OR countries.CountryId IN   (SELECT countries.CountryId   FROM countries   JOIN continents ON countries.Continent = continents.ContId   JOIN car_makers ON car_makers.Country = countries.CountryId   JOIN model_list ON model_list.Maker = car_makers.Id   JOIN car_names ON car_names.Model = model_list.Model   WHERE car_names.Make = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker LEFT JOIN car_names ON model_list.Model = car_names.Model WHERE car_makers.Id > 3 OR car_names.Model = 'fiat';
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT count(*) FROM airlines;
SELECT count(*)  FROM airlines;
SELECT COUNT(uid) FROM airlines;
SELECT count(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights; 
SELECT count(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT count(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation='UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT count(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT count(*) FROM airlines WHERE Country = 'USA';
SELECT count(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT AirportName, City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = "Alton";
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = "Aberdeen";
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT airports.AirportName FROM airports WHERE City = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City='Aberdeen');
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = 'ABZ';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT  COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest_airports ON flights.DestAirport = dest_airports.AirportCode WHERE airports.City = 'Aberdeen' AND dest_airports.City = 'Ashley';
SELECT count(*) FROM flights f JOIN airports dep on f.SourceAirport = dep.AirportCode JOIN airports dest on f.DestAirport = dest.AirportCode WHERE dep.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS destin ON flights.DestAirport = destin.AirportCode WHERE airports.City = 'Aberdeen' AND destin.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' AND flights.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City='Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City='Ashley');
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'Aberdeen' and flights.DestAirport = 'Ashley'
SELECT count(*) FROM flights WHERE SourceAirport = "Aberdeen" AND DestAirport = "Ashley";
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT count(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT count(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')
SELECT count(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways'
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE Airline = "United Airlines" AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights  WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' and DestAirport = 'Aberdeen';
SELECT airports.City, COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY num_arriving_flights DESC LIMIT 1;
SELECT airports.City, count(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY arrival_flights DESC LIMIT 1;
SELECT City, COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT City, count(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City FROM (  SELECT   flights.DestAirport,   COUNT(*) FROM   flights  GROUP BY   flights.DestAirport  ORDER BY   COUNT(*) DESC  LIMIT 1 ) JOIN airports ON most_frequent.AirportCode = airports.AirportCode;
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1;
SELECT airports.City, COUNT(flights.DestAirport) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City, COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY num_departing_flights DESC LIMIT 1;
SELECT airports.City, COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City, COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY Number_of_departing_flights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT City, COUNT(SourceAirport) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY freq DESC LIMIT 1;
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City, COUNT(SourceAirport) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode GROUP BY City ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(*), airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(AirportCode) FROM flights GROUP BY DestAirport ORDER BY COUNT(FlightNo) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM   flights JOIN airports ON   flights.DestAirport = airports.AirportCode GROUP BY   flights.DestAirport ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY count(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY count(*) DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT MIN(AirportCode) FROM flights GROUP BY AirportCode ORDER BY count(*) ASC LIMIT 1;
SELECT *  FROM airports *  JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport *  GROUP BY airports.AirportCode *  ORDER BY COUNT(flights.FlightNo) ASC *  LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY count(*) ASC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.Airline, count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline, count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY quantity DESC LIMIT 1;
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline,  count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Airline, COUNT(FlightNo) FROM flights GROUP BY Airline ORDER BY COUNT(FlightNo) DESC LIMIT 1;
SELECT Airline, count(*) FROM flights GROUP BY Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline, count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY quantity DESC LIMIT 1;
SELECT airlines.Airline,    COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.UID GROUP BY flights.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT Airline, Abbreviation, Country FROM airlines WHERE uid = (  SELECT Airline  FROM flights  GROUP BY Airline  ORDER BY COUNT(*) ASC  LIMIT 1 )
SELECT Abbreviation, Country FROM 	airlines WHERE 	uid = ( 		SELECT 			Airline 		FROM 			flights 		GROUP BY 			Airline 		ORDER BY 			COUNT(*) ASC 		LIMIT 1 	)
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline       FROM flights       GROUP BY Airline       ORDER BY COUNT(*) ASC       LIMIT 1)
SELECT Abbreviation, Country FROM airlines WHERE uid = (  SELECT Airline  FROM flights  GROUP BY Airline  ORDER BY COUNT(*) ASC  LIMIT 1 )
SELECT MIN(airline_flights.flights_quantity), airlines.Abbreviation, airlines.Country FROM (   SELECT COUNT(*), flights.Airline   FROM flights   GROUP BY Airline ) JOIN airlines ON airlines.Abbreviation = airline_flights.Airline WHERE airline_flights.flights_quantity = (   SELECT MIN(flights_quantity)   FROM (     SELECT COUNT(*), Airline     FROM flights     GROUP BY Airline   ) );
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Airline ORDER BY COUNT(*) ASC LIMIT 1;
SELECT  Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 ) 
SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Abbreviation ORDER BY COUNT(*) ASC LIMIT 1;
SELECT MIN(COUNT(*)), Abbreviation, Country FROM flights JOIN airlines ON flights.Airline = airlines.Airline GROUP BY airlines.Airline ORDER BY quantity LIMIT 1;
SELECT airlines.Airline, airlines.Abbreviation, airlines.Country FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airlines.Airline FROM Airlines JOIN Flights ON Airlines.UID = Flights.Airline WHERE Flights.DestAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM flights WHERE DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'APG' OR flights.SourceAirport = 'CVO' GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.uid HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'APG' OR flights.SourceAirport = 'CVO' GROUP BY airlines.Airline HAVING count(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT airline FROM  flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON airlines.Abbreviation = flights.Airline WHERE  airports.AirportCode IN ('APG', 'CVO') GROUP BY  flights.Airline HAVING  COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY flights.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON flights.Airline = airlines.uid JOIN airports apg ON apg.AirportCode = flights.SourceAirport JOIN airports cvo ON cvo.AirportCode = flights.SourceAirport WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO'
SELECT airlines.Airline, COUNT(flights.FlightNo) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS apg_airport ON flights.SourceAirport = apg_airport.AirportCode AND apg_airport.AirportCode = 'APG' JOIN airports AS cvo_airport ON flights.SourceAirport = cvo_airport.AirportCode AND cvo_airport.AirportCode = 'CVO'
SELECT `Airline` FROM airlines WHERE uid IN (   SELECT Airline FROM flights   WHERE SourceAirport = 'CVO' ) AND uid NOT IN (   SELECT Airline FROM flights   WHERE SourceAirport = 'APG' )
SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (   SELECT airlines.uid   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   WHERE flights.SourceAirport = 'APG' );
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid             FROM airlines             JOIN flights ON airlines.uid = flights.Airline             WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG');
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN  (SELECT airlines.uid   FROM airlines   INNER JOIN flights ON airlines.uid = flights.Airline   WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN   (SELECT airlines.Airline    FROM airlines    JOIN flights ON airlines.uid = flights.Airline    JOIN airports ON flights.SourceAirport = airports.AirportCode    WHERE airports.City = 'APG')
SELECT airlines.Airline FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode INNER JOIN airlines ON flights.Airline = airlines.uid WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline               FROM flights               INNER JOIN airports ON flights.SourceAirport = airports.AirportCode               WHERE airports.City = 'APG') GROUP BY airlines.Airline;
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports AS CVO_airport ON flights.SourceAirport = CVO_airport.AirportCode LEFT JOIN flights AS APG_flights ON flights.Airline = APG_flights.Airline LEFT JOIN airports AS APG_airport ON APG_flights.SourceAirport = APG_airport.AirportCode AND APG_airport.City = 'APG' WHERE CVO_airport.City = 'CVO' AND APG_airport.AirportCode IS NULL;
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports dep ON f.SourceAirport = dep.AirportCode LEFT JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE dep.City = 'CVO' AND dest.AirportCode IS NULL;
SELECT Airlines.Airline, COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.uid HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(flights.FlightNo) FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
SELECT Airline, COUNT(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, count(*) FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING count(*) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10; 
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT a.Airline, COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(flights.FlightNo) FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline FROM airlines LEFT JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline FROM airlines LEFT JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline FROM airlines LEFT JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.uid HAVING COUNT(*) < 200;
SELECT airlines.Airline, count(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING flight_count < 200;
SELECT airlines.Airline, count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING count(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT  FlightNo FROM flights WHERE Airline = "United Airlines"; 
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT FlightNo FROM flights WHERE Airline = "United Airlines";
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = "APG";
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG'
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG'
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG";
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = "APG";
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = "APG";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT FlightNo FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN  (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene')
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));
SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City='Aberdeen' OR City='Abilene');
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport or airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT  AirportName FROM airports WHERE AirportCode NOT IN   (SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights) 
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights );
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportName, count(flights.FlightNo) FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportName HAVING quantity = 0;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportCode, airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT Count(*) FROM employee;
SELECT count(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Count(*) FROM employee;
SELECT count(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT employee.Name FROM employee ORDER BY employee.Age ASC;
SELECT Name, Age FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT employee.Name FROM employee ORDER BY employee.Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT As per the given information, the SQL query to list the names of employees sorted in ascending order of age is:
SELECT COUNT(*), City FROM employee GROUP BY City;
SELECT City, count(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, count(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT COUNT(*), City FROM employee GROUP BY City;
SELECT City, count(*) FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City, COUNT(*) FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT shop.Location, COUNT(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) FROM shop GROUP BY shop.Location;
SELECT COUNT(*), shop.Location FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(shop.Shop_ID) FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(shop.Shop_ID) FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, COUNT(*) FROM shop GROUP BY shop.Location;
SELECT shop.Location, count(*) FROM shop GROUP BY shop.Location;
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT max(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products) FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT min(shop.Number_products), max(shop.Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(shop.Number_products), MAX(shop.Number_products) FROM shop
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(shop.Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM employee WHERE Employee_ID IN   (SELECT Employee_ID   FROM evaluation   GROUP BY Employee_ID   ORDER BY COUNT(*) DESC   LIMIT 1);
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID            FROM evaluation            GROUP BY Employee_ID            ORDER BY count(*) DESC            LIMIT 1)
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT employee.Name FROM employee WHERE employee.Employee_ID = (   SELECT Employee_ID   FROM evaluation   GROUP BY Employee_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Employee_ID, Name FROM employee WHERE Employee_ID = (   SELECT Employee_ID   FROM evaluation   GROUP BY Employee_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ); 
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY employee.Employee_ID ORDER BY count(*) DESC LIMIT 1;
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT Employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation);
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Year_awarded IS NULL OR evaluation.Year_awarded = ''  
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation WHERE evaluation.Bonus > 0)
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Shop.Name FROM (   SELECT   Shop_ID,   COUNT(Employee_ID)   FROM hiring   GROUP BY Shop_ID   ORDER BY EmployeeCount DESC   LIMIT 1 ) JOIN shop ON LargestHiring.Shop_ID = shop.Shop_ID;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop JOIN hiring ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name ORDER BY num_employees DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID ORDER BY num_employees DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY employee_count DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN    (SELECT DISTINCT Shop_ID FROM hiring)
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, count(*) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM hiring INNER JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(*) FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT sum(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation; 
SELECT SUM(Bonus) FROM evaluation 
SELECT SUM(Bonus) FROM evaluation;
SELECT  SUM(Bonus) FROM evaluation; 
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT hiring.* FROM hiring;
SELECT * FROM hiring;
SELECT hiring.* FROM hiring;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT * FROM hiring; 
SELECT * FROM hiring;
SELECT all the information about hiring.* FROM hiring;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 OR shop.Number_products > 10000 GROUP BY shop.District HAVING COUNT(DISTINCT shop.Shop_ID) > 1;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND EXISTS  (  SELECT shop.Shop_ID  FROM shop  WHERE shop.Number_products > 10000  AND shop.District = shop.District  ) GROUP BY shop.District;
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN 1 END) > 0;
SELECT DISTINCT s1.District FROM shop s1, shop s2 WHERE s1.Number_products < 3000 AND s2.Number_products > 10000 AND s1.District = s2.District;
SELECT District FROM shop GROUP BY District HAVING count(CASE WHEN Number_products < 3000 THEN 1 END) > 0 AND count(CASE WHEN Number_products > 10000 THEN 1 END) > 0;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 OR shop.Number_products > 10000 GROUP BY shop.District HAVING count(*) = 2;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN   (SELECT District    FROM shop    WHERE Number_products > 10000);
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN (SELECT District FROM shop WHERE Number_products > 10000);
SELECT DISTRICT FROM shop WHERE Number_products < 3000 AND DISTRICT IN (  SELECT DISTRICT  FROM shop  WHERE Number_products > 10000 )
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT shop.Location) FROM shop;
SELECT COUNT(DISTINCT shop.Location) FROM shop;
SELECT Count(*) FROM shop;
SELECT Count(DISTINCT shop.Location) FROM shop;
SELECT COUNT(DISTINCT shop.Location) FROM shop;
SELECT count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT count(*) FROM Documents;
SELECT count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Count(*) FROM Documents;
SELECT Count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT  Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents 
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT count(DISTINCT Documents.Template_ID) FROM Documents;
SELECT Count(Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT count(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Template_ID) FROM Documents; 
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT count(distinct Templates.Template_ID) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT Count(Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents;
SELECT count(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT';
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT';
SELECT count(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT';
SELECT count(*) FROM Documents WHERE Template_ID IN   (SELECT Template_ID    FROM Templates    WHERE Template_Type_Code = 'PPT')
SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT count(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code =   (SELECT Template_Type_Code    FROM Ref_Template_Types    WHERE Template_Type_Description = 'PPT')
SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT count(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates INNER JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(Document_ID) FROM Documents GROUP BY Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, count(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) FROM Templates INNER JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(DISTINCT Documents.Document_ID) DESC LIMIT 1;
SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = ( 	SELECT Template_ID 	FROM Documents 	GROUP BY Template_ID 	ORDER BY COUNT(Document_ID) DESC 	LIMIT 1 )
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT `Templates.Template_ID`, `Templates.Template_Type_Code` FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(DISTINCT Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(DISTINCT Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Documents.Template_ID HAVING COUNT(*) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Document_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)
SELECT count(Template_ID) FROM Templates;
SELECT count(Template_ID) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT count(*) FROM Templates;
SELECT count(*) FROM Templates;
SELECT Count(*) FROM Templates
SELECT Count(*) from Templates;
SELECT Count(*) FROM Templates;
SELECT Count(*) from Templates;
SELECT `COUNT(*)` FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types;
SELECT Template_Type_Code FROM Templates
SELECT DISTINCT Templates.Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT Template_Type_Code FROM Ref_Template_Types
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT'
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code='PP' OR Templates.Template_Type_Code='PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT count(*) FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Ref_Template_Types WHERE Template_Type_Code = 'CV')
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT count(Templates.Template_ID) FROM Templates WHERE Templates.Template_Type_Code = "CV";
SELECT count(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code            FROM Ref_Template_Types            WHERE Template_Type_Description = 'CV');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'CV' )
SELECT count(*) FROM Templates WHERE Template_Type_Code =  (SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'CV');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5; 
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Type_Code, count(Template_ID) FROM Templates GROUP BY Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, count(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT DISTINCT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY num_templates DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, count(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM   Templates GROUP BY   Template_Type_Code ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING quantity < 3;
SELECT Ref_Template_Types.Template_Type_Code, count(*) FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING count(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING quantity < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING Quantity < 3;
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(*) < 3;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code HAVING COUNT(*) < 3;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = "Data base";
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = "Data base";
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = "Data base";
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = "Data base"
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base';
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Ref_Template_Types.Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base';
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents WHERE Template_ID IN (   SELECT Template_ID   FROM Templates   WHERE Template_Type_Code = 'BK' );
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code; 
SELECT Ref_Template_Types.Template_Type_Code, count(*) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code=Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID=Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code=Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID=Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code,    COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY Document_Count DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY Quantity DESC LIMIT 1;
SELECT Template_Type_Code, COUNT(DISTINCT D.Document_ID) FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code, COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID)
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN  (SELECT DISTINCT Templates.Template_Type_Code  FROM Templates  JOIN Documents ON Templates.Template_ID = Documents.Template_ID)  ;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN    (SELECT DISTINCT Templates.Template_Type_Code     FROM Templates     JOIN Documents ON Templates.Template_ID = Documents.Template_ID    ) 
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'Book';
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID;
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation";
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation";
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation";
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = "Presentation";
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation');
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code               FROM Ref_Template_Types               WHERE Template_Type_Description = 'Presentation');
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT  count(*) FROM Paragraphs;
SELECT Count(*) FROM Paragraphs;
SELECT Count(*) FROM Paragraphs;
SELECT count(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT count(Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show'); 
SELECT count(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Document_Name = 'Summer Show';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'Korea ';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT *Please provide the table name in which the "Paragraph_Text" column exists,
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.Paragraph_Text, Documents.Document_Name FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.Paragraph_Text, Documents.Document_Name, Templates.Version_Number FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea%'
SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE '%Korea %';
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' ); 
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY');
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews');
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, count(*) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, count(*) FROM Documents JOIN Paragraphs on Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, Count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, count(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING count(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING count(*) >= 2;
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY num_paragraphs DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY paragraph_quantity DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (SELECT Documents.Document_ID                 FROM Paragraphs                 GROUP BY Documents.Document_ID                 ORDER BY COUNT(*) DESC                 LIMIT 1)
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (   SELECT Document_ID   FROM (     SELECT Document_ID, COUNT(*) FROM Paragraphs     GROUP BY Document_ID     ORDER BY COUNT(*) DESC     LIMIT 1   ) )
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Quantity DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN (SELECT Document_ID, COUNT(*)  FROM Paragraphs  GROUP BY Document_ID  ORDER BY COUNT(*) DESC  LIMIT 1) ON Documents.Document_ID = MaxParagraphs.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN (   SELECT Document_ID, COUNT(*)  FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) ON Documents.Document_ID = max_paragraphs.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN (   SELECT Document_ID, COUNT(*) FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) ON Documents.Document_ID = max_paragraphs.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs LIMIT 1;
SELECT Documents.Document_ID, COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY num_paragraphs LIMIT 1;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY paragraph_count LIMIT 1;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY paragraph_count LIMIT 1;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY num_paragraphs LIMIT 1;
SELECT Documents.Document_ID FROM Documents JOIN (   SELECT Document_ID, COUNT(*) FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) ASC   LIMIT 1 ) min_paragraphs ON Documents.Document_ID = min_paragraphs.Document_ID;
SELECT Documents.Document_ID FROM Documents GROUP BY Documents.Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Documents.Document_ID FROM Documents JOIN (  SELECT Document_ID, COUNT(*) FROM Paragraphs  GROUP BY Document_ID  ORDER BY COUNT(*)  LIMIT 1 ) ON Documents.Document_ID = Fewest_Paragraphs.Document_ID;
SELECT Documents.Document_ID FROM Documents ORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) DESC LIMIT 1;
SELECT Documents.Document_ID FROM Documents JOIN (   SELECT Document_ID, COUNT(*)   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*)   LIMIT 1 ) ON Documents.Document_ID = min_paragraphs.Document_ID;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
SELECT documents.document_id, count(paragraphs.paragraph_id) FROM documents LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING paragraph_count BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2);
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING Quantity >= 1 AND Quantity <= 2;
SELECT Documents.Document_ID FROM Documents WHERE (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) BETWEEN 1 AND 2 );
SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE   Document_ID IN (     SELECT Document_ID     FROM Paragraphs     GROUP BY Document_ID     HAVING COUNT(*) BETWEEN 1 AND 2   );
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'Brazil' AND Documents.Document_ID IN ( SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'Ireland' )
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT count(*) FROM teacher;
SELECT COUNT(Teacher_ID) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT count(DISTINCT Teacher_ID) FROM teacher;
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT count(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != 'Little Lever Urban District'
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT   Name FROM   teacher WHERE   Age IN (32, 33); 
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33;
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT hometown FROM teacher ORDER BY age LIMIT 1;
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1; 
SELECT MIN(Age) FROM teacher;
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT MIN(Age), Hometown FROM teacher
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(teacher.Hometown) FROM teacher GROUP BY teacher.Hometown 
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown;
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT COUNT(*), teacher.Hometown FROM teacher GROUP BY teacher.Hometown;
SELECT COUNT(*), teacher.Hometown FROM teacher GROUP BY teacher.Hometown;
SELECT COUNT(*), hometown FROM teacher GROUP BY hometown
SELECT COUNT(teacher.Teacher_ID), teacher.Hometown FROM teacher GROUP BY teacher.Hometown;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*), teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(teacher.Hometown), teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown ORDER BY quantity DESC LIMIT 1; 
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*), t.Hometown FROM teacher t GROUP BY t.Hometown ORDER BY quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown ORDER BY quantity DESC LIMIT 1;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown HAVING COUNT(*) > 1;
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown HAVING COUNT(*) > 1;
SELECT  Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1; 
SELECT teacher.Hometown, COUNT(*) FROM teacher GROUP BY teacher.Hometown HAVING COUNT(*) > 1;
SELECT DISTINCT teacher1.Hometown FROM teacher teacher1 JOIN teacher teacher2 ON teacher1.Teacher_ID <> teacher2.Teacher_ID AND teacher1.Hometown = teacher2.Hometown
SELECT  Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2; 
SELECT town FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT Hometown, COUNT(DISTINCT Teacher_ID) FROM teacher GROUP BY Hometown HAVING quantity >= 2;
SELECT town FROM teacher GROUP BY Hometown HAVING count(*) >= 2;
SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, count(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID, teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID;
SELECT teacher.Name, COUNT(*) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID;
SELECT Teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name, count(*) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING count(*) >= 2;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2;
SELECT  teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING count(DISTINCT course_arrange.Course_ID) >= 2; 
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange) 
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN   (SELECT course_arrange.Teacher_ID   FROM course_arrange)
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)
SELECT count(*) FROM visitor WHERE Age < 30;
SELECT count(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT count(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.name FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(visitor.Age)) FROM visitor WHERE visitor.Level_of_membership <= 4;
SELECT ROUND(AVG(age), 2) FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) FROM visitor WHERE Level_of_membership <= 4; 
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age ASC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT museum.Museum_ID, museum.Name FROM museum WHERE museum.Num_of_Staff = (   SELECT MAX(Num_of_Staff)   FROM museum )
SELECT museum.Museum_ID, museum.Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT museum.Museum_ID, museum.Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT museum.Museum_ID, museum.Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT  ROUND(AVG(Num_of_Staff), 2) FROM museum WHERE Open_Year < 2009; 
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT ROUND(AVG(Num_of_Staff),2) FROM museum WHERE Open_Year < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Open_Year > 2010 AND Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT Museum.Name FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 )
SELECT museum.Name FROM museum WHERE Open_Year > 2010 AND Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT Name FROM museum WHERE Open_Year > 2010 AND Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);
SELECT Name FROM museum WHERE Open_Year > 2010 AND Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING count(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID,visitor.Name,visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID ORDER BY SUM(Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum INNER JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON visit.Museum_ID = museum.Museum_ID GROUP BY museum.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (   SELECT Museum_ID   FROM visit   GROUP BY Museum_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.visitor_ID IS NULL;
SELECT m.Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT v.Museum_ID FROM visit v)
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.visitor_ID IS NULL;
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit; 
SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit; 
SELECT AVG(visit.Num_of_Ticket), MAX(visit.Num_of_Ticket) FROM visit;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;
SELECT total_spent FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT Total_spent FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)
SELECT Total_spent FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT Total_spent FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT Total_spent FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE visit.Museum_ID IN   (SELECT Museum_ID FROM museum WHERE Open_Year < 2009) AND visit.Museum_ID IN   (SELECT Museum_ID FROM museum WHERE Open_Year > 2011)
SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND visit.visitor_ID IN (  SELECT visitor_ID  FROM visit  INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID  WHERE museum.Open_Year > 2011  ) GROUP BY visit.visitor_ID
SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND visit.visitor_ID IN  (SELECT visit.visitor_ID   FROM visit   INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE museum.Open_Year > 2011)
SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID WHERE museum.Open_Year < 2009 AND museum.Museum_ID IN (   SELECT Museum_ID   FROM museum   WHERE Open_Year > 2011 ) GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) > 1;
SELECT visitor.Name FROM visitor INNER JOIN visit ON visit.visitor_ID = visitor.ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011
SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID AND museum.Open_Year > 2010 WHERE museum.Museum_ID IS NULL;
SELECT Count(*) FROM visitor WHERE ID NOT IN (   SELECT v.visitor_ID   FROM visit v   JOIN museum m   ON v.Museum_ID = m.Museum_ID   WHERE m.Open_Year > 2010 )
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year <= 2010)
SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Open_Year IS NULL 
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID          FROM visit          INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID          WHERE Open_Year > 2010)
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT count(*) FROM players;
SELECT COUNT(player_id) FROM players;
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT count(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT count(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players; 
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT   COUNT(*) FROM matches;
SELECT Count(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT count(*) FROM matches;
SELECT count(*) FROM matches;
SELECT Count(*) FROM matches;
SELECT COUNT(*) FROM matches; 
SELECT COUNT(*) FROM matches;
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT `first_name`, `birth_date` FROM `players` WHERE `country_code` = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT ROUND(AVG(winner_age), 2), ROUND(AVG(loser_age), 2) FROM matches;
SELECT   AVG(winner_age),   AVG(loser_age) FROM matches; 
SELECT AVG(winner_age), AVG(loser_age) FROM matches;
SELECT ROUND(AVG(loser_age), 2), ROUND(AVG(winner_age), 2) FROM matches;
SELECT ROUND(AVG(l.loser_age),2), ROUND(AVG(w.winner_age),2) FROM matches LEFT JOIN players AS l ON matches.loser_id = l.player_id LEFT JOIN players AS w ON matches.winner_id = w.player_id;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(loser_age),    AVG(winner_age) FROM matches;
SELECT AVG(winner_age), AVG(loser_age) FROM matches;
SELECT ROUND(AVG(loser_age), 2), ROUND(AVG(winner_age), 2) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT ROUND(AVG(winner_rank), 2) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT ROUND(AVG(winner_rank), 2) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT ROUND(AVG(winner_rank), 2) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(players.rankings) FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT  MAX(loser_rank) FROM matches 
SELECT MAX(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT Count(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT Count(DISTINCT loser_name) FROM matches;
SELECT `COUNT(DISTINCT loser_name)` FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name, COUNT(*) FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT p1.first_name, p1.last_name FROM players p1 INNER JOIN matches m1 ON p1.player_id = m1.winner_id INNER JOIN matches m2 ON p1.player_id = m2.winner_id WHERE strftime('%Y', m1.tourney_date) = '2013' AND strftime('%Y', m2.tourney_date) = '2016'
SELECT players.first_name, players.last_name FROM players JOIN (   SELECT winner_id   FROM matches   WHERE year = 2013   INTERSECT   SELECT winner_id   FROM matches   WHERE year = 2016 ) AS winners_both_years ON players.player_id = winners_both_years.winner_id;
SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (  SELECT winner_name  FROM matches  WHERE year = 2016 ) GROUP BY winner_name;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM players INNER JOIN matches AS m1 ON players.player_id = m1.winner_id INNER JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE strftime('%Y', m1.tourney_date) = '2013' AND strftime('%Y', m2.tourney_date) = '2016'
SELECT player_id,first_name,last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE year IN (2013, 2016) GROUP BY player_id HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT matches.year) = 2;
SELECT players.first_name, players.last_name FROM players JOIN matches AS m1 ON m1.winner_id = players.player_id JOIN matches AS m2 ON m2.winner_id = players.player_id WHERE m1.year = 2013 AND m2.year = 2016
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.year IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING count(DISTINCT matches.year) = 2;
SELECT players.first_name, players.last_name FROM players JOIN matches AS m1 ON players.player_id = m1.winner_id JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE strftime('%Y',m1.tourney_date) = '2013' AND strftime('%Y',m2.tourney_date) = '2016'
SELECT count(*) FROM matches WHERE year=2013 OR year=2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year IN (2013, 2016);
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT Count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.year IN (SELECT year FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id)
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.player_id, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND    matches.tourney_name = 'Australian Open' GROUP BY players.player_id HAVING COUNT(*) = 2
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1;
SELECT ` players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players); `
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players);
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (   SELECT MIN(birth_date)   FROM players )
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name || ' ' || players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (  SELECT MAX(tours)  FROM rankings )
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id          FROM rankings          GROUP BY player_id          ORDER BY count(*) DESC          LIMIT 1);
SELECT first_name, country_code FROM players WHERE player_id = (   SELECT player_id   FROM rankings   GROUP BY player_id   ORDER BY SUM(tours) DESC   LIMIT 1 )
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE tours = (SELECT MAX(tours) FROM rankings)
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings);
SELECT year, count(*) FROM matches GROUP BY year ORDER BY matches_count DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY matches_count DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT "year", count(*) FROM matches GROUP BY "year" ORDER BY count(*) DESC LIMIT 1;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY quantity desc LIMIT 1;
SELECT players.first_name, players.last_name, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, winner_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY winner_id ORDER BY count(*) DESC LIMIT 1;
SELECT winner_name, SUM(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT winner_name, SUM(winner_rank_points) FROM matches WHERE winner_id IN (   SELECT winner_id   FROM matches   GROUP BY winner_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) GROUP BY winner_id;
SELECT winner_name, winner_rank_points FROM matches WHERE winner_id = (   SELECT winner_id   FROM matches   GROUP BY winner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT players.first_name, players.last_name, sum(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1;
SELECT players.first_name || ' ' || players.last_name, MAX(rankings.ranking_points) FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(match_quantity), rankings.ranking_points FROM players INNER JOIN (SELECT winner_id, COUNT(*) AS match_quantity  FROM matches  GROUP BY winner_id) AS match_counts ON players.player_id = match_counts.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id WHERE match_quantity = (  SELECT max(count(*))  FROM  (SELECT winner_id, COUNT(*) AS match_quantity   FROM matches   GROUP BY winner_id) AS match_counts )
SELECT players.first_name, players.last_name, MAX(winner_wins_rankings.ranking_points) FROM players JOIN (  SELECT winner_id, COUNT(*) AS winner_wins  FROM matches  GROUP BY winner_id ) AS winner_wins_count ON players.player_id = winner_wins_count.winner_id JOIN rankings AS winner_wins_rankings ON winner_wins_rankings.player_id = winner_wins_count.winner_id;
SELECT  winner_name, MAX(matches_won), ranking_points FROM (   SELECT winner_name, COUNT(*)   FROM matches   GROUP BY winner_name ) AS winner_matches JOIN players ON winner_matches.winner_name = players.first_name || ' ' || players.last_name JOIN rankings ON players.player_id = rankings.player_id ORDER BY max_matches_won DESC LIMIT 1; 
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open'   AND winner_rank_points IS NOT NULL )
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches   WHERE tourney_name = 'Australian Open'   )
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name || ' ' || players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' AND matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open');
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM   matches WHERE   minutes = (SELECT MAX(minutes) FROM matches);
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT MAX(minutes), CASE WHEN winner_id = players.player_id THEN players.first_name || ' ' || players.last_name ELSE NULL END, CASE WHEN loser_id = players.player_id THEN players.first_name || ' ' || players.last_name ELSE NULL END FROM matches INNER JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id;
SELECT loser_name,winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT (SELECT winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)) UNION (SELECT loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches));
SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches);
SELECT  winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name,     AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players LEFT JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players LEFT JOIN rankings ON players.player_id=rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT SUM(rankings.ranking_points), players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players INNER JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id,players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT players.country_code, count(*) FROM players GROUP BY players.country_code;
SELECT country_code, count(*) FROM players GROUP BY country_code;
SELECT players.country_code, count(*) FROM players GROUP BY players.country_code;
SELECT country_code, count(*) FROM players GROUP BY country_code;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code;
SELECT country_code, count(*) FROM players GROUP BY country_code;
SELECT country_code, count(*) FROM players GROUP BY country_code;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) FROM players GROUP BY players.country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
SELECT country_code, count(*) FROM players GROUP BY country_code ORDER BY quantity DESC LIMIT 1;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY quantity DESC LIMIT 1;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY quantity DESC LIMIT 1;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING count(*) > 50; 
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code,    COUNT(*) FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT players.country_code, count(*) FROM players GROUP BY players.country_code HAVING count(*) > 50;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT players.country_code, COUNT(*) FROM players GROUP BY players.country_code HAVING COUNT(*) > 50
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(tours) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT year, COUNT(*) FROM  matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, count(*) FROM matches GROUP BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches INNER JOIN players ON matches.winner_id = players.player_id INNER JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking = 1 ORDER BY players.birth_date LIMIT 3;
SELECT FULL JOIN players ON matches.winner_id = players.player_id SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_level = 'WTA' AND tourney_name = 'Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT(winner_id)) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_level = 'W' AND winner_hand = 'L';
SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name='WTA Championships' AND winner_hand='L'
SELECT count(*) FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT count(*) FROM matches m inner join players p on m.winner_id = p.player_id where p.hand = 'L' and m.tourney_level = 'W' and m.tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT count(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tournament_name = 'WTA Championships'
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships';
SELECT players.first_name, players.country_code, players.birth_date FROM matches JOIN players ON matches.winner_id = players.player_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches ) AS max_rank ON matches.winner_id = max_rank.winner_id AND matches.winner_rank_points = max_rank.max_rank_points;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank ON matches.winner_id = max_rank.winner_id AND matches.winner_rank_points = max_rank.max_rank_points;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches )
SELECT p.first_name, p.country_code, p.birth_date FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches ) temp ON m.winner_id = temp.winner_id AND m.winner_rank_points = temp.max_rank_points; 
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (  SELECT winner_id, MAX(winner_rank_points) AS max_rank_points  FROM matches ) AS max_points ON players.player_id = max_points.winner_id
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (   SELECT winner_id, max(winner_rank_points) AS max_points   FROM matches ) AS max_points_table ON players.player_id = max_points_table.winner_id
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id           FROM matches           WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches))
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (SELECT winner_id, SUM(winner_rank_points) AS total_rank_points    FROM matches    GROUP BY winner_id    ORDER BY total_rank_points DESC    LIMIT 1) AS max_rank_points ON players.player_id = max_rank_points.winner_id;
SELECT players.first_name, players.country_code, players.birth_date FROM players WHERE players.player_id = (   SELECT winner_id   FROM matches   WHERE winner_rank_points = (     SELECT MAX(winner_rank_points)     FROM matches   ) )
SELECT hand, COUNT(player_id) FROM players GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT hand, count(*) FROM players GROUP BY hand;
SELECT hand, count(*) FROM players GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT  hand, COUNT(*) FROM players GROUP BY hand; 
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT COUNT(*), hand FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'"
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT  name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT name, date, result FROM battle;
SELECT name, date, result FROM battle;
SELECT name, date, result FROM battle;
SELECT name, date, result FROM battle;
SELECT MAX(killed), MIN(killed) FROM death;
SELECT MAX(killed), MIN(killed) FROM death;
SELECT MAX(killed), MIN(killed) FROM death;
SELECT battle.id, MAX(death.killed), MIN(death.killed) FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id; 
SELECT MAX(killed), MIN(killed) FROM death;
SELECT ROUND(AVG(injured), 2) FROM death;
SELECT AVG(injured) FROM death;
SELECT AVG(injured) FROM death;
SELECT ROUND(AVG(death.injured), 2) FROM death;
SELECT ROUND(AVG(injured),2) FROM death;
SELECT death.id, death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT death.id, death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT death.id, death.note, death.killed, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT  death.id, death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'; 
SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander <> 'Boril';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'; 
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle INNER JOIN death ON death.caused_by_ship_id = ship.id WHERE battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING sum(death.killed) > 10;
SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id, battle.name HAVING sum(death.killed) > 10;
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT battle.id, battle.name FROM battle JOIN death ON death.caused_by_ship_id = ship.id WHERE (death.killed + death.injured) > 10;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship_id, name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship_id, name, SUM(injured) FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship_id, name ORDER BY total_injuries DESC LIMIT 1;
SELECT DISTINCT battle.name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT Distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I' can be retrieved using the following SQLite SQL query:
SELECT DISTINCT battle.name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') or (bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan');
SELECT DISTINCT battle.name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') 
SELECT DISTINCT battle.name FROM battle WHERE (bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I') OR (bulgarian_commander = 'Baldwin I' AND latin_commander = 'Kaloyan');
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT count(distinct battle.id) FROM battle LEFT JOIN ship ON battle.id=ship.lost_in_battle WHERE ship.tonnage != '225' OR ship.tonnage IS NULL;
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle AND ship.tonnage = '225' WHERE ship.id IS NULL;
SELECT count(*) FROM battle WHERE id NOT IN   (SELECT lost_in_battle   FROM ship   WHERE tonnage = '225');
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage <> '225' OR ship.tonnage IS NULL;
SELECT Battle.name, Battle.date FROM Battle INNER JOIN Ship ON Battle.id = Ship.lost_in_battle WHERE Ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.date FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT name, date FROM battle WHERE id IN (   SELECT lost_in_battle   FROM ship   WHERE name IN ('Lettice', 'HMS Atalanta') )
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.id IS NULL AND ship.location <> 'English Channel';
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.lost_in_battle IS NULL AND ship.location != 'English Channel';
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.id IS NULL AND ship.location <> 'English Channel';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = 'English Channel')
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.id IS NULL AND s.location != 'English Channel';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT Addresses.line_1, Addresses.line_2 FROM Addresses
SELECT Addresses.line_1, Addresses.line_2 FROM Addresses
SELECT `address_id, line_1, line_2 FROM Addresses`
SELECT Addresses.line_1, Addresses.line_2 FROM Addresses
SELECT Addresses.line_1, Addresses.line_2 FROM Addresses;
SELECT address_id, line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses
SELECT address_id, line_1, line_2 FROM Addresses
SELECT address_id, line_1, line_2 FROM Addresses;
SELECT addresses.line_1, addresses.line_2  FROM addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(course_id) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT Count(*) FROM Courses;
SELECT count(*) FROM Courses 
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT count(*) FROM Courses;
SELECT Count(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name = 'Math'
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT Courses.course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT Departments.department_name, Departments.department_id FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;
SELECT Departments.department_id, Departments.department_name, COUNT(Degree_Programs.degree_program_id) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY quantity_of_degrees DESC LIMIT 1;
SELECT department.department_name, department.department_id, COUNT(degree_program_id) FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY department.department_id ORDER BY degree_count desc LIMIT 1;
SELECT departments.department_id, departments.department_name, count(degree_program_id) FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY quantity DESC LIMIT 1;
SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;
SELECT department_id, department_name FROM Departments WHERE department_id = (SELECT department_id            FROM Degree_Programs            GROUP BY department_id            ORDER BY count(*) DESC            LIMIT 1)
SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;
SELECT Departments.department_name, COUNT(Degree_Programs.department_id) FROM Departments LEFT JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY degree_count DESC LIMIT 1;
SELECT department_id, department_name FROM Departments WHERE department_id = (   SELECT department_id   FROM Degree_Programs   GROUP BY department_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT department_name, department_id FROM Departments WHERE department_id = (   SELECT department_id   FROM Degree_Programs   GROUP BY department_id   ORDER BY COUNT(degree_program_id) DESC   LIMIT 1 )
SELECT count(*) FROM Departments;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT(department_id)) FROM Degree_Programs; 
SELECT COUNT(DISTINCT Departments.department_id) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT count(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs; 
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT Count(degree_program_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT count(degree_program_id) FROM Degree_Programs WHERE department_id=(SELECT department_id FROM Departments WHERE department_name='engineering')
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT count(Degree_Programs.degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT COUNT(Degree_Programs.degree_program_id) FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering'
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT Sections.section_name, Sections.section_description FROM Sections;
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections
SELECT * FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT Sections.section_name, Sections.section_description FROM Sections
SELECT Sections.section_name, Sections.section_description FROM Sections;
SELECT section_name, section_description FROM Sections
SELECT  Courses.course_id, Courses.course_name FROM Courses WHERE Courses.course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING count(*) <= 2 ); 
SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(DISTINCT Sections.section_id) <= 2;
SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(*) <= 2; 
SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) <= 2 );
SELECT course_id,course_name FROM Courses c WHERE (SELECT COUNT(*) FROM Sections s WHERE c.course_id = s.course_id) <= 2;
SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(*) < 2;
SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(*) < 2;
SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(*) < 2;
SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING count(*) < 2 )
SELECT Courses.course_id, Courses.course_name FROM Courses WHERE Courses.course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) < 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC; 
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC; 
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT Semester.semester_id, Semester.semester_name, count(*) FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Student_Enrolment.semester_id ORDER BY count(*) DESC LIMIT 1;
SELECT semesters.semester_id, semesters.semester_name, COUNT(*) FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY quantity DESC LIMIT 1;
SELECT Semesters.semester_id, Semesters.semester_name FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Student_Enrolment.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY count(*) DESC LIMIT 1; 
SELECT semesters.semester_id, semesters.semester_name FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id GROUP BY semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Semester.semester_id, semester.semester_name, count(*) FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Student_Enrolment.semester_id ORDER BY quantity DESC LIMIT 1;
SELECT semesters.semester_id, semesters.semester_name, count(*) FROM student_enrolment JOIN semesters ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id ORDER BY quantity DESC LIMIT 1;
SELECT  Semesters.semester_id, Semesters.semester_name, COUNT(*) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY total_students DESC LIMIT 1; 
SELECT  Semester.semester_name, Semester.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Semester.semester_id, Semester.semester_name, COUNT(*) FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Student_Enrolment.semester_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT  Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 
SELECT  Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2; 
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) >= 2;
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(DISTINCT Student_Enrolment.degree_program_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2; 
SELECT  Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1;
SELECT S1.student_id, S1.first_name, S1.middle_name, S1.last_name FROM Students AS S1 JOIN Student_Enrolment AS SE1 ON S1.student_id = SE1.student_id JOIN Student_Enrolment AS SE2 ON S1.student_id = SE2.student_id AND SE1.semester_id = SE2.semester_id AND SE1.degree_program_id <> SE2.degree_program_id
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Students.student_id HAVING count(DISTINCT Student_Enrolment.degree_program_id) = 2 AND count(DISTINCT Student_Enrolment.semester_id) = 1;
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%' 
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor';
SELECT students.first_name, students.middle_name, students.last_name FROM students INNER JOIN student_enrolment ON students.student_id = student_enrolment.student_id INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name LIKE '%bachelor%';
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors';
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelors%'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors' 
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT degree_summary_name, count(*) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT degree_summary_name, count(*) FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(*) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name, COUNT(*) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(*) FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT degree_summary_name, count(*) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT degree_summary_name, count(*) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT degree_summary_name, count(*) FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT degree_summary_name, COUNT(DISTINCT Students.student_id) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Degree_Programs.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT degree_summary_name, COUNT(student_id) FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name, degree_summary_description FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT I understand that you want to retrieve the program id and the summary of the degree that has the most students enrolled. Here's the SQLite SQL query to achieve that:
SELECT degree_program_id, degree_summary_name, degree_summary_description FROM Degree_Programs WHERE degree_program_id IN (   SELECT degree_program_id   FROM Student_Enrolment   GROUP BY degree_program_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT degree_program_id, degree_summary_description FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY se.degree_program_id ORDER BY count(*) DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrolment_quantity DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(Student_Enrolment.student_enrolment_id) FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(Enrolments.student_enrolment_id) FROM Students JOIN Student_Enrolment AS Enrolments ON Students.student_id = Enrolments.student_id GROUP BY Students.student_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT student_id, first_name, middle_name, last_name, COUNT(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT students.student_id, first_name, middle_name, last_name, count(*) FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrolment_count DESC LIMIT 1; 
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(Student_Enrolment.student_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollment_count DESC LIMIT 1; 
SELECT Students.student_id, first_name, middle_name, last_name, count(*) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY number_of_enrollments DESC LIMIT 1; 
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.degree_program_id) FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL;
SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.semester_id IS NULL;
SELECT  semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) 
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT semester_id   FROM Student_Enrolment )
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses INNER JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;
SELECT course_name, COUNT(student_course_id) FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY course_name ORDER BY enrollment_count DESC LIMIT 1;
SELECT course_name FROM Courses WHERE course_id = (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT course_name FROM Courses WHERE course_id = (SELECT course_id FROM Student_Enrolment_Courses           GROUP BY course_id           ORDER BY COUNT(*) DESC           LIMIT 1)
SELECT course_name FROM Courses WHERE course_id = (   SELECT course_id   FROM (     SELECT course_id, COUNT(*)    FROM Student_Enrolment_Courses     GROUP BY course_id     ORDER BY COUNT(*) DESC     LIMIT 1   ) )
SELECT course_name FROM Courses WHERE course_id = (   SELECT course_id   FROM (     SELECT course_id, COUNT(*) FROM Student_Enrolment_Courses     GROUP BY course_id     ORDER BY COUNT(*) DESC     LIMIT 1   ) )
SELECT course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY count(*) DESC LIMIT 1;
SELECT course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT course_name, count(*) FROM Student_Enrolment SE JOIN Student_Enrolment_Courses SEC ON SE.student_enrolment_id = SEC.student_enrolment_id JOIN Courses C ON SEC.course_id = C.course_id GROUP BY C.course_id ORDER BY quantity DESC LIMIT 1;
SELECT course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT course_name, count(*) FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY course_name ORDER BY quantity DESC LIMIT 1;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL; 
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.student_enrolment_id IS NULL;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_enrolment ON Students.student_id = Student_enrolment.student_id LEFT JOIN Degree_Programs ON Student_enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_enrolment.student_enrolment_id IS NULL
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT Students.last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment )
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(*) >= 2 );
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING count(*) >= 2 )
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (SELECT transcript_id             FROM Transcript_Contents             GROUP BY transcript_id             HAVING COUNT(*) >= 2)
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts INNER JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id INNER JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING count(*) >= 2 ;
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(*) >= 2 )
SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id, transcript_date HAVING COUNT(*) >= 2;
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING COUNT(*) >= 2;
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id HAVING COUNT(*) >= 2;
SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcript_Contents.transcript_id HAVING COUNT(*) >= 2;
SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts INNER JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id INNER JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcripts.transcript_id HAVING COUNT(*) >= 2;
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward'; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (   SELECT MIN(date_first_registered)   FROM Students )
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE student_id = (   SELECT student_id   FROM Student_Enrolment   WHERE date_first_registered = (     SELECT MIN(date_first_registered)     FROM Student_Enrolment   )   LIMIT 1 )
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT    s.first_name,   s.middle_name,   s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id ORDER BY se.date_first_registered LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcripts t ON se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_left LIMIT 1;
SELECT  first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1; 
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Student_Enrolment.student_id = Students.student_id ORDER BY Student_Enrolment.date_left LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_left LIMIT 1; 
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcripts ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_enrolment_id JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id; 
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id 
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id; 
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id;
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id; 
SELECT first_name FROM Students JOIN Addresses AS perm_address ON Students.permanent_address_id = perm_address.address_id JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id WHERE perm_address.line_1 != current_address.line_1 
SELECT first_name FROM Students WHERE permanent_address_id != current_address_id
SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id;
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id;
SELECT  Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT MAX(address_id), line_1, line_2, line_3 FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY count(*) DESC   LIMIT 1 ); 
SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3 ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT address_id, line_1, line_2, line_3 FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (SELECT current_address_id           FROM Students           GROUP BY current_address_id           ORDER BY count(*) DESC           LIMIT 1)
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(strftime('%s', transcript_date)) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT ROUND(AVG(julianday(transcript_date)),1) FROM Transcripts;
SELECT ROUND(AVG(strftime('%s', transcript_date)), 0) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT ROUND(AVG(strftime('%s', transcript_date))) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts; 
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts ORDER BY transcripts.transcript_date LIMIT 1;
SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts ORDER BY transcripts.transcript_date LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT MIN(transcript_date), transcript_id, other_details FROM Transcripts;
SELECT MIN(transcript_date), transcript_id, other_details FROM Transcripts;
SELECT MIN(transcript_date), transcript_id, other_details FROM Transcripts;
SELECT Count(*) FROM Transcripts;
SELECT count(*) FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT count(transcript_id) FROM Transcripts;
SELECT count(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT  count(*) FROM Transcripts; 
SELECT COUNT(*) FROM Transcripts;
SELECT Count(*) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts
SELECT MAX(transcript_date) FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT transcripts.transcript_date FROM transcripts ORDER BY transcripts.transcript_date DESC LIMIT 1;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT count(*), student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT student_course_id, count(*) FROM Student_Enrolment_Courses GROUP BY student_course_id ORDER BY enrollment_appearances DESC LIMIT 1;
SELECT COUNT(DISTINCT Transcript_Contents.transcript_id), Student_Enrolment_Courses.student_enrolment_id FROM Transcript_Contents INNER JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY max_enrollment_result_count DESC LIMIT 1;
SELECT count(*), student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT COUNT(*), student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id ORDER BY enrollment_frequency DESC LIMIT 1;
SELECT course_id, count(*) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY quantity DESC LIMIT 1 
SELECT  course_id, count(*) FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY frequency DESC LIMIT 1; 
SELECT  Courses.course_id, COUNT(*) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY Courses.course_id ORDER BY enrollment_count DESC LIMIT 1; 
SELECT MAX(cnt) ,course_id ,student_enrolment_id FROM   (   SELECT     COUNT(sc.course_id),sc.course_id,sc.student_enrolment_id   FROM     Student_Enrolment_Courses sc   INNER JOIN     Transcript_Contents tc ON tc.student_course_id=sc.student_course_id   GROUP BY sc.student_enrolment_id, sc.course_id   ) GROUP BY course_id ORDER BY max_course_count DESC;
SELECT  Courses.course_id, count(*) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY max_count DESC LIMIT 1; 
SELECT transcript.transcript_date, count(*) FROM Transcript_Contents JOIN Transcript ON Transcript_Contents.transcript_id = Transcript.transcript_id GROUP BY Transcript.transcript_id ORDER BY quantity ASC LIMIT 1;
SELECT Transcripts.transcript_date, Count(*) FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY quantity ASC LIMIT 1;
SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts LEFT JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id LEFT JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcript_contents.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT DATE(Transcripts.transcript_date), Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id GROUP BY transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT count(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) ASC LIMIT 1;
SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) ASC LIMIT 1;
SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Master' AND Semesters.semester_id IN   (SELECT semester_id FROM Student_Enrolment    JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id    WHERE Degree_Programs.degree_summary_name = 'Bachelor')
SELECT Semester.semester_name FROM Semester JOIN Student_Enrollment ON Student_Enrollment.semester_id = Semester.semester_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Student_Enrollment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Master' INTERSECT SELECT Semester.semester_name FROM Semester JOIN Student_Enrollment ON Student_Enrollment.semester_id = Semester.semester_id JOIN Degree_Programs ON Degree_Programs.degree_program_id = Student_Enrollment.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
SELECT semester_name FROM Semesters WHERE semester_id IN   (SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN      (SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Master')   ) AND semester_id IN   (SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN      (SELECT degree_program_id      FROM Degree_Programs      WHERE degree_summary_name = 'Bachelor')   );
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor');
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY Semesters.semester_name HAVING COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Master' THEN Student_Enrolment.student_enrolment_id END) > 0 AND COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Bachelor' THEN Student_Enrolment.student_enrolment_id END) > 0;
SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%') AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Master%')) GROUP BY semester_id HAVING COUNT(*) >= 2;
SELECT Semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) > 1;
SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_program_id) = 2;
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters' OR degree_summary_name = 'Bachelors') GROUP BY semester_id HAVING count(DISTINCT degree_program_id) = 2;
SELECT count(DISTINCT Students.current_address_id) FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students;
SELECT count(DISTINCT Students.current_address_id) FROM Students;
SELECT Addresses.* FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id
SELECT Addresses.* FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id;
SELECT DISTINCT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id;
SELECT Addresses.address_id,     line_1,     line_2,     line_3,     city,     zip_postcode,     state_province_county,     country,     other_address_details FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id JOIN Students ON Students.permanent_address_id = Addresses.address_id;
SELECT `Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details FROM Addresses INNER JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id`
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC 
SELECT I would use the following SQL query to fetch the requested information:
SELECT student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC 
SELECT  student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC 
SELECT DISTINCT students.student_id, students.first_name, students.middle_name, students.last_name, students.cell_mobile_number, students.email_address FROM students ORDER BY students.last_name DESC;
SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC 
SELECT Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name = 'h';
SELECT Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name = 'h';
SELECT Sections.* FROM Sections WHERE section_name = 'h';
SELECT Sections.section_id, Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name = 'h';
SELECT Sections.* FROM Sections WHERE section_name = 'h';
SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE addresses.country='Haiti' OR students.cell_mobile_number='09700166582';
SELECT Students.first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR cell_mobile_number = '09700166582'
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT DISTINCT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'; 
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;
SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT `Title` FROM Cartoon ORDER BY Title ASC;
SELECT Title from Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones";
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = "Ben Jones";
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones";
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones";
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones";
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'; 
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'; 
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT TV_Channel.Country,COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC
SELECT TV_Channel.Country, count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC;
SELECT TV_Channel.Country, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Number_of_TV_Channels DESC;
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC;
SELECT TV_Channel.Country, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT TV_Channel.Country, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT TV_Channel.Country, count(*) FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(TV_Channel.id),     TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel;
SELECT count(distinct series_name), count(distinct content) FROM TV_Channel;
SELECT count(distinct series_name), count(distinct Content) FROM TV_Channel;
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel 
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT TV_series.id), COUNT(DISTINCT TV_Channel.Content) FROM TV_series, TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT DISTINCT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.series_name = 'Sky Radio';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC;
SELECT Language, count(*) FROM TV_Channel GROUP BY Language ORDER BY num_tv_channel ASC;
SELECT ### SQLite SQL Query:  Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels LIMIT 1; 
SELECT Language, count(*) FROM TV_Channel GROUP BY Language ORDER BY num_TV_Channel;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels ASC;
SELECT series.Language, count(*) FROM TV_channel channel JOIN TV_series series ON channel.id = series.Channel GROUP BY series.Language ORDER BY quantity LIMIT 1;
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY Channel_count LIMIT 1; 
SELECT series_name,COUNT(*) FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;
SELECT TV_Channel.Language, COUNT(TV_Channel.id) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Channel_count LIMIT 1;
SELECT Language, COUNT(TV_Channel.id) FROM TV_Channel GROUP BY Language ORDER BY Channel_Count LIMIT 1;
SELECT TV_Channel.Language, count(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT Language, count(*) FROM TV_Channel GROUP BY Language;
SELECT Language, count(*) FROM TV_Channel GROUP BY Language;
SELECT Count(*), Language FROM TV_Channel GROUP BY Language;
SELECT Language, count(*) FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.Language, COUNT(TV_Channel.id) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'
SELECT TV_Channel.series_name FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.title = "The Rise of the Blue Beetle";
SELECT TV_channel.series_name FROM Cartoon JOIN TV_channel ON Cartoon.Channel = TV_channel.id WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Air_Date, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT **SQLite SQL Query:**  SELECT MIN(Share), MAX(Share) FROM TV_series; 
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT (MAX(Share), MIN(Share) FROM TV_series;
SELECT In SQLite SQL, the query to find the maximum and minimum share for the TV series would be:
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Episode FROM TV_series WHERE TV_series.Series_name = "Sky Radio";
SELECT Episode FROM TV_series WHERE TV_series.Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio");
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio");
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"
SELECT Directed_by, count(*) FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(id) FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT COUNT(*), Directed_by FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(Cartoon.id) FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT COUNT(*), Directed_by FROM Cartoon GROUP BY Directed_by;
SELECT c.Directed_by, COUNT(*) FROM Cartoon c GROUP BY c.Directed_by;
SELECT Count(*), Directed_by FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1;
SELECT Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (   SELECT MAX(Original_air_date)   FROM Cartoon );
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date)              FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (   SELECT max(Original_air_date)   FROM Cartoon )
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.High_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.High_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.High_definition_TV = 'Yes';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TC.Country FROM Cartoon C JOIN TV_Channel TC ON C.Channel = TC.id WHERE C.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_channel.Country FROM TV_channel JOIN Cartoon ON Cartoon.Channel = TV_channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey');
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT c.Channel FROM Cartoon c WHERE c.Written_by = 'Todd Casey')
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT DISTINCT c.Channel   FROM Cartoon c   WHERE c.Written_by = 'Todd Casey')
SELECT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Written_by = 'Todd Casey')
SELECT DISTINCT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL; 
SELECT Country FROM TV_Channel WHERE id IN (SELECT Channel       FROM Cartoon       WHERE Written_by != 'Todd Casey'       GROUP BY Channel);
SELECT DISTINCT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN  (SELECT TV_series.Channel   FROM TV_series   WHERE TV_series.id IN    (SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Written_by = 'Todd Casey'   )  );
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN TV_series ON TV_series.Channel = TV_Channel.id LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by <> 'Todd Casey' OR Cartoon.Written_by IS NULL;
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') 
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English'
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English'
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel INNER JOIN TV_series ON TV_series.Channel = TV_Channel.id GROUP BY TV_Channel.id HAVING COUNT(DISTINCT TV_series.id) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(TV_Channel.id) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (  SELECT DISTINCT c.Channel  FROM Cartoon c  WHERE c.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.id IS NULL;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT DISTINCT TV_Channel.id               FROM TV_Channel               JOIN Cartoon ON TV_Channel.id = Cartoon.Channel               WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT TV_Channel.id   FROM TV_Channel   INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id   WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT DISTINCT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' ); 
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT TV_Channel.id   FROM TV_Channel   JOIN Cartoon ON TV_Channel.id = Cartoon.Channel   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN  (SELECT cartoon.channel  FROM cartoon  WHERE cartoon.directed_by = 'Ben Jones');
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN   (SELECT Cartoon.Channel    FROM Cartoon    WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT DISTINCT c.Channel   FROM Cartoon c   WHERE c.Directed_by = 'Ben Jones'   )
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id AND Cartoon.Directed_by = 'Ben Jones' WHERE Cartoon.id IS NULL;
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT t1.id               FROM TV_Channel t1               JOIN Cartoon c ON t1.id = c.Channel               WHERE c.Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_series.Channel               FROM TV_series               WHERE TV_series.Channel IS NOT NULL               AND TV_series.id IN (SELECT Cartoon.Channel                         FROM Cartoon                         WHERE Cartoon.Directed_by = 'Ben Jones'))
SELECT TC_203:id
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones');
SELECT count(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT  COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Count(*) FROM poker_player;
SELECT Count(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT count(*) FROM poker_player;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT p.Earnings FROM poker_player p ORDER BY p.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT   poker_player.Final_Table_Made,   poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player; 
SELECT  AVG(Earnings) FROM poker_player; 
SELECT AVG(Earnings) FROM poker_player; 
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player; 
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1;
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(pp.Earnings),   pp.Money_Rank FROM poker_player pp;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT  Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player); 
SELECT MAX(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT max(money_rank) FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player)
SELECT COUNT(*) FROM poker_player WHERE Earnings < 200000 AND Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000) 
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT max(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT Max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000; 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000; 
SELECT poker_player.Name FROM poker_player WHERE Earnings > 300000;
SELECT poker_player.Poker_Player_ID, Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Earnings > 300000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000; 
SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000;
SELECT poker_player.Poker_Player_ID, people.Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;
SELECT poker_player.Name FROM poker_player WHERE poker_player.Earnings > 300000;
SELECT poker_player.Name FROM poker_player WHERE poker_player.Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT poker_player.Poker_Player_ID, people.People_ID, people.Name, COUNT(poker_player.Final_Table_Made) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY Final_tables_made ASC;
SELECT people.Name, count(poker_player.Final_Table_Made) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY poker_player.People_ID ORDER BY Final_Tables_Made ASC;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM poker_player JOIN people ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT poker_player.Final_Table_Made, people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY quantity ASC;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1;
SELECT birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings LIMIT 1;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT MIN(Birth_Date) FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT birth_date FROM people JOIN poker_player ON people.people_ID = poker_player.people_ID ORDER BY earnings LIMIT 1;
SELECT birth_date FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY earnings LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1; 
SELECT MAX(Money_Rank) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people)
SELECT MAX(poker_player.Money_Rank) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT ROUND(AVG(earnings)) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT ROUND(AVG(earnings), 2) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(pp.Earnings) FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT ROUND(AVG(earnings),2) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT ROUND(AVG(pp.Earnings), 2) FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE height > 200;
SELECT  AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200; 
SELECT ROUND(AVG(earnings), 2) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT  AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200; 
SELECT poker_player.Earnings, people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT p.name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT People.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings, people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT `Name` FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC; 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT People.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT COUNT(*), Nationality FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(*), Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*), Nationality FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(Nationality), Nationality FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, count(*) FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1;
SELECT Nationality, count(*) FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1;
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY Quantity DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality <> "Russia";
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality != "Russia";
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL;
SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people; 
SELECT COUNT(DISTINCT Nationality) FROM people; 
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS ORDER BY CONTESTANT_NAME DESC;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT CONTESTANTS.contestant_number,CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MIN(area_code), MAX(area_code) FROM AREA_CODE_STATE;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT MAX(created) FROM VOTES WHERE state = 'CA'
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT DISTINCT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT CONTESTANT_NAME FROM CONTESTANTS WHERE CONTESTANT_NAME <> 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES;
SELECT DISTINCT state, created FROM VOTES;
SELECT DISTINCT state, created FROM VOTES;
SELECT AREA_CODE_STATE.state, VOTES.created FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state;
SELECT DISTINCT state, created FROM VOTES;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS c JOIN VOTES v ON c.CONTESTANT_NUMBER = v.CONTESTANT_NUMBER GROUP BY c.CONTESTANT_NUMBER, c.CONTESTANT_NAME HAVING COUNT(*) >= 2;
SELECT CONTESTANTS.contestant_number,CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number,CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN (SELECT contestant_number, COUNT(*) AS vote_count    FROM VOTES    GROUP BY contestant_number    HAVING vote_count >= 2) AS vote_counts ON CONTESTANTS.contestant_number = vote_counts.contestant_number;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS WHERE CONTESTANT_NUMBER IN (   SELECT CONTESTANT_NUMBER   FROM VOTES   GROUP BY CONTESTANT_NUMBER   HAVING COUNT(*) >= 2 );
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (  SELECT contestant_number  FROM VOTES  GROUP BY contestant_number  ORDER BY COUNT(*) ASC  LIMIT 1 )
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT count(*) FROM CONTESTANTS WHERE   contestant_number NOT IN (     SELECT contestant_number     FROM VOTES   )
SELECT count(*) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES) 
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1;
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY count(*) DESC LIMIT 1;
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AREA_CODE_STATE.area_code, COUNT(*) FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY vote_count DESC LIMIT 1;
SELECT VOTES.created, AREA_CODE_STATE.state, VOTES.phone_number FROM VOTES INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number INNER JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT v.created, a.state, v.phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling'
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2;
SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON VOTES.state = AREA_CODE_STATE.state JOIN CONTESTANTS ON CONTESTANTS.contestant_number = VOTES.contestant_number WHERE contestant_name = 'Tabatha Gehling' OR contestant_name = 'Kelly Clauss' GROUP BY area_code HAVING count(*) = 2
SELECT  AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2; 
SELECT DISTINCT acs.area_code FROM AREA_CODE_STATE acs JOIN VOTES v ON v.state = acs.state JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling' OR c.contestant_name = 'Kelly Clauss' GROUP BY acs.area_code HAVING COUNT(DISTINCT c.contestant_name) = 2;
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' AND AREA_CODE_STATE.area_code IN (   SELECT AREA_CODE_STATE.area_code   FROM VOTES   JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state   JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Kelly Clauss' )
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT country.Name FROM country WHERE country.IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950
SELECT  country.Name FROM country WHERE country.IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT country.name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM   country WHERE   IndepYear > 1950;
SELECT   COUNT(*) FROM   country WHERE   GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT count(*)  FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT count(*) FROM country WHERE GovernmentForm LIKE '%republic%'
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';
SELECT count(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent='Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'North America' OR Continent = 'South America';
SELECT COUNT(*), SUM(country.SurfaceArea) FROM country WHERE country.Continent = 'Caribbean';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT country.Continent FROM country WHERE country.Code = 'AIA'
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT continent FROM country WHERE Code = 'AIA';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region  FROM city  JOIN country ON city.CountryCode = country.Code  WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = "Kabul";
SELECT Region FROM city WHERE Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT Region FROM city WHERE Name = 'Kabul';
SELECT Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT CountryLanguage.Language FROM CountryLanguage WHERE CountryLanguage.CountryCode = 'ABW' ORDER BY CountryLanguage.Percentage DESC LIMIT 1;
SELECT countrylanguage.Language, MAX(countrylanguage.Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba'
SELECT countrylanguage.Language,    COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language ORDER BY Quantity DESC;
SELECT countrylanguage.Language FROM countrylanguage JOIN (SELECT CountryCode, MAX(Percentage) AS Max_Percentage    FROM countrylanguage    WHERE CountryCode = 'ABW') AS max_percentage ON countrylanguage.CountryCode = max_percentage.CountryCode AND countrylanguage.Percentage = max_percentage.Max_Percentage;
SELECT Language, MAX(Percentage) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'; 
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' AND countrylanguage.IsOfficial = 'T' LIMIT 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' AND countrylanguage.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.CountryCode = 'ABW' AND countrylanguage.IsOfficial = 'T';
SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';
SELECT population, lifeexpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT region, population FROM country WHERE Name = 'Angola';
SELECT region, population FROM country WHERE Name = 'Angola';
SELECT region, population FROM country WHERE Name = 'Angola';
SELECT region, population FROM country WHERE Name = "Angola";
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = "Central Africa";
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Region = 'Central Africa';
SELECT ROUND(AVG(country.LifeExpectancy), 2) FROM country WHERE country.Continent = 'Africa' AND country.Region = 'Central Africa';
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy ASC LIMIT 1;
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT total_population and MAX_gnp from country where Continent = "Asia"
SELECT COUNT(DISTINCT country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia'
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia';
SELECT TotalPopulation, MaxGNP FROM (   SELECT SUM(Population) AS TotalPopulation   FROM country   WHERE Continent = 'Asia' ), (   SELECT MAX(GNP) AS MaxGNP   FROM country   WHERE Continent = 'Asia' ) AS t2;
SELECT COUNT(*), MAX(GNP) FROM country WHERE Continent = 'Asia';
SELECT COUNT(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia';
SELECT count(*), max(GNP) FROM country WHERE continent = 'Asia';
SELECT COUNT(*), MAX(GNP) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*), MAX(GNP) FROM country WHERE continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm = 'Republic';
SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm LIKE '%Republic%'
SELECT sum(continent.SurfaceArea) FROM   country AS continent WHERE   continent.Continent IN ('Asia', 'Europe');
SELECT You can use the following query to get the total surface area of the continents Asia and Europe:
SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent IN ('Asia', 'Europe');
SELECT SUM(country.SurfaceArea) FROM country WHERE continent IN ('Asia', 'Europe');
SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia','Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT count(*) FROM city WHERE District = 'Gelderland';
SELECT COUNT(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT COUNT(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland'
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT COUNT(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT COUNT(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = 'US territory';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = 'US territory';
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = 'US territory'
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = 'US territory';
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Continent = 'North America' AND country.Region = 'Caribbean'
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Continent = 'North America' AND country.GovernmentForm = 'Nonmetropolitan Territory of the US';
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Continent = 'North America' AND country.GovernmentForm like '%territory%';
SELECT Mean GNP,Total Population FROM country WHERE Continent = 'North America' AND (Region = 'Northern America' OR Region = 'Caribbean')
SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.Continent = 'North America'
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT count(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage; 
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT count(distinct Language) FROM countrylanguage;
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';
SELECT count(DISTINCT language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(*) FROM countrylanguage where CountryCode = 'ABW';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(*) FROM countrylanguage WHERE IsOfficial='T' AND CountryCode = 'AFG';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'AFG'; 
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan');
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT country.Name FROM country WHERE code IN ( SELECT CountryCode FROM (SELECT   CountryCode,   COUNT(*) AS numLanguages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY numLanguages DESC   LIMIT 1   ) )
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(*) AS num_languages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY num_languages DESC   LIMIT 1 ) AS c ON country.Code = c.CountryCode;
SELECT country.Name FROM country WHERE country.Code = (   SELECT countrylanguage.CountryCode   FROM countrylanguage   GROUP BY countrylanguage.CountryCode   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(*) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) AS LargestLanguageCount ON country.Code = LargestLanguageCount.CountryCode; 
SELECT country.Name FROM country INNER JOIN (SELECT CountryCode, COUNT(*) FROM countrylanguage GROUP BY CountryCode ORDER BY NumLanguages DESC LIMIT 1) AS MaxLanguages ON country.Code = MaxLanguages.CountryCode;
SELECT Country.Name FROM country WHERE Population = (SELECT MAX(Population) FROM country);
SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(*) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY LanguageCount DESC   LIMIT 1 ) AS maxLanguages ON country.Code = maxLanguages.CountryCode;
SELECT country.Name FROM country WHERE (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code) = (SELECT MAX(COUNT(*)) FROM countrylanguage GROUP BY CountryCode)
SELECT Country.Name FROM   country WHERE   country.Code = (     SELECT       countrylanguage.CountryCode     FROM       countrylanguage     GROUP BY       countrylanguage.CountryCode     ORDER BY       COUNT(*) DESC     LIMIT 1   );
SELECT country.Name FROM country WHERE country.Code = (   SELECT countryCode   FROM countrylanguage   GROUP BY countryCode   ORDER BY COUNT(*) DESC   LIMIT 1) 
SELECT Continent, count(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY num_languages DESC LIMIT 1;
SELECT Continent, count(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY Language_Count DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY LanguageDiversity DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT continent, COUNT(DISTINCT language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY language_count DESC;
SELECT continent, count(Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY language_count DESC;
SELECT Continent, COUNT(DISTINCT Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC;
SELECT Continent, count(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumLanguages DESC;
SELECT Continent, count(Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode GROUP BY continent ORDER BY NumLanguages DESC;
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2
SELECT count(distinct cl.CountryCode) FROM countrylanguage cl WHERE cl.Language in ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage c1 JOIN countrylanguage c2 ON c1.CountryCode = c2.CountryCode WHERE c1.Language = 'English' AND c2.Language = 'Dutch'
SELECT COUNT(*) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'Dutch' AND cl2.IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2;
SELECT count(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch')
SELECT count(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch');
SELECT count(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch')
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Code HAVING COUNT(*) = 2;
SELECT country.Name FROM country WHERE country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') GROUP BY CountryCode HAVING COUNT(*) = 2)
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT country.Name FROM country WHERE country.Code IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' ) AND country.Code IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'French' AND cl.IsOfficial = 'T' )
SELECT country.Name FROM country JOIN countrylanguage AS eng ON country.Code = eng.CountryCode JOIN countrylanguage AS fr ON country.Code = fr.CountryCode WHERE eng.Language = 'English' AND fr.Language = 'French' AND eng.IsOfficial = 'T' AND fr.IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'French') GROUP BY countrylanguage.CountryCode HAVING COUNT(*) = 2
SELECT country.Name FROM country JOIN countrylanguage AS l1 ON country.Code = l1.CountryCode AND l1.Language = 'English' AND l1.IsOfficial = 'T' JOIN countrylanguage AS l2 ON country.Code = l2.CountryCode AND l2.Language = 'French' AND l2.IsOfficial = 'T';
SELECT DISTINCT country.Name FROM country JOIN countrylanguage AS c1 ON country.Code = c1.CountryCode JOIN countrylanguage AS c2 ON country.Code = c2.CountryCode WHERE c1.Language = 'English' AND c1.IsOfficial = 'T' AND c2.Language = 'French' AND c2.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT country.Name FROM country JOIN countrylanguage AS cl1 ON country.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage AS cl2 ON country.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T' 
SELECT c1.Name FROM country c1 JOIN countrylanguage cl1 ON c1.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c1.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT country.Name FROM country WHERE country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'French') AND IsOfficial = 'T') 
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T' GROUP BY country.Name;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T' GROUP BY country.Name;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T') OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T')
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT count(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT count(DISTINCT country.Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch');
SELECT DISTINCT country.Region FROM countrylanguage LEFT JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch');
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch') 
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English';
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T' ORDER BY country.Name;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch');
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T' 
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'Dutch');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT CountryCode, Language, SUM(Percentage) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY Total_Percentage DESC LIMIT 1;
SELECT language, COUNT(CountryCode) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY language ORDER BY cnt DESC LIMIT 1;
SELECT countrylanguage.Language, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode=country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY Quantity DESC LIMIT 1;
SELECT CountryCode,Language, SUM(Percentage) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY TotalPercentage DESC LIMIT 1;
SELECT `Language`  FROM countrylanguage  JOIN country ON countrylanguage.CountryCode = country.Code  WHERE country.Continent = 'Asia'  GROUP BY countrylanguage.Language  ORDER BY SUM(countrylanguage.Percentage) DESC  LIMIT 1;
SELECT language, count(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY language ORDER BY quantity DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countrylanguage.Language, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY quantity DESC LIMIT 1;
SELECT countrylanguage.Language, COUNT(countrylanguage.CountryCode) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY Number_of_Nations DESC LIMIT 1;
SELECT CL.Language FROM countrylanguage CL JOIN country C ON C.Code = CL.CountryCode WHERE C.Continent = 'Asia' GROUP BY CL.Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code   FROM country   WHERE GovernmentForm = 'Republic'   GROUP BY Code   HAVING COUNT(*) = 1 );
SELECT countrylanguage.Language, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT DISTINCT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT DISTINCT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT CL.Language FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code AND C.GovernmentForm = 'Republic' GROUP BY CL.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT MAX(c.Name) FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English'
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name;
SELECT city.Name, country.Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' ORDER BY city.Population DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT name, population, lifeexpectancy  FROM country  WHERE Continent = 'Asia'  ORDER BY SurfaceArea DESC  LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT ROUND(AVG(LifeExpectancy),2) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F')
SELECT AVG(LifeExpectancy) FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'F' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') 
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN   (SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English' AND IsOfficial = 'T')
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' );
SELECT ROUND(AVG(LifeExpectancy),2) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN   (SELECT CountryCode   FROM countrylanguage    WHERE Language = 'English' AND IsOfficial = 'T') 
SELECT ROUND(AVG(LifeExpectancy), 2) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT COUNT(*) FROM country WHERE Code NOT IN (  SELECT CountryCode  FROM countrylanguage  WHERE Language = 'English' );
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language="English" AND IsOfficial="T");
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(c1.Name,c1.Population) FROM country c1 JOIN countrylanguage cl ON c1.Code = cl.CountryCode WHERE cl.Language != 'English'
SELECT count(country.Population) FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) FROM country WHERE Code NOT IN (  SELECT CountryCode  FROM countrylanguage  WHERE Language = 'English' )
SELECT COUNT(country.Population) FROM country WHERE country.Code NOT IN (   SELECT DISTINCT CountryCode   FROM countrylanguage   WHERE Language = 'English' )
SELECT COUNT(*) FROM country WHERE Code NOT IN       (SELECT DISTINCT CountryCode       FROM countrylanguage       WHERE Language = 'English');
SELECT COUNT(*) FROM country WHERE Code NOT IN   (SELECT CountryCode    FROM countrylanguage    WHERE Language = 'English')
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T' ;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code   FROM country   WHERE IndepYear < 1930 )
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT(language)) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT CL.Language) FROM countrylanguage CL JOIN country C ON CL.CountryCode = C.Code WHERE C.IndepYear < 1930 AND CL.IsOfficial = 'T'
SELECT COUNT(DISTINCT language) AS 'total_languages' FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE IndepYear < 1930 ) AND IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT count(DISTINCT(cl.Language)) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930);
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT DISTINCT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea)           FROM country           WHERE Continent = 'Europe')
SELECT country.Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' ); 
SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea)             FROM country c2             WHERE c2.Continent = 'Europe')
SELECT code, Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT (SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'))
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'); 
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'); 
SELECT country.Name FROM country WHERE country.Continent='Africa' AND country.Population < ANY (SELECT country.Population FROM country WHERE country.Continent='Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < ANY (SELECT Population FROM country WHERE Continent = 'Asia' AND Population IS NOT NULL); 
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population)              FROM country              WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < ALL (SELECT country.Population FROM country WHERE continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > ALL (SELECT Population FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE continent = 'Asia' AND population > ALL (SELECT population FROM country WHERE continent = 'Africa');
SELECT country.Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (   SELECT MAX(Population)   FROM country   WHERE Continent = 'Africa'   ) 
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN  (SELECT countrylanguage.CountryCode  FROM countrylanguage  WHERE countrylanguage.Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN   (SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' )
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English');
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT countryCode FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM country WHERE country.Code IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE Language <> 'English' )
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != 'English'
SELECT country.Code FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English' )
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM country WHERE country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL) AND (country.GovernmentForm != 'Republic' OR country.GovernmentForm IS NULL)
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code=countrylanguage.CountryCode WHERE Language<>'English' AND GovernmentForm<>'Republic';
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm <> 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL) AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic'
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic'
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' ) AND country.GovernmentForm != 'Republic';
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm <> 'Republic';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countryLanguage.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON country.Code = city.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'F';
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM   city   INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode   AND city.CountryCode = country.Code WHERE   country.Continent = "Asia"   AND countrylanguage.Language = "Chinese"   AND countrylanguage.IsOfficial = "T"
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT Distinct city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT City.Name FROM  City JOIN  Country ON City.CountryCode = Country.Code JOIN  CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE  Country.Continent = 'Asia'  AND CountryLanguage.Language = 'Chinese'  AND CountryLanguage.IsOfficial = 'T'
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country)
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (   SELECT MIN(Population)   FROM country ); 
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (   SELECT MIN(Population)   FROM country )
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT You can use the following SQLite SQL query to retrieve the information for the country with the largest area:
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country )
SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING count(*) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING LanguageCount > 2;
SELECT country.Name, count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING count(countrylanguage.Language) > 2;
SELECT country.Name, count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING count(countrylanguage.Language) > 2;
SELECT country.Name, COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT country.Name, count(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING count(countrylanguage.Language) > 2;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT DISTRICT, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) FROM CITY WHERE POPULATION > (SELECT AVG(POPULATION) FROM CITY) GROUP BY DISTRICT;
SELECT city.District, count(*) FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT District, count(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District; 
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT governmentform, sum(population) FROM country GROUP BY governmentform HAVING AVG(LifeExpectancy) > 72;
SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (   SELECT governmentform   FROM country   GROUP BY governmentform   HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT DISTINCT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (   SELECT governmentform   FROM country   GROUP BY governmentform   HAVING AVG(lifeexpectancy) > 72 ) GROUP BY governmentform;
SELECT governmentform, SUM(population) FROM country WHERE governmentform IN (SELECT governmentform FROM country GROUP BY governmentform HAVING AVG(lifeexpectancy) > 72) GROUP BY governmentform;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT avg(country.LifeExpectancy), sum(country.Population), country.Continent FROM country GROUP BY country.Continent HAVING avg_life_expectancy < 72;
SELECT AVG(LifeExpectancy), SUM(Population), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, AVG(LifeExpectancy), SUM(Population) FROM country GROUP BY Continent HAVING AvgLifeExpectancy < 72;
SELECT ROUND(AVG(country.LifeExpectancy), 2),    SUM(country.Population),    country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72;
SELECT Continent, sum(country.Population), avg(country.LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72;
SELECT country.Continent, SUM(country.Population), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72;
SELECT continent,   SUM(population),   AVG(lifeexpectancy) FROM   country GROUP BY   continent HAVING   AVG(lifeexpectancy) < 72;
SELECT continent, sum(population), avg(lifeexpectancy) FROM country GROUP BY continent HAVING avg(lifeexpectancy) < 72;
SELECT DISTINCT country.Continent, SUM(country.Population), AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72;
SELECT TOP 5 Name,SurfaceArea FROM country ORDER BY SurfaceArea DESC;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT  Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT Country.Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT country.Name FROM country ORDER BY population DESC LIMIT 3;
SELECT country.Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Country.Name FROM Country ORDER BY Population DESC LIMIT 3;
SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT (SELECT Name FROM country ORDER BY Population DESC LIMIT 3)
SELECT Name FROM country ORDER BY Population DESC LIMIT 3 
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT country.Name FROM country ORDER BY country.Population LIMIT 3;
SELECT country.Name FROM country ORDER BY country.Population LIMIT 3;
SELECT  Name FROM country ORDER BY Population LIMIT 3; 
SELECT  Name FROM country ORDER BY Population LIMIT 3; 
SELECT country.Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3; 
SELECT  Name FROM country ORDER BY Population LIMIT 3; 
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT count(*) FROM country WHERE Continent = 'Asia';
SELECT count(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT count(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT count(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Code, Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000; 
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000; 
SELECT total_population, average_area FROM (  SELECT SUM(Population), AVG(SurfaceArea) AS average_area  FROM country  WHERE Continent = 'North America' AND SurfaceArea > 3000 )
SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT count(*) and group by are some oftenly used SQL keywords. Here is the SQL query to answer the question:
SELECT Total population and average area of countries in the continent of North America with area bigger than 3000 can be obtained using the following SQLite SQL query:
SELECT SUM(country.Population),   AVG(country.SurfaceArea) FROM country WHERE country.Continent = 'North America'   AND country.SurfaceArea > 3000;
SELECT COUNT(*), AVG(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT COUNT(*), SUM(c.Population), AVG(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE continent = 'North America' AND SurfaceArea > 3000;
SELECT Total population and average surface area corresponding to countries in North America with a surface area greater than 3000 can be obtained by the following SQL query:
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT The SQL query to find the cities whose population is between 160,000 and 900,000 would be:
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT cl.Language FROM countrylanguage cl GROUP BY cl.Language ORDER BY COUNT(DISTINCT cl.CountryCode) DESC LIMIT 1;
SELECT Language, COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY NumCountries DESC LIMIT 1;
SELECT countrylanguage.Language, COUNT(DISTINCT countrylanguage.CountryCode) FROM countrylanguage WHERE countrylanguage.IsOfficial = 'T' GROUP BY countrylanguage.Language ORDER BY Quantity DESC LIMIT 1;
SELECT countrylanguage.Language, count(DISTINCT countrylanguage.CountryCode) FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY NumCountries DESC LIMIT 1;
SELECT countrylanguage.Language, COUNT(DISTINCT countrylanguage.CountryCode) FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY Num_countries DESC LIMIT 1;
SELECT language, COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY language ORDER BY Quantity DESC LIMIT 1;
SELECT language, count(distinct CountryCode) FROM countrylanguage GROUP BY Language ORDER BY count(distinct CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT Language, COUNT(*) FROM countrylanguage GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT CountryCode) FROM countrylanguage GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode and countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code);
SELECT countrycode, language FROM (   SELECT     cl.CountryCode,     cl.Language,     RANK() OVER (PARTITION BY cl.CountryCode ORDER BY cl.Percentage DESC) AS rnk   FROM     countrylanguage cl   ) AS ranked_languages WHERE rnk = 1;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code)
SELECT country.Code, countrylanguage.Language FROM countrylanguage JOIN (   SELECT a.CountryCode, a.Language, a.Percentage   FROM countrylanguage a   JOIN (     SELECT CountryCode, MAX(Percentage) AS MaxPercentage     FROM countrylanguage     GROUP BY CountryCode   ) b ON a.CountryCode = b.CountryCode AND a.Percentage = b.MaxPercentage ) c ON countrylanguage.CountryCode = c.CountryCode AND countrylanguage.Language = c.Language;
SELECT countrycode, language FROM countrylanguage WHERE percentage = (SELECT MAX(percentage)           FROM countrylanguage           WHERE countrycode = countrylanguage.countrycode)
SELECT country.Code,     countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE percentage = (SELECT MAX(percentage)           FROM countrylanguage           WHERE countrylanguage.CountryCode = country.Code) ORDER BY country.Code;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE country.Code = countrylanguage.CountryCode ) GROUP BY countrylanguage.CountryCode;
SELECT countrylanguage.CountryCode,     countrylanguage.Language FROM countrylanguage JOIN (   SELECT CountryCode,       MAX(Percentage) AS MaxPercentage   FROM countrylanguage   GROUP BY CountryCode ) AS MaxLanguagePercentage ON countrylanguage.CountryCode = MaxLanguagePercentage.CountryCode AND countrylanguage.Percentage = MaxLanguagePercentage.MaxPercentage;
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code)
SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) ORDER BY country.Code;
SELECT COUNT(*) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (   SELECT MAX(cl2.Percentage)   FROM countrylanguage cl2   WHERE cl2.Language = 'Spanish' ) 
SELECT count(countrylanguage.CountryCode) FROM (  SELECT   CountryCode,   MAX(Percentage) as MaxPercentage  FROM   countrylanguage  WHERE   Language = 'Spanish'  GROUP BY   CountryCode ) as subquery WHERE  Percentage = MaxPercentage;
SELECT COUNT(*) FROM countrylanguage WHERE Language='Spanish' AND Percentage = (  SELECT MAX(Percentage)  FROM countrylanguage  WHERE Language='Spanish' )
SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1; 
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT countrycode FROM countrylanguage WHERE language = 'Spanish' ORDER BY percentage DESC LIMIT 1;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.Percentage > 50;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' 
SELECT Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' GROUP BY CountryCode HAVING MAX(Percentage)
SELECT count(Conductor_ID) FROM conductor; 
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Count(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT count(*) FROM conductor;
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Conductor_ID, Name FROM conductor ORDER BY Age;
SELECT conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor_ID, Name FROM conductor ORDER BY Age;
SELECT Conductor.Name FROM conductor WHERE Conductor.Nationality <> "USA";
SELECT Name FROM conductor WHERE Nationality <> "USA"
SELECT Conductor.Name FROM conductor WHERE Conductor.Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT orc.Record_Company FROM orchestra orc ORDER BY orc.Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT orchestra.Record_Company, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT orchestra.Record_Company, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT "orchestra.Record_Company" FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT ROUND(AVG(Attendance), 2) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show; 
SELECT AVG(Attendance) FROM show 
SELECT AVG(Attendance) FROM show;
SELECT ROUND(AVG(Attendance),2) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT ROUND(AVG(Attendance)) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS Maximum_Share MIN(Share) FROM performance WHERE Type <> "Live final";
SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final';
SELECT In order to retrieve the maximum and minimum share of performances whose type is not "Live final", the following SQLite query should be used:
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'; 
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'; 
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT  MIN(Share), MAX(Share) FROM performance WHERE Type != "Live final"; 
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'; 
SELECT  MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final'; 
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT count(distinct Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT count(distinct Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor_ID FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor.Name, count(*) FROM conductor GROUP BY conductor.Conductor_ID ORDER BY years_worked DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor_ID, Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (SELECT MAX(conductor.Year_of_Work) FROM conductor)
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work = (   SELECT MAX(Year_of_Work) FROM conductor )
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name FROM conductor GROUP BY conductor.Name ORDER BY COUNT(Year_of_Work) DESC LIMIT 1;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT MAX(Conductor_ID) FROM conductor GROUP BY Age;
SELECT Name FROM conductor GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Conductor.Name, Orchestra.Orchestra FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID;
SELECT Conductor.Name, Orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT conductor.Conductor_ID) > 1;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING count(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.ID HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Conductor.Name FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name HAVING COUNT(DISTINCT Orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name, COUNT(DISTINCT orchestra.Orchestra_ID) FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT conductor.Name FROM conductor GROUP BY conductor.Name HAVING COUNT(DISTINCT conductor.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name, count(Orchestra_Orchestra_ID) FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Conductor_ID ORDER BY OrchestraCount DESC LIMIT 1;
SELECT Conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Conductor.Name FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY COUNT(Orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY count(*) DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name FROM conductor LEFT JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY COUNT(Orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, count(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;
SELECT COUNT(*), Record_Company FROM orchestra GROUP BY Record_Company;
SELECT count(*),Record_Company FROM orchestra GROUP BY Record_Company;
SELECT record_company, count(orchestra_id) FROM orchestra GROUP BY record_company;
SELECT COUNT(orchestra.Orchestra_ID), orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company;
SELECT COUNT(*), Record_Company FROM orchestra GROUP BY Record_Company;
SELECT  Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*); 
SELECT orchestra.Major_Record_Format, COUNT(*) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY Quantity;
SELECT orchestra.Major_Record_Format, COUNT(orchestra.Major_Record_Format) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY freq ASC;
SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY Quantity ASC; 
SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY quantity ASC; 
SELECT orchestra.Major_Record_Format, COUNT(*) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;
SELECT orchestra.Major_Record_Format, COUNT(*) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;
SELECT orchestra.Major_Record_Format, COUNT(orchestra.Major_Record_Format) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;
SELECT orchestra.Major_Record_Format, COUNT(*) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY quantity DESC;
SELECT orchestra.Major_Record_Format, COUNT(*) FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT  Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1; 
SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC LIMIT 1; 
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT record_company, count(orchestra_id) FROM orchestra GROUP BY record_company ORDER BY quantity DESC LIMIT 1;
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT record_company, count(orchestra_id) FROM orchestra GROUP BY record_company ORDER BY num_orchestras DESC LIMIT 1;
SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company ORDER BY quantity DESC LIMIT 1;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra_ID, orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestras that do not have any performances can be found with the following query:
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company, count(*) FROM orchestra WHERE Year_of_Founded < 2003 GROUP BY Record_Company UNION SELECT Record_Company, count(*) FROM orchestra WHERE Year_of_Founded > 2003 GROUP BY Record_Company;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003
SELECT r.Record_Company FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE o.Year_of_Founded < 2003 UNION SELECT r.Record_Company FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE o.Year_of_Founded > 2003 GROUP BY r.Record_Company;
SELECT The query to find the record companies that are used by both orchestras founded before 2003 and those founded after 2003 is as follows:
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(CASE WHEN Year_of_Founded < 2003 THEN Orchestra_ID END) > 0 AND COUNT(CASE WHEN Year_of_Founded > 2003 THEN Orchestra_ID END) > 0;
SELECT  "Record_Company" FROM  "orchestra" WHERE  "Year_of_Founded" < 2003 GROUP BY  "Record_Company" HAVING  COUNT(*) > 1 INTERSECT SELECT  "Record_Company" FROM  "orchestra" WHERE  "Year_of_Founded" > 2003 GROUP BY  "Record_Company" HAVING  COUNT(*) > 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(CASE WHEN Year_of_Founded < 2003 THEN Orchestra_ID END) > 0 AND COUNT(CASE WHEN Year_of_Founded > 2003 THEN Orchestra_ID END) > 0;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD'); 
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT count(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT count(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT count(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT  Year_of_Founded FROM orchestra GROUP BY Orchestra_ID HAVING count(*) > 1; 
SELECT  Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 ) 
SELECT YEAR_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID             FROM performance             GROUP BY Orchestra_ID             HAVING COUNT(*) > 1)
SELECT Distinct orchestra.Year_of_Founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1;
SELECT orchestra.Year_of_Founded FROM orchestra JOIN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 ) AS perf_count ON orchestra.Orchestra_ID = perf_count.Orchestra_ID;
SELECT Year_of_Founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1; 
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID HAVING COUNT(*) > 1;
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1;
SELECT Orchestra_ID, Year_of_Founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Orchestra_ID HAVING count(*) > 1;
SELECT DISTINCT orchestra.Year_of_Founded FROM orchestra INNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1;
SELECT COUNT(*)  FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(DISTINCT ID) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT Count(*) FROM Highschooler;
SELECT Count(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler; 
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT grade FROM Highschooler; 
SELECT ID, name, grade FROM Highschooler;
SELECT `grade` FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT  Highschooler.grade FROM Highschooler 
SELECT Highschooler.grade FROM Highschooler;
SELECT Highschooler.ID, Highschooler.grade FROM Highschooler;
SELECT Highschooler.ID, Highschooler.grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = "Kyle";
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10; 
SELECT name FROM Highschooler WHERE grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT Highschooler.ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle';
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT  COUNT(*) FROM Highschooler WHERE grade IN (9, 10) 
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade ORDER BY highschooler_count DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) FROM Highschooler GROUP BY grade HAVING count(*) >= 4
SELECT Friend.student_id, count(*) FROM Friend GROUP BY Friend.student_id;
SELECT Friend.student_id, COUNT(*) FROM Friend GROUP BY Friend.student_id;
SELECT Friend.student_id, COUNT(*) FROM Friend GROUP BY Friend.student_id;
SELECT Highschooler.ID, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Friend.student_id, COUNT(*) FROM Friend GROUP BY Friend.student_id;
SELECT count(*), student_id FROM Friend GROUP BY student_id;
SELECT COUNT(*), student_id FROM Friend GROUP BY student_id;
SELECT count(*), student_id FROM Friend GROUP BY student_id;
SELECT count(*), student_id FROM Friend GROUP BY student_id;
SELECT COUNT(*), student_id FROM Friend GROUP BY student_id;
SELECT Highschooler.name, count(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, count(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, count(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM (SELECT student_id, count(*) AS num_friends      FROM Friend      GROUP BY student_id      ORDER BY num_friends DESC      LIMIT 1) )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler WHERE ID = (SELECT student_id       FROM Friend       GROUP BY student_id       ORDER BY COUNT(*) DESC       LIMIT 1);
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN (   SELECT student_id, COUNT(friend_id) AS friends_count   FROM Friend   GROUP BY student_id   ORDER BY friends_count DESC   LIMIT 1 ) AS max_friends ON Highschooler.ID = max_friends.student_id;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT student_id   FROM Friend   GROUP BY student_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Highschooler.name FROM Highschooler WHERE ID = (SELECT student_id       FROM Friend       GROUP BY student_id       ORDER BY COUNT(*) DESC       LIMIT 1);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT student_id              FROM Friend              GROUP BY student_id              ORDER BY COUNT(*) DESC              LIMIT 1);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN   (SELECT friend_id   FROM Friend   GROUP BY friend_id   ORDER BY COUNT(*) DESC   LIMIT 1);
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3;
SELECT  Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3; 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (   SELECT ID   FROM Highschooler   WHERE name = 'Kyle' )
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (   SELECT DISTINCT student_id   FROM Friend )
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT friend_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT friend_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id INNER JOIN Likes ON Highschooler.ID = Likes.liked_id;
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)
SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;
SELECT  Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT f.student_id FROM Friend f)  AND Highschooler.ID IN (SELECT l.liked_id FROM Likes l) 
SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.ID IN (SELECT friend_id FROM Friend) GROUP BY Highschooler.ID;
SELECT Friend.student_id FROM Friend INNER JOIN Likes ON Friend.student_id = Likes.student_id
SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id 
SELECT Friend.student_id FROM Friend INNER JOIN Likes ON Friend.friend_id = Likes.liked_id
SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id 
SELECT DISTINCT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes) AND friend_id IN (SELECT liked_id FROM Likes); 
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT friend_id FROM Friend) AND Highschooler.ID IN (SELECT liked_id FROM Likes);
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.liked_id = Highschooler.ID
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT f.student_id   FROM Friend f   UNION   SELECT l.liked_id   FROM Likes l )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT DISTINCT F1.student_id   FROM Friend F1   WHERE F1.student_id IN (     SELECT L.student_id     FROM Likes L   ) )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id
SELECT Highschooler.name FROM Highschooler WHERE ID IN (   SELECT DISTINCT f.student_id   FROM Friend f   INNER JOIN Likes l ON f.student_id = l.student_id )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT f1.student_id   FROM Friend f1   INTERSECT   SELECT l1.student_id   FROM Likes l1 ) 
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN   (SELECT F1.student_id   FROM Friend F1   WHERE F1.student_id IN (SELECT L1.student_id               FROM Likes L1))   AND Highschooler.ID IN   (SELECT L2.liked_id   FROM Likes L2   WHERE L2.liked_id IN (SELECT F2.friend_id             FROM Friend F2))
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT f.student_id              FROM Friend f              WHERE f.student_id IN (SELECT l.student_id                         FROM Likes l))  AND Highschooler.ID IN (SELECT l.student_id              FROM Likes l);
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;
SELECT student_id, count(*) FROM Likes GROUP BY student_id;
SELECT student_id, count(*) FROM Likes GROUP BY student_id;
SELECT student_id, count(liked_id) FROM Likes GROUP BY student_id;
SELECT student_id, count(*) FROM Likes GROUP BY student_id;
SELECT COUNT(*), student_id FROM Likes GROUP BY student_id;
SELECT student_id, count(*) FROM Likes GROUP BY student_id;
SELECT student_id, count(*) FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_ID GROUP BY Highschooler.name;
SELECT Highschooler.name, count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Likes.student_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Likes.student_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT Likes.liked_id   FROM Likes   GROUP BY Likes.liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler, Likes WHERE Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING count(*) >= 2;
SELECT Highschooler.name FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING count(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.name HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING count(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id AND Highschooler.grade > 5 AND (SELECT count(*) FROM Friend WHERE student_id = Highschooler.ID) >= 2;
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID          FROM Highschooler          WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) 
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id;
SELECT ROUND(AVG(grade), 2) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT  AVG(grade) FROM Highschooler WHERE ID IN   (SELECT student_id FROM Friend    UNION    SELECT friend_id FROM Friend) 
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id 
SELECT avg(grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id;
SELECT ROUND(AVG(H.grade), 2) FROM Highschooler H INNER JOIN Friend F ON H.ID = F.student_id  
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT MIN(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state
SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state 
SELECT DISTINCT Owners.state FROM Owners WHERE EXISTS (   SELECT 1   FROM Professionals   WHERE Professionals.state = Owners.state )
SELECT DISTINCT p.state FROM Professionals p INNER JOIN Owners o ON p.state = o.state;
SELECT DISTINCT state FROM Owners WHERE state IN (SELECT state FROM Professionals)
SELECT state FROM Owners JOIN Professionals ON Owners.state = Professionals.state
SELECT DISTINCT state FROM Owners WHERE state IN (SELECT state FROM Professionals);
SELECT AVG(age) FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT AVG(age) FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT avg(strftime('%Y', 'now') - strftime('%Y', date_of_birth)) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments)
SELECT ROUND(AVG(age), 2) FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id                        FROM Treatments                        GROUP BY professional_id                        HAVING COUNT(*) > 2)
SELECT Professional_id,last_name,cell_number FROM Professionals WHERE state = "Indiana" OR professional_id IN (  SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments            GROUP BY professional_id            HAVING count(*) > 2);
SELECT Professionals.professional_id, last_name, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT Professionals.professional_id, last_name, cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE state = 'Indiana' OR Treatments.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'IN' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' OR (SELECT count(*) FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id) > 2;
SELECT Professional_id, last_name, Cell_number FROM Professionals WHERE state='Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)
SELECT professional_id,last_name,cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING count(*) > 2)
SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals WHERE professionals.state = 'Indiana' OR   (SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;
SELECT dogs.name from dogs where   dog_id in (     select dog_id     from treatments     group by dog_id     having sum(cost_of_treatment) <= 1000   ) 
SELECT Dogs.name FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id HAVING SUM(Treatments.cost_of_treatment) <= 1000 OR SUM(Treatments.cost_of_treatment) IS NULL;
SELECT `name` FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments   GROUP BY dog_id   HAVING SUM(cost_of_treatment) <= 1000 )
SELECT Dogs.name FROM Dogs WHERE Dogs.owner_id IN   (SELECT Owners.owner_id   FROM Owners   JOIN Treatments ON Owners.owner_id = Treatments.owner_id   GROUP BY Owners.owner_id   HAVING SUM(Treatments.cost_of_treatment) <= 1000)
SELECT Dogs.name FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING IFNULL(SUM(Treatments.cost_of_treatment), 0) <= 1000;
SELECT Dogs.name FROM Dogs INNER JOIN Owners ON Dogs.owner_id = Owners.owner_id INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE (SELECT SUM(cost_of_treatment) FROM Treatments WHERE Treatments.dog_id = Dogs.dog_id) <= 1000;
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs);
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;
SELECT owners.first_name FROM owners UNION SELECT professionals.first_name FROM professionals EXCEPT SELECT dogs.name FROM dogs;
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs; 
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs); 
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL;
SELECT Professionals.professional_id, role_code, email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.professional_id IS NULL;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL;
SELECT Professional_id, role_code, email_address FROM Professionals WHERE Professional_id NOT IN (   SELECT DISTINCT Professional_id   FROM Treatments )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id,role_code,email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN (SELECT owner_id, COUNT(*) FROM dogs GROUP BY owner_id ORDER BY dog_count DESC LIMIT 1) AS max_dog_count ON owners.owner_id = max_dog_count.owner_id;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners WHERE Owners.owner_id = (SELECT owner_id             FROM Dogs             GROUP BY owner_id             ORDER BY COUNT(*) DESC             LIMIT 1);
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id          FROM Dogs          GROUP BY owner_id          ORDER BY COUNT(*) DESC          LIMIT 1)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Dogs.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals WHERE Professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
SELECT Professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2);
SELECT Professional_id, role_code, first_name FROM Professionals WHERE Professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT Professional_id, Role_code, First_name FROM Professionals as P JOIN Treatments as T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(*) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id               FROM Treatments               GROUP BY professional_id               HAVING COUNT(*) >= 2);
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT Professional.professional_id, Professional.role_code, Professional.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Treatments.professional_id HAVING COUNT(*) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id             FROM Treatments             GROUP BY professional_id             HAVING COUNT(*) >= 2)
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code           FROM Dogs           GROUP BY breed_code           ORDER BY COUNT(*) DESC           LIMIT 1);
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code           FROM Dogs           GROUP BY breed_code           ORDER BY COUNT(*) DESC           LIMIT 1);
SELECT breed_name, COUNT(*) FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY quantity DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN (   SELECT owner_id, COUNT(*) as num_treatments   FROM Treatments   GROUP BY owner_id   ORDER BY num_treatments DESC   LIMIT 1 ) AS MostTreatments ON Owners.owner_id = MostTreatments.owner_id;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 )
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment)   LIMIT 1 );
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 )
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (SELECT treatment_type_code                FROM Treatments                GROUP BY treatment_type_code                ORDER BY SUM(cost_of_treatment)                LIMIT 1)
SELECT Treatment_Types.treatment_type_description FROM  Treatment_Types  LEFT JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY  Treatment_Types.treatment_type_description ORDER BY  SUM(Treatments.cost_of_treatment) ASC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Charges ON Treatments.charge_id = Charges.charge_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id INNER JOIN (   SELECT owner_id, SUM(charge_amount) AS total_charge   FROM Charges   GROUP BY owner_id ) AS owner_charges ON Owners.owner_id = owner_charges.owner_id ORDER BY owner_charges.total_charge DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Charges ON Treatments.charge_id = Charges.charge_id GROUP BY Owners.owner_id ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN (     SELECT owner_id, sum(charge_amount) as total_charge_amount     FROM charges     JOIN treatments ON charges.charge_id = treatments.charge_id     JOIN dogs ON treatments.dog_id = dogs.dog_id     GROUP BY owner_id     ORDER BY total_charge_amount DESC     LIMIT 1   ) as total_spent ON owners.owner_id = total_spent.owner_id;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Professional_id, cell_number FROM Professionals INNER JOIN (SELECT professional_id, COUNT(DISTINCT treatment_type_code) FROM Treatments GROUP BY professional_id) AS T ON Professionals.professional_id = T.professional_id WHERE T.type_count >= 2;
SELECT Professional_id,cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (  SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) >= 2 );
SELECT Professional_id, cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT Professional_id, cell_number FROM Professionals WHERE Professional_id IN (SELECT Professional_id FROM Treatments GROUP BY Professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)
SELECT Professional_id, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (  SELECT professional_id  FROM Treatments  GROUP BY professional_id  HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professional_id, cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professional_id, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) > 1;
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING AVG(cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM Treatments) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT professional_id, first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments LEFT JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Breeds   WHERE breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1   ) );
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name ORDER BY COUNT(Breeds.breed_code) ASC LIMIT 1;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code HAVING COUNT(*) = 1)
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = (   SELECT breed_name   FROM Breeds   GROUP BY breed_name   ORDER BY COUNT(*) ASC   LIMIT 1   ) ORDER BY Treatments.date_of_treatment ASC;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds ORDER BY COUNT(*) LIMIT 1)
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT first_name, name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs WHERE EXISTS (   SELECT 1   FROM Treatments   WHERE Treatments.dog_id = Dogs.dog_id )
SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Arriving date and departing date of the dogs who have gone through a treatment can be obtained using the following SQLite SQL query:
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT t.id,date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin';
SELECT professionals.email_address FROM professionals WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT professionals.email_address FROM professionals WHERE professionals.state = 'Hawaii' OR professionals.state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT Professionals.email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT count(*) FROM Dogs WHERE dog_id in (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT count(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT Count(*) FROM Treatments;
SELECT COUNT(*) FROM Treatments 
SELECT count(*) FROM Treatments;
SELECT COUNT(*) FROM Treatments;
SELECT count(*) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT count(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT count(distinct professional_id) FROM Treatments;
SELECT count(distinct professional_id) FROM Treatments;
SELECT count(distinct professional_id) FROM Treatments;
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'  
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT Professional.professional_id,Professional.role_code,Professional.street,Professional.city,Professional.state FROM Professionals WHERE Professional.city LIKE '%West%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%'
SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT ​SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT  COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) 
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments;
SELECT MAX(cost_of_treatment) FROM Treatments;
SELECT MAX(cost_of_treatment) FROM Treatments
SELECT MAX(treatments.cost_of_treatment) FROM treatments WHERE treatments.date_of_treatment = (SELECT MAX(date_of_treatment) FROM treatments);
SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT MAX(date_of_treatment), cost_of_treatment FROM Treatments;
SELECT Charges.charge_amount FROM Treatments JOIN Charges ON Treatments.treatment_id = Charges.charge_id ORDER BY Treatments.date_of_treatment DESC LIMIT 1;
SELECT MAX(date_of_treatment), cost_of_treatment FROM Treatments;
SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT treatments.cost_of_treatment FROM treatments WHERE treatments.date_of_treatment = (SELECT MAX(date_of_treatment) FROM treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments) 
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE abandoned_yn = 'N')
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT(owner_id) FROM Dogs WHERE date_departed IS NULL)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NOT NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL) 
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL) 
SELECT COUNT(DISTINCT Professionals.professional_id) - COUNT(DISTINCT Treatments.professional_id) FROM Professionals;
SELECT count(*) from Professionals where professional_id not in (select distinct professional_id from Treatments)
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(DISTINCT professional_id) - COUNT(DISTINCT professional_id WHERE treatment_id IS NOT NULL) FROM Professionals;
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments) 
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT dog_name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1
SELECT dog_id,name,age,weight FROM Dogs WHERE abandoned_yn = 1;
SELECT AVG(age) FROM Dogs; 
SELECT  AVG(age) FROM Dogs; 
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs; 
SELECT The SQL query to retrieve the average age of all the dogs from the database would be:
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs; 
SELECT  AVG(age) FROM Dogs 
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(date('now') - date_of_birth) FROM Dogs;
SELECT MAX(age) - MIN(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges);
SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT all_professional_contacts FROM Professionals;
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals;
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals
SELECT breeds.breed_code, breeds.breed_name, sizes.size_code, sizes.size_description FROM breeds, sizes
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds CROSS JOIN Sizes;
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds, Sizes
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds CROSS JOIN Sizes;
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds CROSS JOIN Sizes;
SELECT Distinct breed type and size type combinations for dogs can be found using the following SQLite SQL query:
SELECT breed_name, size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code GROUP BY breed_name, size_description;
SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professional.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT count(*) FROM singer; 
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT count(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer; 
SELECT Birth_Year, Citizenship FROM singer; 
SELECT birth_year, citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> "France";
SELECT  Name FROM singer WHERE Citizenship <> 'France'; 
SELECT Name FROM singer WHERE Citizenship != "France";
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship != "France";
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French'
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE NOT Citizenship = 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT  Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1; 
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT max(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, COUNT(*) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship; 
SELECT Citizenship, count(*) FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(*), Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT COUNT(Citizenship), Citizenship FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*), Citizenship FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT singer.Citizenship, COUNT(*) FROM singer GROUP BY singer.Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT singer.Citizenship, max(singer.Net_Worth_Millions) FROM singer group by singer.Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM Singer GROUP BY Citizenship;
SELECT  Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship; 
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT  Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship; 
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship; 
SELECT citizenship, max(Net_Worth_Millions) FROM singer GROUP BY citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT  DISTINCT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000; 
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Distinct Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;
SELECT singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1); 
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING count(*) > 1 ) 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 )
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(song.Song_ID) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1);
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT `Citizenship` FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 AND singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 AND singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT count(*) FROM Other_Available_Features;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT count(*) FROM Other_Available_Features;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE feature_name = 'AirCon';
SELECT feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE feature_name = 'AirCon';
SELECT feature_type_name FROM Other_Available_Features oaf JOIN Ref_Feature_Types rft ON oaf.feature_type_code = rft.feature_type_code WHERE feature_name = 'AirCon';
SELECT Ra_Feature_Types.feature_type_name From Other_Available_Features INNER JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon'
SELECT   ref.feature_type_name FROM Other_Available_Features av JOIN Ref_Feature_Types ref ON av.feature_type_code = ref.feature_type_code WHERE av.feature_name = 'AirCon';
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = [insert code here];
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = 'belonging_code';
SELECT Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = 'code';
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = 'code';
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = 'that code';
SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code IN ('APT', 'HSE') AND Properties.room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'hse' OR Properties.property_type_code = 'apt') AND Properties.room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'APT' OR Properties.property_type_code = 'HSE') AND Properties.room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'apt' OR Properties.property_type_code = 'hse') AND Properties.room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'apt' OR Properties.property_type_code = 'hse') AND Properties.room_count > 1;