SELECT COUNT(*) FROM singer WHERE Is_male = 0;
SELECT COUNT(*) FROM singer WHERE Is_male = 0;
SELECT COUNT(*) as vocalists FROM singer WHERE Is_male = 1;
SELECT COUNT(*) FROM singer WHERE Is_male = 'False';
SELECT COUNT(*) FROM singer WHERE Is_male = '0';
SELECT COUNT(*) as total_musicians FROM singer 
SELECT COUNT(*) as total_musicians FROM singer;
SELECT COUNT(*) FROM singer 
SELECT  COUNT(*) FROM singer; 
SELECT COUNT(*) as total_musicians FROM singer;
SELECT singer.Name, singer.Country, singer.Age FROM singer WHERE singer.Is_male = false ORDER BY singer.Age DESC;
SELECT s.Name, s.Country, s.Age FROM singer s WHERE s.Is_male = 1 ORDER BY s.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer WHERE singer.Is_male = 1 ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer WHERE singer.Is_male = False ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer WHERE singer.Is_male = false ORDER BY singer.Age DESC;
SELECT Singer.Name, Singer.Country, Singer.Age FROM singer ORDER BY Singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;
SELECT AVG(s.Age) as average_age, MIN(s.Age) as minimum_age, MAX(s.Age) as maximum_age FROM singer s WHERE s.Country = 'France'
SELECT  SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' 
SELECT  AVG(s.Age) AS average_age, MIN(s.Age) AS minimum_age, MAX(s.Age) AS maximum_age FROM singer s WHERE s.Country = 'France' 
SELECT AVG(singer.Age) AS average_age,     MIN(singer.Age) AS min_age,     MAX(singer.Age) AS max_age FROM singer WHERE singer.Country = 'France'; 
SELECT `AVG(s.Age) AS average_age, MIN(s.Age) AS minimum_age, MAX(s.Age) AS maximum_age FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_id WHERE s.Country = 'France' AND s.Is_male = 1;`
SELECT  AVG(s.Age) AS average_age,  MIN(s.Age) AS minimum_age,  MAX(s.Age) AS maximum_age FROM singer s WHERE s.Country = 'France'; 
SELECT  AVG(s.Age) as average_age, MIN(s.Age) as minimum_age, MAX(s.Age) as maximum_age FROM singer s WHERE s.Country = 'France'; 
SELECT  SELECT AVG(s.Age), MIN(s.Age), MAX(s.Age)  FROM singer s  WHERE s.Country = 'France';
SELECT  AGE AS Average_Age,Country, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'; 
SELECT  Average(s.age), Min(s.age), Max(s.age) FROM singer s WHERE s.Country = 'France' 
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer) 
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer WHERE singer.Age = (SELECT MIN(Age) FROM singer)
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT s.Country FROM singer s WHERE s.Is_male = 1 AND s.Age > 20;
SELECT singer.Country FROM singer WHERE Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT singer.Country FROM singer WHERE singer.Age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT singer.Country, COUNT(*) AS num_vocalists FROM singer GROUP BY singer.Country;
SELECT   stadium.Location as State,   singer.Country,   COUNT(singer.Singer_ID) as Number_of_vocalists FROM   singer_in_concert   INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID   INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID   INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY   stadium.Location,   singer.Country;
SELECT s.Country, COUNT(*) AS quantity FROM singer s GROUP BY s.Country;
SELECT singer.Country, COUNT(*) AS quantity FROM singer WHERE singer.Is_male = 0 GROUP BY singer.Country;
SELECT stadium.Location, COUNT(singer.Country) AS num_vocalists FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY stadium.Location, singer.Country;
SELECT singer.Country, COUNT(*) AS Quantity FROM singer GROUP BY singer.Country;
SELECT Singer.Country, COUNT(*) AS Quantity FROM Singer GROUP BY Singer.Country;
SELECT Country, COUNT(*) AS Number_of_Musicians FROM singer GROUP BY Country; 
SELECT singer.Country, COUNT(*) as quantity FROM singer GROUP BY singer.Country;
SELECT singer.Country, COUNT(*) FROM singer GROUP BY singer.Country;
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT s.song_name FROM singer s WHERE s.age > (SELECT AVG(age) FROM singer)
SELECT  s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer) 
SELECT singer.Song_Name FROM singer WHERE singer.Age > (SELECT AVG(Age) FROM singer)
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer); 
SELECT Stadium_ID, Name, Capacity FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT Name, Location FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Stadium_ID, stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Stadium_ID, stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000;
SELECT stadium.Stadium_ID, stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;
SELECT  stadium.Name, stadium.Location, stadium.Capacity FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000; 
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT stadium.Name, stadium.Location, stadium.Capacity FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000; 
SELECT stadium.Name, stadium.Location, count(*) as Quantity FROM stadium WHERE stadium.Capacity >= 5000 AND stadium.Capacity <= 10000;
SELECT  AVG(Capacity) AS average_seats,    MAX(Capacity) AS max_seats FROM stadium;
SELECT AVG(Capacity) AS average_seats, MAX(Capacity) AS maximum_seats FROM stadium; 
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT Average, max(capacity) FROM stadium;
SELECT  AVG(Capacity) AS average_seats, MAX(Capacity) AS max_seats FROM stadium; 
SELECT Average, Highest FROM stadium;
SELECT  SELECT AVG(Capacity) AS average_seats, MAX(Capacity) AS max_seats FROM stadium; 
SELECT    AVG(Capacity) AS average_seats,   MAX(Capacity) AS max_seats FROM stadium;
SELECT AVG(Capacity) AS average_seats, MAX(Capacity) AS maximum_seats FROM stadium; 
SELECT avg(Capacity) as average_seats, max(Capacity) as maximum_seats FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT  stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(stadium.Average) FROM stadium); 
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT   stadium.Name,   stadium.Capacity FROM   stadium WHERE   stadium.Average = (SELECT MAX(Average) FROM stadium);
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium)
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Stadium_ID IN (   SELECT Stadium_ID   FROM stadium   WHERE Average = (     SELECT MAX(Average)     FROM stadium   ) )
SELECT stadium.Name, stadium.Capacity FROM stadium WHERE stadium.Average = (SELECT MAX(Average) FROM stadium) 
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT count(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT count(*) FROM concert WHERE Year = 2014 OR Year = 2015;
SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);
SELECT stadium.Name, COUNT(concert_ID) as num_shows FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_shows FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(concert.concert_ID) as numberOfShows FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, count(concert.concert_ID) as quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_shows FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS show_count FROM stadium LEFT JOIN concert ON stadium.stadium_ID = concert.stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert.concert_ID) AS shows_played FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID;
SELECT   stadium.Name, COUNT(concert.concert_ID) AS Num_Shows   FROM stadium   LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID   GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(concert_ID) AS Number_of_Shows FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID, stadium.Name;
SELECT stadium.Name, count(*) AS quantity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT stadium.Name, COUNT(*) as quantity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY quantity DESC LIMIT 1;
SELECT stadium.Name, COUNT(concert.concert_ID) AS Num_Shows FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name ORDER BY Num_Shows DESC LIMIT 1;
SELECT  stadium.Name, COUNT(concert.concert_ID) as num_shows FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY num_shows DESC LIMIT 1; 
SELECT stadium.Name, count(concert.concert_ID) as num_shows FROM concert INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name ORDER BY num_shows DESC LIMIT 1;
SELECT  stadium.Name, count(*) AS num_shows FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name ORDER BY num_shows DESC LIMIT 1; 
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID, s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT stadium.Name, COUNT(concert.concert_ID) AS num_shows FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name ORDER BY num_shows DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity AS Number_of_seats FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name, s.Capacity AS "Number of Seats" FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Name, s.Capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year, COUNT(*) as quantity FROM concert GROUP BY Year ORDER By quantity DESC LIMIT 1;
SELECT Year, COUNT(*) AS quantity FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year, COUNT(*) as quantity FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT Year, COUNT(*) AS num_shows FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Year, count(*) as Quantity FROM concert GROUP BY Year ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(concert_ID) AS show_count, Year FROM concert GROUP BY Year ORDER BY show_count DESC LIMIT 1;
SELECT COUNT(*) as quantity, Year FROM concert GROUP BY Year ORDER BY quantity DESC LIMIT 1;
SELECT YEAR, COUNT(*) AS quantity FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Stadium_ID, COUNT(*) as quantity FROM concert GROUP BY Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) AS quantity, Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT Stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.cocert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL;
SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Stadium_ID IS NULL;
SELECT singer.Country FROM singer WHERE singer.Age > 40 OR singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 UNION SELECT singer.Country FROM singer WHERE singer.Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 INTERSECT SELECT singer.Country FROM singer WHERE singer.Age < 30
SELECT Country FROM singer WHERE Age > 40 UNION SELECT Country FROM singer WHERE Age < 30;
SELECT singer.Country FROM singer WHERE singer.Age > 40 OR singer.Age < 30;
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN   (SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014);
SELECT  stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT c.Stadium_ID   FROM concert c   WHERE c.Year = 2014 ) 
SELECT `Name` FROM `stadium` WHERE `Stadium_ID` NOT IN (   SELECT `Stadium_ID`   FROM `concert`   WHERE `Year` = 2014 )
SELECT `Name` FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert WHERE Year = 2014)
SELECT  SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 ); 
SELECT  Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014); 
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 )
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT Stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year <> 2014 OR concert.Year IS NULL;
SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN (   SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2014 );
SELECT concert.concert_Name, concert.Theme, count(singer.Singer_ID) as vocalists_quantity FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as num_vocalists FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) AS Vocalists FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID LEFT JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) AS number_of_vocalists FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as quantity FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as quantity FROM concert INNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Number_of_Singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) as Singer_Count FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Singer_Count FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS shows FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, count(*) AS number_of_shows FROM singer_in_concert JOIN singer ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_shows FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.Singer_ID) as total_shows FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_shows FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) AS Number_of_shows FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) as Num_Shows FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(concert.concert_ID) AS show_quantity FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS quantity FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE YEAR = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT singer_in_concert.Singer_ID   FROM singer_in_concert   JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID   WHERE singer_in_concert.Song_Name LIKE '%Hey%' )
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN  (SELECT singer_ID  FROM singer  WHERE Song_Name LIKE '%Hey%');
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN   (SELECT Singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%')
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID               FROM singer               WHERE Song_Name LIKE '%Hey%');
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT Singer_ID   FROM singer   WHERE Song_Name LIKE '%Hey%' )
SELECT Singer.Name, Singer.Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN   (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%')
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%');
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year = 2014 AND concert.Stadium_ID IN   (SELECT Stadium_ID FROM concert WHERE Year = 2015)
SELECT Name, Location FROM stadium WHERE Stadium_ID IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 ) AND Stadium_ID IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2015 );
SELECT DISTINCT stadium.Name, stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year = 2014 AND concert.Stadium_ID IN   (SELECT concert.Stadium_ID   FROM concert   WHERE concert.Year = 2015)
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT Stadium.Name, Stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT YEAR) = 2;
SELECT stadium.Name, stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT s.Name, s.Location FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;
SELECT DISTINCT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2; 
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) AS Num_Musical_Performances FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium) 
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1)
SELECT COUNT(*) AS quantity FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 ) 
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   WHERE Capacity = (     SELECT MAX(Capacity)     FROM stadium   ) )
SELECT count(*) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 );
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10; 
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'puppy' ORDER BY Pets.pet_age LIMIT 1;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'puppy' ORDER BY Pets.pet_age LIMIT 1;
SELECT pet_weight FROM Pets WHERE pet_type = 'puppy' ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'puppy' ORDER BY pet_age LIMIT 1;
SELECT Pets.weight FROM Pets WHERE Pets.PetType = 'Puppy' ORDER BY Pets.pet_age LIMIT 1;
SELECT count(*) as quantity FROM Pets WHERE PetType = 'puppy' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'puppy')
SELECT MIN(pet_age) AS min_pet_age, PetType, weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'puppy'
SELECT MIN(weight) as min_weight FROM Pets WHERE PetType = 'puppy'
SELECT COUNT(*) AS quantity FROM Pets WHERE PetType = 'puppy' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'puppy');
SELECT count(*) as quantity FROM Pets WHERE PetType = 'puppy'
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType;
SELECT PetType, MAX(weight) as max_weight FROM Pets GROUP BY PetType;
SELECT Pets.petType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.petType;
SELECT PetType, MAX(weight) as max_weight FROM Pets GROUP BY PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS maximum_weight FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets WHERE Pets.PetType = 'domestic' GROUP BY Pets.PetType;
SELECT Pets.PetType as Species, MAX(Pets.weight) as Maximum_Weight, Pets.pet_age as Category FROM Pets WHERE Pets.PetType = 'Dog' OR Pets.PetType = 'Cat' GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) as maximum_weight FROM Pets WHERE Pets.PetType = 'domestic' GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets WHERE Pets.PetType IN ('dog', 'cat', 'rabbit', 'bird') GROUP BY Pets.PetType;
SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets WHERE Pets.PetType IN ('dog', 'cat', 'bird', 'fish') GROUP BY Pets.PetType;
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND p.pet_age < 1 AND s.Sex = 'F';
SELECT COUNT(*) FROM Has_Pet hp INNER JOIN Pets p ON hp.PetID = p.PetID INNER JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'F'
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'F';
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = 'F' AND Pets.PetType = 'Puppy'
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = 'F' AND Pets.PetType = 'puppy'
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'female'
SELECT count(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'puppy' AND Student.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'female';
SELECT count(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'puppy' AND s.Sex = 'female';
SELECT COUNT(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'puppy' AND s.Sex = 'female';
SELECT COUNT(DISTINCT pet_type) AS number_of_species FROM Pets WHERE pet_type = 'domestic';
SELECT COUNT(DISTINCT PetType) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'domestic';
SELECT COUNT(DISTINCT PetType)  FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets WHERE PetType = 'domestic';
SELECT COUNT(DISTINCT PetType) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'domestic';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) AS species_count FROM Pets;
SELECT Student.Fname FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT s.Fname FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname, Student.LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy')
SELECT Student.Fname, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy')
SELECT Student.FName, Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.FName, Student.LName HAVING COUNT(*) = 2
SELECT Student.Fname, Student.LName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.Fname, Student.LName HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.FName, Student.LName FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.FName, Student.LName HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.LName, Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.LName, Student.FName HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.LName, Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.LName, Student.FName HAVING COUNT(*) = 2;
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.FName FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' OR Pets.PetType = 'puppy' GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'kitten' OR p.PetType = 'puppy' GROUP BY s.StuID, s.Fname HAVING COUNT(DISTINCT p.PetType) = 2;
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' OR Pets.PetType = 'puppy' GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT Student.Fname FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('kitten', 'puppy') GROUP BY Student.StuID, Student.Fname HAVING COUNT(DISTINCT Pets.PetType) = 2;
SELECT   SELECT Major, Age   FROM Student   WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'kitten');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'kitten' )
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE PetType='kitten')
SELECT Major, Age FROM Student WHERE StuID NOT IN   (SELECT StuID    FROM Has_Pet    JOIN Pets ON Has_Pet.PetID = Pets.PetID    WHERE PetType = 'kitten'); 
SELECT Student.Major, Pets.pet_age FROM Student LEFT JOIN Has_Pet ON Student.StuID=Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType<>'kitten' OR Pets.PetType IS NULL
SELECT Student.Major, Pets.pet_age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten';
SELECT s.Major, p.pet_age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'kitten'
SELECT Student.Major, Pets.pet_age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL
SELECT Student.Major, Pets.pet_age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten';
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'kitten';
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten');
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT Has_Pet.StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' )
SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'kitten' OR Pets.PetType IS NULL;
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (   SELECT has_pet.StuID   FROM Has_Pet   JOIN Pets ON has_pet.PetID = Pets.PetID   WHERE Pets.PetType = 'kitten' ) 
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten');
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN (SELECT Student.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN (SELECT Student.StuID              FROM Student              JOIN Has_Pet ON Student.StuID = Has_Pet.StuID              JOIN Pets ON Has_Pet.PetID = Pets.PetID              WHERE Pets.PetType = 'cat')
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy' AND Student.StuID NOT IN  (SELECT Student.StuID  FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID  JOIN Pets ON Has_Pet.PetID = Pets.PetID  WHERE Pets.PetType = 'cat');
SELECT s.Fname, s.Age FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID INNER JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'puppy' AND s.StuID NOT IN (SELECT s.StuID FROM Student s           INNER JOIN Has_Pet hp ON s.StuID = hp.StuID           INNER JOIN Pets p ON hp.PetID = p.PetID           WHERE p.PetType = 'cat')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND NOT EXISTS (SELECT 1 FROM Has_Pet         JOIN Pets ON Has_Pet.PetID = Pets.PetID         WHERE Has_Pet.StuID = Student.StuID         AND Pets.PetType = 'kitten')
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten')
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student              JOIN Has_Pet ON Student.StuID = Has_Pet.StuID              JOIN Pets ON Has_Pet.PetID = Pets.PetID              WHERE Pets.PetType = 'kitten')
SELECT Student.Fname FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten')
SELECT Student.FName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Pets.PetType != 'kitten';
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.pet_type, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.pet_age, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.pet_age, Pets.weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetType, Pets.pet_age, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT To retrieve the id and weight of animals older than 1, you can use the following SQL query:
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS max_age FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS max_age FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS maximum_age FROM Pets GROUP BY Pets.PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS maximum_age FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS max_age FROM Pets GROUP BY Pets.PetType;
SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS maximum_age FROM Pets GROUP BY Pets.PetType;
SELECT PetType, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, avg(weight) as average_weight FROM Pets GROUP BY PetType;
SELECT Pets.PetType, AVG(Pets.weight) AS average_weight FROM Pets GROUP BY Pets.PetType;
SELECT PetType, AVG(weight) as average_weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as average_weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT petType, AVG(weight) AS average_weight FROM Pets GROUP BY petType;
SELECT PetType, AVG(weight) AS average_weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY PetType;
SELECT Pets.PetType, AVG(Pets.weight) AS average_weight FROM Pets GROUP BY Pets.PetType;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.FName, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Pets.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT COUNT(*), s.StuID FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID GROUP BY s.StuID;
SELECT Student.StuID, COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT COUNT(*) AS quantity, Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT Student.StuID, COUNT(*) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID
SELECT Student.StuID, count(*) AS num_animals FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT s.StuID, COUNT(*) AS Quantity FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID;
SELECT Student.StuID, COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(*) as quantity FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(Pets.PetID) AS quantity FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Student.StuID;
SELECT Student.FName, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.FName, Student.Sex HAVING COUNT(*) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)
SELECT Fname, Sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(*) > 1 )
SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1) 
SELECT Student.Fname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT Student.FName, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID, Student.FName, Student.Sex HAVING COUNT(*) > 1;
SELECT Lname, Fname, Sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(*) > 1 )
SELECT Student.Fname, Student.Sex FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(*) > 1;
SELECT    Student.LName FROM   Student JOIN   Has_Pet ON Student.StuID = Has_Pet.StuID JOIN   Pets ON Has_Pet.PetID = Pets.PetID WHERE   Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT S.LName FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'kitten' AND P.pet_age = 3;
SELECT Fname, LName FROM Student WHERE StuID IN   (SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'kitten' AND pet_age = 3);
SELECT    Student.LName FROM   Has_Pet   JOIN Student ON Has_Pet.StuID = Student.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE   Pets.PetType = 'kitten'   AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT Student.LName FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3;
SELECT AVG(Age) as average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT  AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT  AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet) 
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
'content'
content'
SELECT COUNT(*) FROM continents;
SELECT  count(*) FROM continents; 
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT count(*) FROM continents;
SELECT Count(*) FROM continents;
SELECT COUNT(ContId) FROM continents;
SELECT count(*) FROM continents;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as num_of_nations FROM continents INNER JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as Num_of_Nations FROM continents INNER JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) as NumOfNations FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as num_nations FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as quantity FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryName) as StateCount FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryId) as State_Count FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) as StateQuantity FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS StateQuantity FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT continents.ContId, continents.Continent, count(countries.CountryName) AS States FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT COUNT(*) as Quantity FROM countries;
SELECT COUNT(DISTINCT CountryName) FROM countries;
SELECT COUNT(DISTINCT Country) AS States FROM car_makers;
SELECT Count(*) FROM countries
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) as quantity FROM countries;
SELECT count(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT COUNT(DISTINCT CountryId) FROM countries;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS number_of_models FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, count(*) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(*) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.ModelId) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) as NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS Quantity FROM car_makers LEFT JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, count(model_list.ModelId) as quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.Horsepower LIMIT 1;
SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Make, Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT model_list.Model FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE ModelId IN (SELECT Id FROM cars_data WHERE Year = 1970)))
SELECT Maker FROM car_makers  INNER JOIN model_list ON car_makers.Id = model_list.Maker  INNER JOIN car_names ON model_list.Model = car_names.Model  INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE YEAR = 1970;
SELECT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM cars_data     WHERE Year = 1970   ) )
SELECT car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970;
SELECT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE ModelId IN (       SELECT Id       FROM cars_data       WHERE Year = 1970     )   ) )
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year LIMIT 1;
SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT car_makers.Maker, cars_data.Year FROM car_makers INNER JOIN car_names ON car_makers.Id = car_names.MakeId INNER JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, MIN(cars_data.Year) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id;
SELECT car_makers.Maker, MIN(cars_data.Year) as Earliest_Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker ORDER BY Earliest_Year LIMIT 1;
SELECT car_makers.Maker, MIN(cars_data.Year) as Earliest_year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker
SELECT car_makers.Maker, MIN(cars_data.Year) as EarliestYear FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_makers.Maker;
SELECT car_makers.Maker, MIN(cars_data.Year) as EarliestYear FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY car_makers.Maker
SELECT DISTINCT cars_data.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980;
SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980;
SELECT DISTINCT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980;
SELECT DISTINCT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT c.Continent, COUNT(DISTINCT cm.Id) AS ManufacturerCount FROM continents c INNER JOIN countries co ON c.ContId = co.Continent INNER JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT  continents.Continent, COUNT(DISTINCT car_makers.Id) as Count FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent; 
SELECT countries.Continent, count(car_makers.Id) as manufacturer_count FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent;
SELECT countries.Continent, count(*) as count FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent
SELECT continents.Continent, COUNT(DISTINCT car_makers.Id) AS manufacturer_count FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT countries.continent, count(car_makers.id) as manufacturer_count FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.continent;
SELECT continents.Continent, COUNT(car_makers.Id) AS manufacturer_count FROM continents JOIN countries ON countries.Continent = continents.ContId JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY continents.Continent;
SELECT Continents.Continent, COUNT(DISTINCT car_makers.Id) AS ManufacturerCount FROM Continents JOIN Countries ON Continents.ContId = Countries.Continent JOIN car_makers ON Countries.CountryId = car_makers.Country GROUP BY Continents.Continent;
SELECT continents.Continent, COUNT(DISTINCT cm.Id) AS ManufacturerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY continents.Continent;
SELECT continents.Continent, count(car_makers.Id) as Manufacturers FROM continents INNER JOIN countries ON continents.ContId = countries.Continent INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;
SELECT countries.CountryName FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(car_makers.Id) AS quantity, countries.CountryName AS state_name FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY quantity DESC LIMIT 1;
SELECT countries.CountryName AS State, COUNT(car_makers.Id) AS ManufacturerCount FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY ManufacturerCount DESC LIMIT 1;
SELECT countries.CountryName as State, COUNT(DISTINCT car_makers.Id) as ManufacturerCount FROM countries INNER JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY ManufacturerCount DESC LIMIT 1;
SELECT countries.CountryName as State, count(car_makers.Id) as manufacturer_count FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY State ORDER BY manufacturer_count DESC LIMIT 1;
SELECT countries.CountryName, COUNT(car_makers.Id) AS num_manufacturers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY num_manufacturers DESC LIMIT 1;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY CountryName ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countries.CountryName, COUNT(car_makers.Id) as quantity FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY quantity DESC LIMIT 1;
SELECT CountryName AS State, COUNT(DISTINCT car_makers.Id) AS NumManufacturers FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName ORDER BY NumManufacturers DESC LIMIT 1;
SELECT car_makers.FullName, count(*) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.FullName;
SELECT car_makers.FullName, count(*) as count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS model_count FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;
SELECT car_makers.FullName, COUNT(car_names.Model) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.FullName;
SELECT manufacturer.Id, manufacturer.FullName, COUNT(*) as NumberOfModels FROM car_makers manufacturer JOIN model_list ON manufacturer.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY manufacturer.Id, manufacturer.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS Model_Count FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) as ModelQuantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) as Quantity FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(*) as ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.FullName;
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)');
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker IN (SELECT Maker FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)');
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)')
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON model_list.Model = car_names.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'amc hornet sportabout (sw)';
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE model_list.Model = 'amc hornet sportabout (sw)'
SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'AMC' AND FullName = 'Hornet Sportabout (sw)')
SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France'
SELECT COUNT(*) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE countries.CountryName = 'France';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'USA';
SELECT count(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'USA';
SELECT COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Country =   (SELECT CountryId FROM countries WHERE CountryName = 'USA')
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT count(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';
SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'; 
SELECT COUNT(model_list.ModelId) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN model_list ON model_list.Maker = car_makers.Id WHERE countries.CountryName = 'United States';
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT  SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT  SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT  AVG(MPG) as AverageMilesPerGallon FROM cars_data WHERE Cylinders = 4 
SELECT  AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4; 
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;
SELECT   MIN(Weight) FROM   cars_data WHERE   Year = 1974 AND   Cylinders = 8;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT cars_data.Weight FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974 ORDER BY cars_data.Weight LIMIT 1;
SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974 ORDER BY cars_data.Weight LIMIT 1;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT   cars_data.Weight FROM   cars_data JOIN   car_names ON cars_data.Id = car_names.MakeId JOIN   model_list ON car_names.Model = model_list.Model WHERE   cars_data.Cylinders = 8   AND cars_data.Year = 1974 ORDER BY   cars_data.Weight LIMIT 1;
SELECT car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model;
SELECT car_makers.Maker, car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId;
SELECT car_makers.Id, car_makers.FullName FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId
SELECT car_makers.FullName, car_makers.Id FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId;
SELECT car_makers.Id, car_makers.Maker FROM car_makers WHERE car_makers.Id IN (SELECT DISTINCT car_makers.Id FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Id, car_makers.Maker
SELECT Maker,Id FROM car_makers;
SELECT Maker, Id FROM car_makers;
SELECT car_makers.Id, car_makers.Maker FROM car_makers;
SELECT car_makers.Id, car_makers.Maker FROM car_makers;
SELECT car_makers.Id, car_makers.Maker FROM car_makers;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Count(*) FROM cars_data WHERE Horsepower >150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year;
SELECT YEAR, AVG(Weight) AS average_weight FROM cars_data GROUP BY YEAR; 
SELECT YEAR, AVG(Weight) as AverageWeight FROM cars_data GROUP BY YEAR;
SELECT Year, AVG(Weight) as AverageWeight FROM cars_data GROUP BY Year;
SELECT year, AVG(weight) as average_weight FROM cars_data GROUP BY year;
SELECT YEAR, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS average_weight, Year AS average_year FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) as average_weight, AVG(Year) as average_year FROM cars_data GROUP BY Year;
SELECT YEAR, AVG(Weight) as average_weight, AVG(Year) as average_year FROM cars_data GROUP BY YEAR;
SELECT Year, AVG(Weight), AVG(Year) FROM cars_data GROUP BY Year;
SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId JOIN car_makers ON countries.CountryId = car_makers.Country WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName, count(car_makers.Id) AS quantity FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING count(car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'Europe' GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent IN (SELECT Continent FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT continents.ContId FROM continents WHERE continents.Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(*) >= 3;
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent IN (   SELECT Continent   FROM continents   WHERE continents.Continent = countries.Continent   GROUP BY continents.Continent   HAVING COUNT(*) >= 3 )
SELECT CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY CountryName HAVING COUNT(*) >= 3;
SELECT MAX(Power), car_makers.Maker FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) AS Maximum_Power, Maker FROM cars_data WHERE Cylinders = 3;
SELECT MAX(cars_data.Horsepower) AS Max_Power, car_makers.Maker AS Manufacturer FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) AS Maximum_Power, car_makers.Maker FROM cars_data INNER JOIN car_names ON car_names.MakeId = cars_data.Id INNER JOIN model_list ON model_list.Model = car_names.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) AS Maximum_Power, car_makers.Maker AS Manufacturer FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(cars_data.Horsepower), model_list.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) AS LargestPower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT MAX(Horsepower) as Horsepower, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE Cylinders = 3;
SELECT MAX(Horsepower) AS Max_Power, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Model WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT cars_data.Id, car_names.Model, MAX(cars_data.MPG) as Maximum_MPG FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY cars_data.Id, car_names.Model
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT MAX(MPG) AS Highest_MPG FROM cars_data;
SELECT MAX(MPG) AS Max_MPG, Model FROM cars_data ORDER BY Max_MPG DESC LIMIT 1;
SELECT model_list.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model ORDER BY cars_data.MPG DESC LIMIT 1;
SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);
SELECT Model FROM cars_data WHERE MPG = (   SELECT MAX(MPG)   FROM cars_data )
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT  SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980; 
SELECT ROUND(AVG(Horsepower), 2) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT ROUND(AVG(Horsepower), 2) as AveragePower FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'Volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT AVG(cars_data.Edispl) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT COUNT(*) AS Quantity, Cylinders, MAX(Accelerate) AS MaximumAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, max(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT `Cylinders`, MAX(`Accelerate`) AS `MaxAcceleration` FROM `cars_data` GROUP BY `Cylinders`;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Accelerate) as Max_Accelerate, Cylinders FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT MAX(Model) AS Model FROM car_names GROUP BY Model HAVING COUNT(DISTINCT Make) = (   SELECT MAX(NumberOfVersions)   FROM (     SELECT Model, COUNT(DISTINCT Make) AS NumberOfVersions     FROM car_names     GROUP BY Model   ) AS VersionCount )
SELECT model_list.Model, count(car_names.Make) AS quantity FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, count(car_names.MakeId) AS quantity FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY quantity DESC LIMIT 1;
SELECT model_list.Model, COUNT(*) AS Quantity FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY Quantity DESC LIMIT 1;
SELECT Model, count(*) as quantity FROM car_names GROUP BY Model ORDER BY quantity DESC LIMIT 1;
SELECT Model, COUNT(DISTINCT MakeId) AS Quantity FROM car_names GROUP BY Model ORDER BY Quantity DESC LIMIT 1;
SELECT Model, COUNT(DISTINCT MakeId) AS Quantity  FROM car_names  GROUP BY Model  ORDER BY Quantity DESC  LIMIT 1;
SELECT model, count(*) as versions FROM car_names GROUP BY model ORDER BY versions DESC LIMIT 1;
SELECT model_list.Model, count(*) as quantity FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY count(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.Model) AS VersionCount, m.Model FROM car_names c INNER JOIN model_list m ON c.Model = m.Model GROUP BY m.Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT Count(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT count(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(car_names.Model) FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(car_names.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company'
SELECT count(*) FROM car_makers c JOIN model_list m ON c.Id = m.Maker WHERE c.FullName = 'American Motor Company';
SELECT count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT count(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT COUNT(*) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = 'American Motor Company';
SELECT count(*) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE cm.Maker = 'American Motor Company';
SELECT count(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3;
SELECT Maker, Id, COUNT(*) AS Quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY Maker, Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(*) > 3;
SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.Maker, COUNT(model_list.ModelId) AS quantity FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(*) > 3;
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT DISTINCT car_names.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;
SELECT DISTINCT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT model_list.Model FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Id INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000;
SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000;
SELECT cars_data.Year, count(*) FROM cars_data WHERE cars_data.Weight >= 3000 AND cars_data.Weight <= 4000 GROUP BY cars_data.Year;
SELECT  YEAR FROM cars_data WHERE Weight < 4000 AND YEAR IN (SELECT YEAR FROM cars_data WHERE Weight > 3000 ) GROUP BY YEAR; 
SELECT  Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000 GROUP BY Year; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000   OR Weight > 3000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000; 
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000; 
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate=(SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT  MAX(Horsepower) AS power FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data) 
SELECT MAX(Horsepower) as Power FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data)
SELECT `Horsepower` FROM cars_data WHERE Accelerate = (   SELECT MAX(Accelerate)   FROM cars_data ); 
SELECT COUNT(*) AS quantity FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')) 
SELECT COUNT(Minimum_accelerate) AS quantity FROM (   SELECT MIN(Cylinders) AS Minimum_accelerate   FROM cars_data   INNER JOIN car_names ON car_names.MakeId = cars_data.Id   INNER JOIN model_list ON model_list.Model = car_names.Model   WHERE Model = 'volvo' ) AS subquery;
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'));
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')) AND cars_data.Cylinders = (SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'));
SELECT COUNT(*) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE cars_data.Id = car_names.MakeId) AND cars_data.Cylinders = (SELECT MIN(Cylinders) FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE cars_data.Id = car_names.MakeId));
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') ORDER BY cars_data.Accelerate LIMIT 1;
SELECT COUNT(*)  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo')  AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId);
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.ModelId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE ModelId IN (SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo')))) )
SELECT COUNT(cars_data.Cylinders) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') ORDER BY cars_data.Accelerate ASC LIMIT 1;
SELECT count(cars_data.Cylinders) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id = car_names.MakeId)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT There are a couple of steps we would need to follow to answer this question:
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Horsepower)   FROM cars_data )
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)
SELECT COUNT(*) AS quantity FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS States FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;
SELECT COUNT(states) FROM car_makers GROUP BY Id HAVING COUNT(Id) > 2;
SELECT COUNT(*) AS States FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT countries.CountryName) AS Quantity FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 2;
SELECT COUNT(*) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;
SELECT COUNT(DISTINCT car_makers.Country) AS Quantity FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2;
SELECT countries.CountryName, COUNT(car_makers.Id) AS ManufacturersCount FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) > 2;
SELECT  COUNT(*) FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT Count(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) as quantity FROM cars_data WHERE Cylinders > 6;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT  COUNT(*) as quantity FROM cars_data WHERE Cylinders > 6; 
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1; 
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT cars_data.Model FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.FullName FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3  
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_names.MakeId, car_makers.Maker FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;
SELECT    MAX(MPG) AS MaxMilesPerGallon  FROM cars_data  WHERE Cylinders = 8 AND Year < 1980; 
SELECT  MAX(MPG) AS Maximum_MPG FROM cars_data WHERE Cylinders = 8 AND Year < 1980 
SELECT  SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980; 
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT car_names.Model FROM car_names INNER JOIN cars_data ON car_names.MakeId = cars_data.Id INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';
SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Make = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company' 
SELECT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON car_makers.Id = model_list.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < 3500 AND car_makers.Maker != 'Ford'
SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';
SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company';
SELECT CountryName FROM countries WHERE NOT EXISTS (   SELECT 1   FROM car_makers   WHERE car_makers.Country = countries.CountryId )
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (   SELECT DISTINCT Country   FROM car_makers ); 
SELECT countries.CountryName FROM countries WHERE NOT EXISTS (  SELECT 1  FROM car_makers  WHERE car_makers.Country = countries.CountryId )
SELECT CountryName FROM countries WHERE CountryId NOT IN (   SELECT Country   FROM car_makers )
SELECT DISTINCT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL;
SELECT Country FROM countries WHERE CountryId NOT IN   (SELECT Country   FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers)
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) >= 2
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(*) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON car_names.Model = model_list.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3 AND COUNT(DISTINCT car_names.Model) >= 2;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3;
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3   AND COUNT(DISTINCT model_list.ModelId) > 1;
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.Model) >= 2 AND COUNT(*) > 3;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId WHERE (   (SELECT COUNT(*) FROM car_makers WHERE car_makers.Country = countries.CountryId) > 3   OR car_names.Model = 'fiat' )
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR COUNT(DISTINCT car_names.Model) > 0;
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR MAX(car_names.Model = 'fiat')
SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker LEFT JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR MAX(car_names.Make = 'fiat') > 0;
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country INNER JOIN model_list ON car_makers.Id = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(DISTINCT car_makers.Id) > 3 OR MAX(CASE WHEN car_names.Model = 'fiat' THEN 1 ELSE 0 END) = 1;
SELECT cm.Id, cm.Maker FROM car_makers cm WHERE cm.Country IN (SELECT c.CountryId           FROM car_makers cm           JOIN countries c ON cm.Country = c.CountryId           GROUP BY c.CountryId           HAVING COUNT(DISTINCT cm.Id) > 3) OR cm.Maker = 'Fiat';
SELECT car_makers.Id, car_makers.Maker FROM car_makers WHERE car_makers.Id IN (   SELECT car_makers.Id   FROM car_makers   GROUP BY car_makers.Id   HAVING COUNT(*) > 3 ) OR car_makers.Maker = 'Fiat';
SELECT car_makers.Id, car_makers.Maker FROM car_makers WHERE car_makers.Id IN (SELECT car_makers.Id             FROM car_makers             JOIN countries ON car_makers.Country = countries.CountryId             WHERE countries.CountryName IN (SELECT car_makers.Country                            FROM car_makers                            JOIN model_list ON car_makers.Id = model_list.Maker                            JOIN car_names ON model_list.Model = car_names.Model                            WHERE car_names.Make = 'fiat')             GROUP BY car_makers.Id             HAVING COUNT(car_makers.Id) > 3) OR car_makers.Maker = 'fiat';
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId WHERE car_makers.Id IN (   SELECT Id FROM car_makers   GROUP BY Id   HAVING COUNT(*) > 3 ) OR car_makers.Maker = 'Fiat';
SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE car_makers.Country IN   (SELECT CountryId FROM     (SELECT CountryId, COUNT(*) AS Manufacturers     FROM car_makers     GROUP BY CountryId     HAVING Manufacturers > 3     UNION     SELECT CountryId, 0     FROM countries     WHERE CountryName = 'fiat'))
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT airports.Country FROM airlines JOIN flights ON airlines.Airline = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'Jetblue Airways'
SELECT airports.Country FROM airlines JOIN flights ON airlines.Airline = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'Jetblue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT `Airline`, `Abbreviation` FROM `airlines` WHERE `Country` = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT Count(*) FROM airlines
SELECT COUNT(*) FROM airlines;
SELECT COUNT(uid) FROM airlines
SELECT COUNT(DISTINCT Airline) AS num_airways FROM airlines;
SELECT Count(uid) FROM airlines;
SELECT Total amount of airways can be calculated using the count() function. There are a few ways to write the query, depending on the exact requirement. Here is a simple query that returns the total count of airways:
SELECT COUNT(*) AS TotalAirways FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(DISTINCT Airline) AS TotalAirways FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(AirportCode)  FROM airports;
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(AirportCode) AS aerodromes FROM airports;
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(*) FROM airports
SELECT COUNT(AirportCode) AS AerodromeCount FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Count(*) FROM flights;
SELECT Count(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT The SQL query to return the number of flights would be:
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation LIKE '%UAL%'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportCode = 'Alton';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportCode = 'ALN';
SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT Airports.City, Airports.Country FROM Airports WHERE Airports.AirportName = 'Alton'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT count(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ATO' OR DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE SourceAirport = 'ATO' OR DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ATO' OR DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ATO' OR DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ATO' OR DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT count(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT Count(flights.FlightNo) FROM flights WHERE flights.DestAirport = 'ATO';
SELECT COUNT(flights.FlightNo) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT count(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT Count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest_airports ON flights.DestAirport = dest_airports.AirportCode WHERE airports.City = 'Aberdeen' AND dest_airports.City = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT count(*) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT Count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' and SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT count(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen';
SELECT airports.City, COUNT(*) AS Quantity FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY Quantity DESC LIMIT 1;
SELECT airports.city, COUNT(flights.FlightNo) AS num_arriving_flights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.city ORDER BY num_arriving_flights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.FlightNo) AS ArrivalFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY ArrivalFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS Number_of_arriving_flights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY Number_of_arriving_flights DESC LIMIT 1;
SELECT airports.City, COUNT(flights.FlightNo) AS NumArrivingFlights FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY NumArrivingFlights DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS frequency FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT airports.City, COUNT(flights.SourceAirport) AS Frequency FROM airports INNER JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City, count(flights.SourceAirport) as frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City, COUNT(flights.SourceAirport) AS frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY frequency DESC LIMIT 1;
SELECT airports.City, COUNT(*) as quantity FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY quantity DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS DepartingFlights FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City, COUNT(*) AS departing_flights_count FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY departing_flights_count DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY DepartingFlights DESC LIMIT 1;
SELECT   airports.City, COUNT(*) FROM   airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY   airports.City ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT City AS Most_Frequent_Source_Aerodrome FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City AS frequent_source_aerodrome FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City AS Town, COUNT(*) AS Frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY Frequency DESC LIMIT 1;
SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City, COUNT(*) AS frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY frequency DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode FROM flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode, COUNT(flights.FlightNo) AS FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY FlightCount DESC LIMIT 1;
SELECT SourceAirport AS Code, COUNT(*) AS NumberOfFlights FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT airports.AirportCode, COUNT(*) AS num_flights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY num_flights DESC LIMIT 1;
SELECT airports.AirportCode, COUNT(*) AS quantity FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Airports.AirportCode, COUNT(*) AS quantity FROM Flights JOIN Airports ON Flights.DestAirport = Airports.AirportCode GROUP BY Airports.AirportCode ORDER BY quantity DESC LIMIT 1;
SELECT   AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.AirportCode, count(*) AS quantity FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY quantity DESC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1 
SELECT  SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode, COUNT(*) AS quantity FROM flights GROUP BY DestAirport ORDER BY quantity LIMIT 1;
SELECT `AirportCode` FROM `flights` GROUP BY `DestAirpport` ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY count(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode, COUNT(flights.FlightNo) AS num_flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY num_flights LIMIT 1;
SELECT airports.AirportCode, COUNT(*) AS FlightCount FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY FlightCount LIMIT 1;
SELECT AirportCode FROM flights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airports.AirportCode FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) as Quantity FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY Quantity DESC LIMIT 1;
SELECT (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1)
SELECT   airlines.Airline AS Airline,   COUNT(*) AS NumFlights FROM   flights   JOIN airlines ON flights.Airline = airlines.uid GROUP BY   airlines.Airline ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT Airline, count(*) AS Quantity FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) as num_flights FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS FlightCount FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1;
SELECT Airline, COUNT(*) AS Quantity FROM flights GROUP BY Airline ORDER BY Quantity DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) AS total_flights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY total_flights DESC LIMIT 1;
SELECT airlines.Airline, COUNT(*) AS numOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY numOfFlights DESC LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline        FROM flights        GROUP BY Airline        ORDER BY COUNT(*)        LIMIT 1)
SELECT airlines.Abbreviation, airports.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airlines.Abbreviation, airports.Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Abbreviation, Country FROM airlines GROUP BY Abbreviation, Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) = (     SELECT MIN(cnt)     FROM (       SELECT COUNT(*) AS cnt       FROM flights       GROUP BY Airline     ) AS T   ) );
SELECT airlines.Abbreviation, airports.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airlines.Abbreviation, airports.Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.Abbreviation AS ShortenedWord, airports.Country AS State FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airlines.Abbreviation, airports.Country ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*)   LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 ) 
SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline, COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD' GROUP BY airlines.Airline;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT Airline FROM flights WHERE SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD' OR flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD' OR flights.SourceAirport = 'AHD';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid= flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2
SELECT airlines.Airline FROM airlines WHERE EXISTS (SELECT * FROM flights        WHERE flights.Airline = airlines.Airline        AND flights.SourceAirport = 'APG') AND EXISTS (SELECT * FROM flights       WHERE flights.Airline = airlines.Airline       AND flights.SourceAirport = 'CVO');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT airports.AirportCode) = 2;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS apg_airport ON flights.SourceAirport = apg_airport.AirportCode JOIN airports AS cvo_airport ON flights.SourceAirport = cvo_airport.AirportCode WHERE apg_airport.AirportName = 'APG' AND cvo_airport.AirportName = 'CVO';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2 
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS apg_airport ON flights.SourceAirport = apg_airport.AirportCode JOIN airports AS cvo_airport ON flights.SourceAirport = cvo_airport.AirportCode WHERE apg_airport.AirportName = 'APG' AND cvo_airport.AirportName = 'CVO';
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports AS apg_airport ON flights.SourceAirport = apg_airport.AirportCode JOIN airports AS cvo_airport ON flights.SourceAirport = cvo_airport.AirportCode WHERE apg_airport.AirportCode = 'APG' AND cvo_airport.AirportCode = 'CVO'
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM flights               INNER JOIN airports ON flights.DestAirport = airports.AirportCode               WHERE airports.AirportCode = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN   (SELECT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.DestAirport != 'APG';
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.uid NOT IN (SELECT airlines.uid             FROM airlines             INNER JOIN flights ON airlines.uid = flights.Airline             WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = 'APG')
SELECT airlines.Airline FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (   SELECT airlines.Airline   FROM airlines   INNER JOIN flights ON airlines.uid = flights.Airline   INNER JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'APG' )
SELECT airlines.Airline FROM airlines WHERE airlines.uid IN (   SELECT flights.Airline   FROM flights   WHERE flights.SourceAirport = 'CVO' ) AND airlines.uid NOT IN (   SELECT flights.Airline   FROM flights   WHERE flights.SourceAirport = 'APG' )
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG');
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'APG')
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'CVO' AND airlines.Airline NOT IN (   SELECT airlines.Airline   FROM airlines   JOIN flights ON airlines.uid = flights.Airline   JOIN airports ON flights.SourceAirport = airports.AirportCode   WHERE airports.City = 'APG' )
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS flight_count FROM airlines INNER JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
SELECT airlines.Airline, COUNT(*) AS quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) AS num_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) AS quantity FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) AS quantity FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT airlines.Airline, COUNT(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, COUNT(*) AS quantity FROM flights INNER JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(*) < 200;
SELECT airlines.Airline, count(*) as quantity FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING count(*) < 200;
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline HAVING count(*) < 200;
SELECT airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline, COUNT(*) AS quantity FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines';
SELECT `FlightNo` FROM `flights` WHERE `Airline` = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "APG";
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';
SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen";
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports on flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT Count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City='Aberdeen') OR DestAirport IN (SELECT AirportCode FROM airports WHERE City='Abilene');
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.FlightNo IS NULL;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport IS NULL;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport IS NULL;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL;
SELECT airports.AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.DestAirport WHERE flights.DestAirport IS NULL UNION SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE flights.SourceAirport IS NULL;
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) AND airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights)
SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (   SELECT flights.SourceAirport   FROM flights   UNION   SELECT flights.DestAirport   FROM flights )
SELECT AirportCode, AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);
SELECT airports.AirportCode FROM airports LEFT JOIN flights ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name, Age FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, count(*) as quantity FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee GROUP BY City;
SELECT City, COUNT(*) as Number_of_workers FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Number_of_workers FROM employee GROUP BY City;
SELECT City, COUNT(Employee_ID) AS Staff_count FROM employee GROUP BY City;
SELECT City, COUNT(*) as staff_quantity FROM employee GROUP BY City;
SELECT City, count(*) as staff_count FROM employee GROUP BY City;
SELECT City, COUNT(*) as staff_count FROM employee GROUP BY City;
SELECT City, COUNT(*) as quantity FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT  City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT city FROM employee WHERE Age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City, COUNT(DISTINCT shop.Shop_ID) AS number_of_shops FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY City;
SELECT City, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY City;
SELECT City, COUNT(DISTINCT shop.Shop_ID) as Num_Shops FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY City;
SELECT `City`, COUNT(DISTINCT `Shop_ID`) AS `Number_of_shops` FROM `shop` GROUP BY `City`;
SELECT City, COUNT(DISTINCT shop.Shop_ID) AS number_of_shops FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY City;
SELECT shop.City, COUNT(shop.Shop_ID) AS Num_Stores FROM shop GROUP BY shop.City;
SELECT shop.City, COUNT(DISTINCT shop.Shop_ID) AS Number_of_stores FROM shop GROUP BY shop.City;
SELECT shop.City, count(*) as store_quantity FROM shop GROUP BY shop.City;
SELECT City, COUNT(Shop_ID) AS Store_Count FROM shop GROUP BY City;
SELECT COUNT(*) AS quantity, shop.City FROM shop GROUP BY shop.City;
SELECT shop.Manager_name, shop.District  FROM shop  WHERE shop.Number_products = (    SELECT MAX(Number_products) FROM shop  )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT Shop.Manager_name, Shop.District FROM Shop WHERE Shop.Number_products = (SELECT MAX(Number_products) FROM Shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT s.Shop_ID, s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (   SELECT MAX(Number_products)   FROM shop )
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT shop.Manager_name, shop.District FROM shop WHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products) AS min_number_of_merchandises, MAX(Number_products) AS max_number_of_merchandises FROM shop
SELECT MIN(Number_products) AS min_number_of_merchandises, MAX(Number_products) AS max_number_of_merchandises FROM shop; 
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop
SELECT MIN(Number_products) AS min_merchandises, MAX(Number_products) AS max_merchandises FROM shop;
SELECT MIN(Number_products) AS minimum_goods, MAX(Number_products) AS maximum_goods FROM shop
SELECT MIN(Number_products) AS minimum_goods, MAX(Number_products) AS maximum_goods FROM shop;
SELECT MIN(Number_products) AS minimum_goods, MAX(Number_products) AS maximum_goods FROM shop
SELECT  SELECT MIN(Number_products) AS minimum_number_goods, MAX(Number_products) AS maximum_number_goods FROM shop;
SELECT MIN(Number_products) AS minimum_goods, MAX(Number_products) AS maximum_goods FROM shop;
SELECT Name, City, District FROM shop ORDER BY Number_products DESC;
SELECT  Name, City, District FROM  shop ORDER BY  Number_products DESC;
SELECT `shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;`
SELECT Name, City, District FROM shop ORDER BY Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT `shop.Name`, `shop.Location`, `shop.District` FROM `shop` ORDER BY `shop.Number_products` DESC;
SELECT shop.Name, shop.Location AS City, shop.District FROM shop ORDER BY shop.Number_products DESC;
SELECT Name, City, District FROM shop ORDER BY Number_products DESC;
SELECT  shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC; 
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT SHOP.Name FROM shop WHERE SHOP.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT shop.Name FROM shop WHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT  shop.Name FROM  shop WHERE  shop.Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name,     COUNT(evaluation.Year_awarded) AS Num_Awards FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Name ORDER BY Num_Awards DESC LIMIT 1;
SELECT employee.Name, COUNT(*) AS Awards FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY employee.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID, e.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID, employee.Name ORDER BY count(*) DESC LIMIT 1; 
SELECT Name FROM employee WHERE Employee_ID = (   SELECT Employee_ID   FROM evaluation   GROUP BY Employee_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee INNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation) 
SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT employee.Name FROM employee WHERE employee.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Year_awarded IS NULL  This query retrieves the names of staff who never won any award in the assessment by joining the employee table with the evaluation table and filtering the result to only include employees with no associated award year.
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Year_awarded IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL;
SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT Employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name FROM hiring JOIN shop ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN (SELECT Shop_ID, COUNT(*) AS num_workers    FROM hiring    GROUP BY Shop_ID    ORDER BY num_workers DESC    LIMIT 1) AS max_workers ON shop.Shop_ID = max_workers.Shop_ID;
SELECT Shop.Name FROM shop WHERE Shop_ID = (   SELECT Shop_ID   FROM (     SELECT Shop_ID, COUNT(Employee_ID) AS num_workers     FROM hiring     GROUP BY Shop_ID     ORDER BY num_workers DESC     LIMIT 1   ) AS subquery ) LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_workers FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name ORDER BY num_workers DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS quantity FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY quantity DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS worker_count FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY worker_count DESC LIMIT 1;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;
SELECT   shop.Name FROM   shop LEFT JOIN   hiring ON shop.Shop_ID = hiring.Shop_ID WHERE   hiring.Employee_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT shop.Name, COUNT(*) as staff_count FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS staff_hired FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(*) AS staff_hired FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) as number_of_staff_hired FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS staff_hired FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS number_of_people_working FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, count(hiring.Employee_ID) as number_of_people_working FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID;
SELECT shop.Name, COUNT(hiring.Employee_ID) as number_of_employees FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, count(hiring.Employee_ID) AS num_employees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name
SELECT shop.Name, count(hiring.Employee_ID) as number_of_employees FROM shop LEFT JOIN hiring ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;
SELECT SUM(Bonus) as total_premium FROM evaluation
SELECT SUM(Bonus) as total_premium FROM evaluation
SELECT SUM(Bonus) AS total_premium FROM evaluation
SELECT SUM(Bonus) AS Total_premium FROM evaluation
SELECT SUM(Bonus) AS total_premium FROM evaluation;
SELECT SUM(Bonus) AS total_extra_prize FROM evaluation
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT hiring.*  FROM hiring;
SELECT hiring.* FROM hiring
SELECT hiring.* FROM hiring;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT hiring.* FROM hiring;
SELECT From hiring;
SELECT hiring.*, shop.Name, shop.Location, shop.District, shop.Number_Products, shop.Manager_Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID;
SELECT hiring.* FROM hiring
SELECT * FROM hiring;
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN (   SELECT shop.District   FROM shop   WHERE shop.Number_products > 10000 )
SELECT shop.District FROM shop GROUP BY shop.District HAVING SUM(CASE WHEN shop.Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN shop.Number_products > 10000 THEN 1 ELSE 0 END) > 0;
SELECT shop.District FROM shop GROUP BY shop.District HAVING COUNT(CASE WHEN shop.Number_products < 3000 THEN 1 END) > 0 AND COUNT(CASE WHEN shop.Number_products > 10000 THEN 1 END) > 0;
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;
SELECT DISTRICT FROM shop GROUP BY DISTRICT HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0  AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;
SELECT DISTINCT s1.District FROM shop s1, shop s2 WHERE s1.Number_products < 3000 AND s1.District = s2.District AND s2.Number_products > 10000;
SELECT DISTRICT FROM shop WHERE Number_products < 3000 OR Number_products > 10000 GROUP BY DISTRICT HAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 ELSE NULL END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN 1 ELSE NULL END) > 0;
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 AND EXISTS   (SELECT 1   FROM shop s2   WHERE s2.District = s.District    AND s2.Number_products > 10000);
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND shop.District IN   (SELECT District    FROM shop    WHERE Number_products > 10000)
SELECT shop.District FROM shop WHERE shop.Number_products < 3000 AND EXISTS (SELECT 1 FROM shop WHERE shop.Number_products > 10000 AND shop.District = shop.District)
SELECT COUNT(DISTINCT shop.City) AS different_store_city FROM shop;
SELECT COUNT(DISTINCT City) AS store_city_count FROM employee;
SELECT COUNT(DISTINCT City) FROM employee;
SELECT COUNT(DISTINCT City) FROM employee;
SELECT COUNT(DISTINCT City) AS different_store_cities FROM employee;
SELECT COUNT(DISTINCT City) FROM employee;
SELECT COUNT(DISTINCT City) FROM employee;
SELECT COUNT(DISTINCT City) FROM employee;
SELECT COUNT(DISTINCT shop.Location) as num_store_cities FROM shop;
SELECT Count(DISTINCT City) FROM employee;
SELECT count(*) FROM Documents;
SELECT Count(DISTINCT Document_ID) FROM Documents;
SELECT count(*) FROM Documents;
SELECT COUNT(DISTINCT Documents.Document_ID) AS quantity FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) AS quantity FROM Documents 
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents
SELECT Count(*) FROM Documents
SELECT count(*) FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Documents.Document_Name, Documents.Document_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Robbin CV"
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS layout_count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) as layout_count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS layout_count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT COUNT(DISTINCT Templates.Template_ID) AS NumberOfLayouts FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'text file';
SELECT COUNT(DISTINCT Templates.Template_ID) AS Layout_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = 'TEXT'
SELECT COUNT(DISTINCT Template_ID) AS layout_count FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'text')
SELECT Count( Template_ID ) FROM Documents WHERE Template_Type_Code = 'TEXT'
SELECT COUNT(DISTINCT Templates.Template_ID) AS layout_count FROM Templates WHERE Templates.Template_Type_Code = 'text'
SELECT COUNT(*) FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT count(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT'
SELECT count(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT';
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT' AND Documents.Document_Name LIKE '%.txt';
SELECT Count(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT';
SELECT   COUNT(DISTINCT Documents.Document_ID) AS Number_of_Text_Files FROM   Documents   INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID   INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE   Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(*) AS quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(*) AS Text_File_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS num_text_files FROM Templates LEFT JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS Number_of_Text_Files FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(*) AS Usage_Count FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'paper' GROUP BY Templates.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) as quantity FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;
SELECT Template_ID, COUNT(*) AS Quantity FROM Documents GROUP BY Template_ID;
SELECT Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'papers') GROUP BY Templates.Template_ID;
SELECT Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID, Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_id, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_id, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(DISTINCT Documents.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(*) > 1;
SELECT Templates.Template_ID FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(DISTINCT Documents.Document_ID) > 1;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_ID NOT IN (SELECT Documents.Template_ID FROM Documents)
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT DISTINCT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL;
SELECT COUNT(DISTINCT Template_ID) AS layout_count FROM Templates;
SELECT COUNT(*) as layout_count FROM Templates;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Templates.Template_ID) AS layout_quantity FROM Templates;
SELECT  COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'layout'); 
SELECT COUNT(Template_Type_Code) FROM Ref_Template_Types
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'layout';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'layout';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'layout';
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types;
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT');
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP','PPT');
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT');
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT');
SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates WHERE Templates.Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'; 
SELECT count(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV')
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'CV');
SELECT COUNT(Templates.Template_ID) FROM Templates WHERE Templates.Template_Type_Code = 'CV';
SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Templates.Version_Number, Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Version_Number > 5;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS NumberOfLayouts FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) as number_of_layouts FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, count(*) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS Layout_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Layout_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID) AS layout_count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Template_Type_Description, count(*) as layout_quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID) as quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description AS Layout_Type, COUNT(*) AS Layout_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Layout_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY Layout_Count DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Template_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Template_ID) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Templates.Template_ID) AS quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Templates.Template_ID) AS quantity FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Templates.Template_ID) AS layout_count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY layout_count DESC LIMIT 1;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM (     SELECT Template_Type_Code, COUNT(Template_ID) AS quantity     FROM Templates     GROUP BY Template_Type_Code     ORDER BY quantity DESC     LIMIT 1   ) )
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM(     SELECT Template_Type_Code, COUNT(*) AS layout_count     FROM Templates     GROUP BY Template_Type_Code     ORDER BY layout_count DESC     LIMIT 1   ) AS temp )
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY COUNT(Templates.Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code, COUNT(*) AS quantity FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Template_Type_Description HAVING COUNT(Templates.Template_ID) < 3;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description HAVING COUNT(Templates.Template_ID) < 3;
SELECT Ref_Template_Types.Template_Type_Description, count(Templates.Template_ID) as quantity FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description HAVING count(Templates.Template_ID) < 3;
SELECT Template_Type_Code, count(*) as quantity FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description HAVING COUNT(*) < 3;
SELECT Template_Type_Description FROM Ref_Template_Types GROUP BY Template_Type_Description HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description HAVING COUNT(*) < 3;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description HAVING COUNT(*) < 3;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code                 FROM Templates                 GROUP BY Template_Type_Code                 HAVING COUNT(*) >= 3);
SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number = (SELECT MIN(Version_Number) FROM Templates);
SELECT MIN(Version_Number) AS smallest_edition_number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number) AS Smallest_Version, Templates.Template_Type_Code FROM Templates;
SELECT MIN(Templates.Version_Number) AS smallest_edition_number,    Templates.Template_Type_Code AS layout_type_code FROM Templates;
SELECT MIN(Templates.Version_Number) AS lowest_edition, Templates.Template_Type_Code AS layout_type_code FROM Templates;
SELECT MIN(Version_Number) AS lowest_edition_number, Template_Type_Code FROM Templates
SELECT MIN(Templates.Version_Number) AS Lowest_Edition_Number, Templates.Template_Type_Code FROM Templates;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates
SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates;
SELECT Templates.Template_Type_Code FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Data base"
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base';
SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Ref_Template_Types.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name = 'Data base';
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'; 
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Document_Name FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) AS Quantity FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description AS Layout_Type, COUNT(DISTINCT Documents.Document_ID) AS Number_of_Papers FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) as quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(DISTINCT Documents.Document_ID) AS quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Documents.Document_ID) AS Paper_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) as quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description AS Layout_Type, COUNT(DISTINCT Documents.Document_ID) AS Paper_Count FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) AS Quantity FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(DISTINCT Documents.Document_ID) as Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(DISTINCT Documents.Document_ID) AS Quantity FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) AS quantity FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name LIKE '%.txt' GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) AS quantity FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID WHERE Ref_Template_Types.Template_Type_Description = 'text file' GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY COUNT(*) DESC;
SELECT Template_Type_Code, COUNT(*) AS quantity FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'text' GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description, COUNT(*) AS quantity FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name LIKE '%.txt' GROUP BY Ref_Template_Types.Template_Type_Description ORDER BY quantity DESC LIMIT 1;
SELECT   Template_Type_Code FROM   Templates GROUP BY   Template_Type_Code ORDER BY   COUNT(*) DESC LIMIT 1; 
SELECT Template_Type_Code, COUNT(*) AS quantity FROM Templates WHERE Document_ID IN (SELECT Document_ID FROM Documents) GROUP BY Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT (SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1) as MostCommonLayoutTypeCode
SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name LIKE '%.txt%') GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(*) AS quantity FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description LIKE '%text%') GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY quantity DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN   (SELECT Templates.Template_Type_Code   FROM Templates   WHERE Templates.Template_ID NOT IN     (SELECT Documents.Template_ID     FROM Documents));
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Templates.Template_Type_Code                   FROM Templates                   INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID                   WHERE Documents.Document_Name LIKE '%.txt');
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   WHERE Template_ID IN (     SELECT Template_ID     FROM Documents     WHERE Document_ID IN (       SELECT Document_ID       FROM Paragraphs     )   ) );
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN (   SELECT Templates.Template_Type_Code   FROM Templates   INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID   WHERE Documents.Document_ID IN (     SELECT DISTINCT Document_ID     FROM Paragraphs))
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN (SELECT DISTINCT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IN (SELECT DISTINCT Paragraphs.Document_ID FROM Paragraphs))
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_ID IS NULL;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN   (SELECT Templates.Template_Type_Code   FROM Templates   INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID   WHERE Documents.Document_Name LIKE '%.txt');
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code IN (SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code);
SELECT Ref_Template_Types.Template_Type_Description, Templates.Template_Details FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code IN   (SELECT Templates.Template_Type_Code   FROM Templates)
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code IN (SELECT Templates.Template_Type_Code FROM Templates)
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Details FROM Templates WHERE Template_Type_Code = 'AD';
SELECT Template_Details FROM Templates WHERE Template_Type_Code = 'AD';
SELECT Layout_Type_Code, Layout_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'Book';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT RTT.Template_Type_Description FROM Ref_Template_Types RTT WHERE RTT.Template_Type_Description = 'Book';
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = "Book";
SELECT DISTINCT t.Template_ID, r.Template_Type_Description FROM Templates t JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code
SELECT DISTINCT tt.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_Name LIKE '%.txt%' GROUP BY Ref_Template_Types.Template_Type_Description;
SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID;
SELECT Documents.Document_Description, Templates.Template_Details FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT Documents.Document_Description, Templates.Template_Details FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT Documents.Document_Description FROM Documents WHERE Documents.Template_ID IN (SELECT Templates.Template_ID                 FROM Templates                 WHERE Templates.Template_Type_Code = 'text');
SELECT Documents.Document_ID, Documents.Document_Name, Templates.Template_Details FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation'
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Template_Type_Code = (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'Presentation' )
SELECT Documents.Document_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT count(*) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT Count(*) as total_paragraphs FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT count(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Summer Show' );
SELECT count(*) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT count(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Summer Show';
SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT count(*) FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_Text FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT Paragraph_ID, Document_ID, Paragraph_Text FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.* FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT Paragraph_Text, Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';
SELECT  Paragraph_ID, Paragraph_Text FROM  Paragraphs p JOIN  Documents d ON  p.Document_ID = d.Document_ID JOIN  Templates t ON  d.Template_ID = t.Template_ID WHERE  d.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT    Paragraph_ID, Paragraph_Text FROM   Paragraphs p JOIN   Documents d ON p.Document_ID = d.Document_ID WHERE   d.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'text' AND Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS quantity FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'TEXT' GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'TEXT' GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'TEXT' GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'TEXT' GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'TEXT' GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Quantity FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS quantity FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;
SELECT Documents.Document_Name, Documents.Document_ID, count(*) AS quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_Name, Documents.Document_ID HAVING count(*) >= 2;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID, Document_Name FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Document_Name HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) >= 2 )
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 2;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(*) as Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT MAX(paragraph_count) AS max_paragraph_count FROM (   SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS paragraph_count   FROM Documents d   JOIN Paragraphs p ON d.Document_ID = p.Document_ID   GROUP BY d.Document_ID, d.Document_Name ) subquery
SELECT Documents.Document_ID, Documents.Document_Name, count(*) AS quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY quantity DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(*) as Quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY Quantity DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(*) AS Paragraph_Count FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY Paragraph_Count DESC LIMIT 1;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN (   SELECT Document_ID, COUNT(*) AS Paragraph_Count   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS Subquery ON Documents.Document_ID = Subquery.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (   SELECT TOP 1 Document_ID   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC )
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN (   SELECT Document_ID, COUNT(*) AS paragraph_count   FROM Paragraphs   GROUP BY Document_ID   ORDER BY paragraph_count DESC   LIMIT 1 ) AS max_paragraphs ON Documents.Document_ID = max_paragraphs.Document_ID;
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = (   SELECT TOP 1 Document_ID   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(*) DESC )
SELECT Documents.Document_ID, Documents.Document_Name FROM Documents WHERE Documents.Document_ID = ( 	SELECT TOP 1 Document_ID 	FROM Paragraphs 	GROUP BY Document_ID 	ORDER BY COUNT(*) DESC )
SELECT TOP 1 Document_ID, COUNT(*) as quantity FROM Paragraphs GROUP BY Document_ID ORDER BY quantity ASC;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY quantity LIMIT 1;
SELECT   Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count   FROM Documents   LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID   GROUP BY Documents.Document_ID   ORDER BY paragraph_count   LIMIT 1;
SELECT  Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS quantity FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY quantity LIMIT 1; 
SELECT Documents.Document_ID, COUNT(*) AS quantity FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY quantity LIMIT 1;
SELECT     Documents.Document_ID   FROM     Documents   JOIN     (       SELECT         Document_ID,         COUNT(*) AS paragraph_count       FROM         Paragraphs       GROUP BY         Document_ID       ORDER BY         paragraph_count       LIMIT 1     ) AS doc_paragraph_count   ON     Documents.Document_ID = doc_paragraph_count.Document_ID;
SELECT Documents.Document_ID FROM Documents ORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC LIMIT 1;
SELECT Documents.Document_ID FROM Documents GROUP BY Documents.Document_ID ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Documents.Document_ID FROM Documents GROUP BY Documents.Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Documents.Document_ID FROM Documents GROUP BY Documents.Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Quantity FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT Document_ID, count(*) as quantity FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 1 and count(*) <= 2;
SELECT Documents.Document_ID, COUNT(*) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) >= 1 AND COUNT(*) <= 2;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Quantity FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraphs_Count FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING Paragraphs_Count BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE Documents.Template_ID IN (   SELECT Documents.Template_ID   FROM Documents   JOIN Templates ON Documents.Template_ID = Templates.Template_ID   JOIN (     SELECT Documents.Document_ID, COUNT(*) AS paragraph_count     FROM Documents     JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID     GROUP BY Documents.Document_ID   ) AS Subquery ON Documents.Document_ID = Subquery.Document_ID   WHERE Templates.Template_Type_Code = 'TXT'   AND Subquery.paragraph_count BETWEEN 1 AND 2 )
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2);
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN   (SELECT Paragraphs.Document_ID    FROM Paragraphs    GROUP BY Paragraphs.Document_ID    HAVING COUNT(*) BETWEEN 1 AND 2)
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;
SELECT Documents.Document_ID FROM Documents WHERE Documents.Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(*) BETWEEN 1 AND 2 )
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT COUNT(DISTINCT Teacher_ID) FROM course_arrange;
SELECT count(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;
SELECT COUNT(DISTINCT Teacher_ID) FROM course_arrange;
SELECT COUNT(Teacher_ID) AS Total_count_of_faculties FROM teacher;
SELECT COUNT(*) FROM teacher; 
SELECT Count(*) FROM teacher;
SELECT COUNT(*) as total_faculties FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT   Name FROM   teacher ORDER BY   Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT name FROM teacher ORDER BY age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC; 
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher;
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Name, teacher.Age, teacher.Hometown FROM teacher
SELECT teacher.Age, teacher.Hometown FROM teacher
SELECT `teacher.Age, teacher.Hometown`  `FROM teacher`
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT `Name` FROM `teacher` WHERE `Hometown` <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'; 
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> "Little Lever Urban District";
SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';
SELECT teacher.Name FROM teacher WHERE teacher.Hometown != "Little Lever Urban District";
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT  SELECT Name FROM teacher WHERE Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT name FROM teacher WHERE age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33)
SELECT teacher.Name FROM teacher WHERE teacher.Age IN (32, 33);
SELECT  SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33;
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT ` Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)  `
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Name, Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Teacher.Hometown FROM teacher WHERE Teacher.Age = (SELECT MIN(Age) FROM Teacher)
SELECT teacher.Hometown FROM teacher WHERE teacher.Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(*) as Quantity FROM teacher GROUP BY teacher.Hometown;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS quantity FROM teacher GROUP BY Hometown;
SELECT teacher.Hometown, COUNT(*) AS Instructor_Count FROM teacher GROUP BY teacher.Hometown;
SELECT teacher.Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY teacher.Hometown;
SELECT Hometown, COUNT(*) AS instructor_count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS InstructorCount FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS NumberOfInstructors FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Instructor_count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Instructor_Count FROM teacher GROUP BY Hometown;
SELECT COUNT(*), t.Hometown FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Hometown ORDER BY COUNT(*) DESC;
SELECT COUNT(teacher.Hometown) AS frequency, teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY frequency DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT  Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Hometown, COUNT(*) as Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS FacultyCount FROM teacher GROUP BY Hometown ORDER BY FacultyCount DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC;
SELECT Hometown, COUNT(*) AS Quantity FROM teacher GROUP BY Hometown ORDER BY Quantity DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS quantity FROM teacher GROUP BY Hometown ORDER BY quantity DESC;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;
SELECT teacher1.Hometown FROM teacher as teacher1, teacher as teacher2 WHERE teacher1.Teacher_ID != teacher2.Teacher_ID AND teacher1.Hometown = teacher2.Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(DISTINCT Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT Town FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID; 
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT  teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC, course.Course ASC; 
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'math';
SELECT teacher.Name, count(course_arrange.Course_ID) as Curriculum_Count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, count(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(*) as num_curriculums FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) as Number_of_curriculums_taught FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) as num_curriculums FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) as Curriculum_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS course_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Course_Count FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course.Course_ID) AS curriculum_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID GROUP BY teacher.Teacher_ID;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(DISTINCT course_id) >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Quantity FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT teacher.Name, COUNT(course.Course_ID) AS curriculum_count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING curriculum_count >= 2;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT DISTINCT t.Name FROM teacher t WHERE t.Teacher_ID NOT IN (SELECT ca.Teacher_ID FROM course_arrange ca) 
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT course_arrange.Teacher_ID FROM course_arrange)
SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL;
SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT  Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange) 
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT count(*) FROM visitor WHERE Age < 30;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT ROUND(AVG(Age), 2) as Average_Age FROM visitor WHERE Level_of_membership <= 4;
SELECT  SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4; 
SELECT AVG(Age) as average_age FROM visitor WHERE Level_of_membership <= 4 
SELECT AVG(Age) AS average_age FROM visitor WHERE Level_of_membership <= 4; 
SELECT Visitor.Name, Visitor.Level_of_membership FROM Visitor WHERE Visitor.Level_of_membership > 4 ORDER BY Visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (   SELECT MAX(Num_of_Staff)   FROM museum )
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;
SELECT   SELECT AVG(Num_of_Staff)   FROM museum   WHERE Open_Year < 2009;
SELECT ROUND(AVG(Num_of_Staff), 2) FROM museum WHERE Open_Year < 2009;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009; 
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT museum.Name FROM museum WHERE museum.Num_of_Staff >   (SELECT MIN(Num_of_Staff)    FROM museum    WHERE Open_Year > 2010)
SELECT Name FROM museum WHERE Open_Year > 2010 AND Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum);
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)
SELECT Name FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 )
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING count(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID HAVING count(DISTINCT visit.Museum_ID) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING count(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN (   SELECT visitor_ID, MAX(Total_spent) AS Max_Total_spent   FROM visit   GROUP BY visitor_ID ) AS MaxSpent ON visitor.ID = MaxSpent.visitor_ID
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1; 
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(Total_spent) DESC LIMIT 1;
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Museum_ID, Name FROM visit GROUP BY Museum_ID, Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT (SELECT Museum_ID, Name FROM museum WHERE Museum_ID IN   (SELECT Museum_ID   FROM visit   GROUP BY Museum_ID   ORDER BY COUNT(*) DESC   LIMIT 1) )
SELECT Museum_ID, Name, COUNT(Museum_ID) AS Visits FROM visit GROUP BY Museum_ID ORDER BY Visits DESC LIMIT 1;
SELECT Museum_ID, Name FROM visit GROUP BY Museum_ID, Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT DISTINCT Museum_ID FROM visit)
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL;
SELECT museum.Name FROM museum WHERE museum.Museum_ID NOT IN (SELECT visit.Museum_ID FROM visit)
SELECT m.Name FROM museum m WHERE m.Museum_ID NOT IN (SELECT v.Museum_ID FROM visit v)
SELECT museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL;
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID GROUP BY visit.visitor_ID ORDER BY SUM(visit.Num_of_Ticket) DESC LIMIT 1;
SELECT  SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS maximum_tickets FROM visit; 
SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit; 
SELECT What are the average and maximum number of tickets bought in all guests?
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit; 
SELECT AVG(Num_of_Ticket) AS average_tickets_bought, MAX(Num_of_Ticket) AS maximum_tickets_bought FROM visit;
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT  SUM(v.Total_spent) AS total_ticket_expense FROM visit v JOIN visitor vs ON v.visitor_ID = vs.ID WHERE vs.Level_of_membership = 1 
SELECT SUM(visit.Total_spent) AS Total_ticket_expense FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT SUM(visit.Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT Total_spent FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;
SELECT v.Name FROM visit AS v JOIN museum AS m ON v.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 AND v.visitor_ID IN (   SELECT visitor_ID   FROM visit AS v   JOIN museum AS m ON v.Museum_ID = m.Museum_ID   WHERE m.Open_Year > 2011 )
SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID WHERE museum.Open_Year < 2009 AND visit.visitor_ID IN   (SELECT distinct visit.visitor_ID   FROM museum   JOIN visit ON museum.Museum_ID = visit.Museum_ID   WHERE museum.Open_Year > 2011); 
SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND visit.Museum_ID IN (   SELECT Museum_ID   FROM museum   WHERE Open_Year > 2011 )
SELECT visitor.Name FROM visitor INNER JOIN visit ON visitor.ID=visit.visitor_ID INNER JOIN museum ON visit.Museum_ID=museum.Museum_ID WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011
SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND visit.visitor_ID IN (   SELECT visit.visitor_ID   FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE museum.Open_Year > 2011 )
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit          INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID          WHERE Open_Year > 2010)
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (   SELECT visitor_ID   FROM visit   WHERE Museum_ID IN (     SELECT Museum_ID     FROM museum     WHERE Open_Year > 2010   ) );
SELECT  COUNT(*) FROM visitor WHERE ID NOT IN   (SELECT DISTINCT visitor_ID    FROM visit    INNER JOIN museum ON visit.Museum_ID = museum.Museum_ID    WHERE Open_Year > 2010) 
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID          FROM visit          JOIN museum ON visit.Museum_ID = museum.Museum_ID          WHERE Open_Year > 2010)
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID IN (   SELECT Museum_ID   FROM museum   WHERE Open_Year <= 2010 )
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;
SELECT COUNT(DISTINCT winner_id) + COUNT(DISTINCT loser_id) AS total_participants FROM matches;
SELECT COUNT(DISTINCT winner_id) + COUNT(DISTINCT loser_id) AS total_participants FROM matches;
SELECT COUNT(DISTINCT winner_id) + COUNT(DISTINCT loser_id) AS total_participants FROM matches 
SELECT count(DISTINCT winner_id) + count(DISTINCT loser_id) FROM matches;
SELECT count(DISTINCT winner_id) + count(DISTINCT loser_id) AS total_participants FROM matches;
SELECT COUNT(DISTINCT player_id) AS participants FROM players; 
SELECT COUNT(DISTINCT player_id) as num_of_participants FROM players; 
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT COUNT(DISTINCT player_id) FROM players;
SELECT count(*) AS total_competitions FROM matches;
SELECT count(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT COUNT(DISTINCT match_num) AS total_competitions FROM matches;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*)  FROM matches;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA'
SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';
SELECT  SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches  
SELECT ROUND(AVG(loser_age),2) AS avg_loser_age, ROUND(AVG(winner_age),2) AS avg_winner_age FROM matches;
SELECT ROUND(AVG(winner_age), 2) AS average_winner_age,    ROUND(AVG(loser_age), 2) AS average_loser_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) as average_loser_age, AVG(winner_age) as average_winner_age FROM matches;
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;
SELECT   AVG(loser_age) AS avg_loser_age,   AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) as average_loser_age, AVG(winner_age) as average_winner_age FROM matches;
SELECT AVG(winner_rank) as average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches 
SELECT AVG(winner_rank) as average_winner_rank FROM matches;
SELECT AVG(winner_rank) as average_rank FROM matches
SELECT AVG(winner_rank) AS average_winner_rank FROM matches 
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT  ROUND(AVG(winner_rank), 2) AS average_winner_rank FROM matches; 
SELECT AVG(winner_rank) AS average_rank FROM matches 
SELECT AVG(winner_rank) FROM matches;
SELECT  MAX(loser_rank) AS highest_rank_of_losers FROM matches; 
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches 
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches 
SELECT  MAX(loser_rank) AS highest_rank_of_losers FROM matches 
SELECT ranking FROM rankings, matches WHERE rankings.player_id = matches.loser_id ORDER BY ranking DESC LIMIT 1;
SELECT MAX(loser_rank) AS best_rank FROM matches;
SELECT MAX(loser_rank) as best_rank_of_losers FROM matches;
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches 
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches;
SELECT  MAX(loser_rank) AS best_rank FROM matches 
SELECT COUNT(DISTINCT p.country_code) AS distinct_state_codes FROM players p JOIN matches m ON m.winner_id = p.player_id OR m.loser_id = p.player_id;
SELECT COUNT(DISTINCT p.country_code) AS distinct_country_codes FROM players p JOIN matches m ON m.winner_id = p.player_id OR m.loser_id = p.player_id;
SELECT COUNT(DISTINCT p.country_code) AS num_distinct_states FROM players p JOIN matches m ON m.winner_id = p.player_id OR m.loser_id = p.player_id;
SELECT COUNT(DISTINCT p.country_code) AS distinct_state_codes FROM players p JOIN matches m ON m.winner_id = p.player_id OR m.loser_id = p.player_id;
SELECT COUNT(DISTINCT players.country_code) FROM players;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT p.country_code) AS distinct_states FROM players p;
SELECT COUNT(DISTINCT p.country_code) FROM players p;
SELECT COUNT(DISTINCT p.country_code) AS num_of_states FROM players p
SELECT COUNT(DISTINCT p.country_code) AS distinct_states FROM players p; 
SELECT  SELECT COUNT(DISTINCT loser_name) FROM matches; 
SELECT  COUNT(DISTINCT loser_name) AS quantity FROM matches; 
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT  COUNT(DISTINCT loser_name) AS distinct_name_of_losers FROM matches; 
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) as quantity FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches; 
SELECT count(DISTINCT loser_name) as quantity FROM matches;
SELECT COUNT(DISTINCT loser_name) AS quantity FROM matches; 
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name, COUNT(*) AS quantity FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name, count(*) as quantity FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT tourney_name, count(*) as quantity FROM matches GROUP BY tourney_name HAVING count(*) > 10;
SELECT DISTINCT players.first_name, players.last_name FROM matches INNER JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 OR year = 2016 GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT year) = 2;
SELECT DISTINCT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 OR year = 2016 GROUP BY winner_id HAVING COUNT(DISTINCT year) = 2
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2013 OR matches.year = 2016 GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT matches.year) = 2;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT year) = 2;
SELECT players.first_name, players.last_name FROM players INNER JOIN matches m1 ON players.player_id = m1.winner_id AND YEAR(m1.tourney_date) = 2013 INNER JOIN matches m2 ON players.player_id = m2.winner_id AND YEAR(m2.tourney_date) = 2016
SELECT players.first_name, players.last_name FROM players INNER JOIN matches AS m1 ON players.player_id = m1.winner_id INNER JOIN matches AS m2 ON players.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT matches.year) = 2;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE YEAR(tourney_date) IN (2013, 2016) GROUP BY players.player_id, players.first_name, players.last_name HAVING COUNT(DISTINCT YEAR(tourney_date)) = 2;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.year IN (2013, 2016) GROUP BY players.first_name, players.last_name HAVING COUNT(DISTINCT matches.year) = 2;
SELECT COUNT(DISTINCT match_num) AS competition_count FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(DISTINCT match_num) AS competition_count FROM matches WHERE year IN (2013, 2016) 
SELECT COUNT(DISTINCT match_num) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(match_num) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(DISTINCT match_num) AS competition_count FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(DISTINCT tourney_id) AS quantity FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT count(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND matches.winner_id IN   (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open')
SELECT players.country_code, players.first_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' OR tourney_name = 'Australian Open' GROUP BY players.country_code, players.first_name HAVING COUNT(*) > 1
SELECT first_name, country_code FROM players WHERE player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'WTA Championships'   INTERSECT   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' );
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' OR matches.tourney_name = 'Australian Open' GROUP BY players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;
SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' )
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN (   SELECT player_id, birth_date   FROM players   WHERE birth_date = (     SELECT MAX(birth_date)     FROM players   ) ) oldest ON p.player_id = oldest.player_id;
SELECT  players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players); 
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players);
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MAX(birth_date) FROM players)
SELECT first_name, ioc FROM players WHERE birth_date = (SELECT MAX(birth_date) FROM players)
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date; 
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT player_id, first_name, last_name, country_code FROM players WHERE player_id = (   SELECT player_id   FROM rankings   GROUP BY player_id   ORDER BY COUNT(player_id) DESC   LIMIT 1 )
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.country_code ORDER BY COUNT(rankings.tours) DESC LIMIT 1;
SELECT I understand the requirement. Here is the SQL query:
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY rankings.tours DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE tours = (   SELECT MAX(tours) FROM rankings )
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)
SELECT MAX(year) as year_with_most_competitions FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  year, count(*) as quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1; 
SELECT year, COUNT(*) AS competition_count FROM matches GROUP BY year ORDER BY competition_count DESC LIMIT 1;
SELECT year, COUNT(*) AS competition_count FROM matches GROUP BY year ORDER BY competition_count DESC LIMIT 1; 
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1; 
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1; 
SELECT year, count(*) as competition_count FROM matches GROUP BY year ORDER BY competition_count desc LIMIT 1; 
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY quantity DESC LIMIT 1; 
SELECT year, count(*) as quantity FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1; 
SELECT COUNT(DISTINCT tourney_name) AS competition_count, year FROM matches GROUP BY year ORDER BY competition_count DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(winner_rank_points) AS total_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, max(rankings.ranking_points) FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY COUNT(matches.match_num) DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) as total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT players.first_name, players.last_name, sum(rankings.ranking_points) AS total_rank_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, COUNT(matches.winner_id) AS num_matches, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, rankings.ranking_points ORDER BY num_matches DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) as total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(COUNT(*)), MAX(rankings.ranking_points) FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) as total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name ORDER BY SUM(rankings.ranking_points) DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(winner_wins), r.ranking_points FROM players JOIN (   SELECT winner_id, COUNT(*) AS winner_wins   FROM matches   GROUP BY winner_id ) w ON players.player_id = w.winner_id JOIN rankings r ON players.player_id = r.player_id;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1;
SELECT winner_name FROM matches m INNER JOIN players p ON m.winner_id = p.player_id INNER JOIN rankings r ON m.winner_id = r.player_id WHERE tourney_name = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE tourney_name = 'Australian Open' ORDER BY ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, MAX(rankings.ranking_points) as max_rank_points FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open'
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT matches.winner_name FROM matches WHERE matches.tourney_level = 'Grand Slam' AND matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name FROM   players INNER JOIN   matches ON   players.player_id = matches.winner_id WHERE   matches.tourney_name = 'Australian Open' ORDER BY   matches.winner_rank_points DESC LIMIT 1;
SELECT matches.loser_name, matches.winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches); 
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches); 
SELECT  players.first_name, players.last_name FROM matches JOIN players ON matches.loser_id = players.player_id WHERE minutes = (   SELECT MAX(minutes) FROM matches ) UNION SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE minutes = (   SELECT MAX(minutes) FROM matches );
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.minutes = (   SELECT MAX(minutes) FROM matches )
SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT winner_name, loser_name FROM matches WHERE minutes = (   SELECT MAX(minutes)   FROM matches )
SELECT player_id, AVG(ranking) AS avg_ranking, first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY player_id, first_name;
SELECT players.first_name, players.last_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT  players.first_name, players.last_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, AVG(ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN matches ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_rank FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT first_name, AVG(ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name;
SELECT p.first_name, p.last_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name,   players.last_name,   SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name, players.last_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.country_code, COUNT(DISTINCT players.player_id) AS num_participants FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as participant_count FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) AS participant_count FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) AS participant_count FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as participant_count FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) as quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, COUNT(*) AS quantity FROM players GROUP BY players.country_code;
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code;
SELECT (SELECT p.country_code AS state, COUNT(DISTINCT m.winner_id) + COUNT(DISTINCT m.loser_id) AS participant_count FROM players p LEFT JOIN matches m ON p.player_id = m.winner_id OR p.player_id = m.loser_id GROUP BY p.country_code ORDER BY participant_count DESC LIMIT 1)
SELECT MAX(state_abbr) AS state_with_most_participants FROM (   SELECT COUNT(DISTINCT p.player_id) AS participant_count, substr(p.country_code,1,2) AS state_abbr   FROM players p   GROUP BY substr(p.country_code,1,2) ) subquery;
SELECT (SELECT player_id, country_code FROM players) AS player_country GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT Abbreviation, COUNT(*) AS Quantity FROM players GROUP BY country_code ORDER BY Quantity DESC LIMIT 1;
SELECT DISTINCT LEFT(p.country_code, 2) AS state,     COUNT(p.player_id) AS quantity FROM players p JOIN matches m ON p.player_id = m.winner_id OR p.player_id = m.loser_id GROUP BY state ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(*) as quantity, p.country_code FROM players p GROUP BY p.country_code ORDER BY quantity DESC LIMIT 1;
SELECT Sorry, I cannot fulfill this request.
SELECT COUNT(*) AS quantity, p.country_code AS nation FROM players p GROUP BY p.country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code, COUNT(*) AS participant_count FROM players GROUP BY country_code ORDER BY participant_count DESC LIMIT 1;
SELECT Players.country_code, COUNT(*) AS quantity FROM Players GROUP BY Players.country_code ORDER BY quantity DESC LIMIT 1;
SELECT  SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50; 
SELECT  SELECT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(*) > 50; 
SELECT p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(*) > 50; 
SELECT COUNT(player_id), p.country_code FROM players p GROUP BY p.country_code HAVING COUNT(player_id) > 50;
SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50; 
SELECT DISTINCT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT players.country_code, count(*) as quantity FROM players GROUP BY players.country_code HAVING count(*) > 50;
SELECT COUNT(*) AS quantity, winner_ioc FROM matches GROUP BY winner_ioc HAVING COUNT(*) > 50;
SELECT DISTINCT players.country_code FROM players GROUP BY players.country_code HAVING count(*) > 50;
SELECT COUNT(*) as quantity, players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > 50;
SELECT ranking_date, count(*) AS total_trips FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) as num_trips FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) AS total_trips FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_trips FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_trips FROM rankings GROUP BY ranking_date;
SELECT ranking_date, count(*) as total_travels FROM rankings GROUP BY ranking_date;
SELECT I would write the following SQL query for the given question: 
SELECT ranking_date, count(*) as total_travels FROM rankings GROUP BY ranking_date
SELECT  ranking_date, COUNT(*) as total_travels FROM rankings GROUP BY ranking_date; 
SELECT ranking_date, COUNT(*) AS total_travels FROM rankings GROUP BY ranking_date;
SELECT  year, count(*) AS number_of_games FROM matches GROUP BY year; 
SELECT YEAR(tourney_date) AS year, COUNT(*) AS game_count FROM matches GROUP BY year 
SELECT year, count(*) as num_games FROM matches GROUP BY year; 
SELECT year, COUNT(*) as quantity FROM matches GROUP BY year;
SELECT year, count(*) as num_of_games FROM matches GROUP BY year;
SELECT year, count(*) as game_count FROM matches GROUP BY year;
SELECT YEAR(tourney_date) AS year, COUNT(*) AS games_played FROM matches GROUP BY year;
SELECT year, count(*) as games_played FROM matches GROUP BY year;
SELECT year, count(*) as game_count FROM matches GROUP BY year; 
SELECT year, count(*) as games_played FROM matches GROUP BY year;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.winner_age LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT player_id, first_name, last_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY players.birth_date LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(DISTINCT winners.player_id) FROM (SELECT m.winner_id as player_id    FROM matches m    WHERE m.tourney_name = 'WTA Championships'    AND p.hand = 'L') as winners
SELECT COUNT(DISTINCT winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'L' AND matches.tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT count(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank_points_table ON matches.winner_id = max_rank_points_table.winner_id AND matches.winner_rank_points = max_rank_points_table.max_rank_points;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_rank ON players.player_id = max_rank.winner_id JOIN matches ON matches.winner_id = max_rank.winner_id AND matches.winner_rank_points = max_rank.max_rank_points;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY winner_id ) AS max_points ON matches.winner_id = max_points.winner_id AND matches.winner_rank_points = max_points.max_rank_points;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (   SELECT winner_id, MAX(winner_rank_points) as max_rank_points   FROM matches   GROUP BY winner_id ) as max_rank ON players.player_id = max_rank.winner_id
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN (   SELECT winner_id, MAX(winner_rank_points) AS max_points   FROM matches   GROUP BY winner_id ) AS max_points_table ON players.player_id = max_points_table.winner_id WHERE players.player_id = (   SELECT winner_id   FROM matches   WHERE winner_rank_points = max_points_table.max_points   LIMIT 1 );
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON players.player_id = matches.winner_id INNER JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN (   SELECT player_id, MAX(winner_rank_points) AS max_rank_points   FROM matches   GROUP BY player_id ) AS max_points ON matches.winner_id = max_points.player_id AND matches.winner_rank_points = max_points.max_rank_points;
SELECT  hand, count(*) as quantity FROM players GROUP BY hand; 
SELECT COUNT(player_id) AS quantity, hand FROM players GROUP BY hand;
SELECT  hand, COUNT(*) AS quantity FROM players GROUP BY hand; 
SELECT  hand, COUNT(*) AS quantity FROM players GROUP BY hand; 
SELECT players.hand, COUNT(*) as quantity FROM players GROUP BY players.hand;
SELECT COUNT(*) AS quantity, hand FROM players GROUP BY hand;
SELECT COUNT(*) AS quantity FROM players GROUP BY hand;
SELECT COUNT(*) AS quantity, hand FROM players GROUP BY hand;
SELECT players.hand, COUNT(*) as quantity FROM players GROUP BY players.hand;
SELECT COUNT(*) as quantity, hand FROM players GROUP BY hand;
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'; 
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT    SELECT COUNT(*)   FROM ship   WHERE disposition_of_ship = 'Captured';
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle
SELECT name, date, result FROM battle; 
SELECT battle.name, battle.date, battle.result FROM battle;
SELECT name, date, result FROM battle;
SELECT name, date, result FROM battle;
SELECT battle.id, MIN(death.killed) AS minimum_death_toll, MAX(death.killed) AS maximum_death_toll FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death;
SELECT  SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death 
SELECT battle.id, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id;
SELECT  SELECT battle.id, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id;
SELECT AVG(injured) AS average_injuries_caused FROM death;
SELECT AVG(injured) AS average_injuries FROM death 
SELECT AVG(injured) FROM death
SELECT AVG(injured) FROM death;
SELECT AVG(injured) as average_injuries FROM death;
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT death.*,   ship.id as ship_id,   ship.name as ship_name FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT death.killed, death.injured FROM death INNER JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'
SELECT battle.id, battle.name FROM battle JOIN death ON death.caused_by_ship_id = (SELECT id FROM ship WHERE lost_in_battle = battle.id) GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT battle.id, battle.name FROM battle INNER JOIN death ON death.caused_by_ship_id IN (SELECT id FROM ship WHERE lost_in_battle = battle.id) GROUP BY battle.id, battle.name HAVING SUM(death.killed + death.injured) > 10;
SELECT battle.id, battle.name FROM battle JOIN death ON death.caused_by_ship_id IN (   SELECT id   FROM ship   WHERE lost_in_battle = battle.id ) GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT battle.id, battle.name FROM battle JOIN death ON death.caused_by_ship_id = battle.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;
SELECT   battle.id, battle.name FROM   battle JOIN   death ON death.caused_by_ship_id IN (SELECT id FROM ship WHERE ship.lost_in_battle = battle.id) GROUP BY   battle.id, battle.name HAVING   SUM(death.killed) > 10;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY COUNT(injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT  DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'; 
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT result) AS result_count FROM battle; 
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle         FROM ship         WHERE tonnage = '225')
SELECT count(*) FROM battle WHERE id NOT IN (   SELECT lost_in_battle   FROM ship   WHERE tonnage = '225' )
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage != '225' OR ship.tonnage IS NULL;
SELECT COUNT(DISTINCT battle.id) FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE tonnage != '225' OR tonnage IS NULL;
SELECT COUNT(*) FROM battle WHERE id NOT IN (   SELECT lost_in_battle   FROM ship   WHERE tonnage = '225' )
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT battle.name, battle.date FROM battle INNER JOIN ship AS s1 ON battle.id = s1.lost_in_battle INNER JOIN ship AS s2 ON battle.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';
SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')
SELECT battle.name, battle.date FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta');
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (   SELECT lost_in_battle   FROM ship   WHERE location = 'English Channel' )
SELECT name, result, bulgarian_commander FROM battle WHERE location <> 'English Channel' AND id NOT IN (SELECT lost_in_battle FROM ship)
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location != 'English Channel' OR ship.location IS NULL;
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.location != 'English Channel' OR ship.location IS NULL
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT note FROM death WHERE note LIKE '%East%';
SELECT note FROM death WHERE note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT death.note FROM death WHERE death.note LIKE '%East%';
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses
SELECT Addresses.line_1, Addresses.line_2 FROM Addresses
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT `line_1`, `line_2` FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT addresses.line_1, addresses.line_2 FROM addresses;
SELECT line_1, line_2 FROM Addresses
SELECT address_id, line_1, line_2 FROM Addresses;
SELECT COUNT(DISTINCT course_id) FROM Courses;
SELECT COUNT(*) AS total_curriculums FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs;
SELECT COUNT(DISTINCT course_id) AS total_curriculums FROM Courses;
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS curriculums_count FROM Degree_Programs;
SELECT count(*) FROM Degree_Programs 
SELECT Count(DISTINCT degree_program_id) AS curriculums_count FROM Student_Enrolment;
SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS number_of_curriculums FROM Degree_Programs;
SELECT Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Mathematics';
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name = 'Math';
SELECT *FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id WHERE course_name = 'Math'
SELECT Degree_Programs, course_id, course_name, course_description FROM Degree_Programs JOIN Sections ON Degree_Programs.degree_program_id = Sections.course_id JOIN Courses ON Sections.course_id = Courses.course_id WHERE department_name = 'Mathematics';
SELECT DP.degree_summary_name, D.department_name, C.course_name, C.course_description FROM Degree_Programs DP JOIN Departments D ON DP.department_id = D.department_id JOIN Sections S ON DP.degree_program_id = S.course_id JOIN Courses C ON S.course_id = C.course_id WHERE C.course_name = 'Mathematics';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT course_name, course_description FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id WHERE section_name LIKE '%math%'
SELECT course_name, course_description FROM Courses WHERE course_name like '%math%';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city='Port Chelsea';
SELECT department_id, department_name, COUNT(degree_program_id) AS num_degrees FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY department_id, department_name ORDER BY num_degrees DESC LIMIT 1;
SELECT Departments.department_id,     Departments.department_name,     COUNT(Degree_Programs.degree_program_id) AS degree_count  FROM Departments  JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT Departments.department_id, department_name, count(*) as quantity FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id, department_name ORDER BY count(*) DESC LIMIT 1;
SELECT Departments.department_id,     Departments.department_name,     COUNT(Degree_Programs.degree_program_id) AS degree_count FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY degree_count DESC LIMIT 1;
SELECT  department_id,  COUNT(DISTINCT degree_program_id) AS number_of_degrees FROM Degree_Programs GROUP BY department_id ORDER BY COUNT(DISTINCT degree_program_id) DESC LIMIT 1;
SELECT department_id, department_name, COUNT(degree_program_id) AS degree_count FROM Degree_Programs GROUP BY department_id ORDER BY degree_count DESC;
SELECT departments.department_id, departments.department_name FROM degree_programs JOIN departments ON degree_programs.department_id = departments.department_id GROUP BY departments.department_id ORDER BY COUNT(*) DESC;
SELECT department_id, department_name, count(*) AS degree_count FROM Degree_Programs GROUP BY department_id HAVING count(*) = (SELECT MAX(degree_count) FROM (SELECT department_id, count(*) AS degree_count FROM Degree_Programs GROUP BY department_id) AS counts) 
SELECT department_id, department_name FROM Departments WHERE department_id IN (   SELECT department_id   FROM Degree_Programs   GROUP BY department_id   HAVING COUNT(*) = (     SELECT MAX(degree_count)     FROM (       SELECT department_id, COUNT(*) as degree_count       FROM Degree_Programs       GROUP BY department_id     ) AS temp   ) ) 
SELECT division_id, department_name AS division_name, count(*) AS quantity_of_degrees FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id GROUP BY division_id HAVING count(*) = (SELECT max(div_count) FROM (SELECT count(*) AS div_count FROM Degree_Programs GROUP BY department_id) AS max_count)
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) AS num_departments FROM Degree_Programs;
SELECT count(department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) AS quantity FROM Degree_Programs;
SELECT COUNT(DISTINCT Departments.department_id) AS department_count FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) AS department_count FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) as degree_count FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS degree_count FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS number_of_degrees FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) as number_of_degrees FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS number_of_degrees_offered FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS total_degrees FROM Degree_Programs;
SELECT Count(degree_program_id) FROM Degree_Programs
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT COUNT(Degree_Programs.degree_program_id) FROM Degree_Programs INNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';
SELECT COUNT(Degree_Programs.degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (   SELECT department_id   FROM Departments   WHERE department_name = 'engineering' )
SELECT COUNT(*) FROM Degree_Programs WHERE department_id =   (SELECT department_id    FROM Departments    WHERE department_name = 'engineering');
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT COUNT(Degree_Programs.degree_program_id) FROM Degree_Programs WHERE Degree_Programs.department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering')
SELECT COUNT(Degree_Programs.degree_program_id) FROM Degree_Programs WHERE Degree_Programs.department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering'); 
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT sections.section_name, sections.section_description FROM sections;
SELECT Sections.section_name, Sections.section_description FROM Sections
SELECT Sections.section_name, Sections.section_description FROM Sections;
SELECT Sections.section_name, Sections.section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN   (SELECT degree_program_id    FROM Sections    GROUP BY degree_program_id    HAVING COUNT(*) <= 2)
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (   SELECT degree_program_id   FROM Sections   GROUP BY degree_program_id   HAVING COUNT(*) <= 2 )
SELECT  degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (   SELECT degree_program_id   FROM Sections   GROUP BY degree_program_id   HAVING COUNT(*) <= 2 ) 
SELECT degree_program_id,degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id               FROM Sections               GROUP BY degree_program_id               HAVING COUNT(*) <= 2)
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (   SELECT degree_program_id   FROM Sections   GROUP BY degree_program_id   HAVING COUNT(*) <= 2 )
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (   SELECT degree_program_id   FROM Sections   GROUP BY degree_program_id   HAVING COUNT(*) < 2 )
SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs LEFT JOIN Sections ON Degree_Programs.degree_program_id = Sections.course_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name HAVING COUNT(Sections.section_id) < 2;
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id NOT IN (   SELECT degree_program_id   FROM Sections   GROUP BY degree_program_id   HAVING COUNT(*) >= 2 )
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id IN   (SELECT degree_program_id    FROM Sections    GROUP BY degree_program_id    HAVING COUNT(*) < 2)
SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id NOT IN (SELECT degree_program_id                 FROM Sections                 GROUP BY degree_program_id                 HAVING COUNT(*) >= 2);
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT Semesters.semester_id, Semesters.semester_name, count(*) as quantity FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Undergraduate' GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY quantity DESC LIMIT 1;
SELECT Semester_id,semester_name, count(*) as quantity FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Undergraduate' GROUP BY semester_id,semester_name ORDER BY count(*) DESC LIMIT 1;
SELECT   Semesters.semester_id,   Semesters.semester_name FROM   Semesters JOIN   Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN   Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE   Degree_Programs.degree_summary_description = 'undergraduate' GROUP BY   Semesters.semester_id,   Semesters.semester_name ORDER BY   COUNT(*) DESC LIMIT 1;
SELECT  Semesters.semester_id, Semesters.semester_name, COUNT(*) AS quantity FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%undergraduate%' GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY quantity DESC LIMIT 1; 
SELECT semesters.semester_id, semesters.semester_name, count(*) as quantity FROM student_enrolment JOIN semesters ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Undergraduate' GROUP BY semesters.semester_id, semesters.semester_name ORDER BY quantity DESC LIMIT 1;
SELECT  Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'undergraduate' GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT  Semester_id, Semester_name FROM Semesters WHERE Semester_id IN (SELECT semester_id         FROM Student_Enrolment         JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id         WHERE Degree_Programs.degree_summary_name = 'undergraduate'         GROUP BY semester_id         ORDER BY COUNT(*) DESC         LIMIT 1); 
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Undergraduate' GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT semester_id, COUNT(*) AS quantity FROM Student_Enrolment JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Undergraduate' GROUP BY semester_id ORDER BY quantity DESC LIMIT 1;
SELECT Semesters.semester_id, Semesters.semester_name, COUNT(*) as undergraduate_count FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Undergraduate' GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY undergraduate_count DESC LIMIT 1;
SELECT  Degree_Programs.* FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%'; 
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%'
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%';
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%'
SELECT degree_program_id, degree_summary_name, degree_summary_description FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%'
SELECT Departments.department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_id,department_name,department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_name, department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_id, department_name, department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT degree_summary_description FROM Degree_Programs WHERE degree_summary_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2  This SQL query retrieves the first name, middle name, last name, and student ID of students who are enrolled in 2 degree programs in one term. This is achieved by joining the Students and Student_Enrolment tables and using the COUNT and DISTINCT functions to filter the results.
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Undergraduate' GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING count(*) = 2;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name FROM Students INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2;
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IN   (SELECT degree_program_id    FROM Student_Enrolment    GROUP BY student_id, semester_id   HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(*) = 2) AND se.semester_id IN   (SELECT semester_id    FROM Student_Enrolment    GROUP BY student_id   HAVING COUNT(DISTINCT degree_program_id) = 2 AND COUNT(*) = 2);
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 
SELECT first_name, middle_name, last_name FROM Students WHERE degree_program_id IN (   SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_name LIKE '%Bachelor%' ); 
SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT first_name, middle_name, last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name LIKE '%Bachelor%' 
SELECT  SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor'; 
SELECT  Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE 'Bachelor%' 
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT first_name, middle_name, last_name FROM Students WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%');
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT degree_summary_name, count(*) as quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, count(*) as quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS number_of_students FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY number_of_students DESC LIMIT 1;
SELECT degree_summary_name, COUNT(*) as quantity FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS quantity FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name, COUNT(*) as quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_summary_name, COUNT(student_enrolment_id) AS student_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT degree_summary_name, COUNT(*) AS num_students_enrolled FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;
SELECT  Degree_Programs.degree_summary_name, COUNT(*) AS quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment GROUP BY degree_program_id, degree_summary_name ORDER BY count(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment LEFT JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name, degree_summary_description, COUNT(*) AS student_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id, degree_summary_name, degree_summary_description ORDER BY student_count DESC LIMIT 1;
SELECT degree_program_id, degree_summary_name, degree_summary_description FROM Degree_Programs WHERE degree_program_id = (   SELECT degree_program_id   FROM Student_Enrolment   GROUP BY degree_program_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT degree_program_id, degree_summary_description FROM Student_Enrolments INNER JOIN Degree_Programs ON Student_Enrolments.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id, degree_summary_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT degree_program_id, degree_summary_description FROM Degree_Programs WHERE degree_program_id = (   SELECT degree_program_id   FROM Student_Enrolment   GROUP BY degree_program_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT  Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*) as enrollments, Student_Enrolment.degree_program_id as undergraduate_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS number_of_enrollments, se.degree_program_id AS undergraduate_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(DISTINCT Student_Enrolment.degree_program_id) AS num_enrollments, Student_Enrolment.degree_program_id AS undergraduate_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(*) as number_of_enrollments, Student_Enrolment.degree_program_id as undergraduate_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.degree_program_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT Student_id,	first_name,	middle_name,	last_name,	 COUNT(student_enrolment_id) AS enrolement_count, degree_program_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY student_id,	first_name,	middle_name,	last_name, degree_program_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(*) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Undergraduate%' GROUP BY Students.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(*) AS enrolment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'undergraduate' GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrolment_count DESC LIMIT 1; 
SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(*) as enrollment_quantity FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.other_details = 'undergraduate' GROUP BY Students.student_id ORDER BY enrollment_quantity DESC LIMIT 1;
SELECT first_name, middle_name, last_name, Students.student_id, COUNT(DISTINCT Student_Enrolment.degree_program_id) AS enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%undergraduate%' GROUP BY Students.student_id ORDER BY enrollments DESC LIMIT 1;
SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, count(*) as enrollment_count FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'undergraduate' GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY enrollment_count DESC LIMIT 1;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment) 
SELECT Semesters.semester_name FROM Semesters WHERE Semesters.semester_id NOT IN (SELECT Student_Enrolment.semester_id FROM Student_Enrolment) 
SELECT Semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT Semesters.semester_name FROM Semesters WHERE NOT EXISTS (   SELECT 1   FROM Student_Enrolment   WHERE Student_Enrolment.semester_id = Semesters.semester_id )
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Semester_name FROM Semesters WHERE NOT EXISTS (SELECT * FROM Student_Enrolment WHERE Student_Enrolment.semester_id = Semesters.semester_id)
SELECT semester_name FROM Semesters WHERE NOT EXISTS (   SELECT 1   FROM Student_Enrolment   WHERE Student_Enrolment.semester_id = Semesters.semester_id )
SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;
SELECT Semester_name FROM Semesters WHERE semester_id NOT IN   (SELECT DISTINCT semester_id   FROM Student_Enrolment)
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name;
SELECT Courses.course_name FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id;
SELECT Course_name FROM Courses WHERE course_id IN (SELECT course_id           FROM Student_Enrolment_Courses)
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id;
SELECT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name;
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs WHERE EXISTS (SELECT 1 FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id)
SELECT DISTINCT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id;
SELECT degree_summary_name FROM Degree_Programs WHERE degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment)
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id;
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS quantity FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(*) AS quantity FROM Degree_Programs INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY quantity DESC LIMIT 1;
SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.degree_program_id) as enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY enrolment_count DESC LIMIT 1;
SELECT   Degree_Programs.degree_summary_name,   COUNT(*) AS Enrollments FROM   Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY   Degree_Programs.degree_summary_name ORDER BY   Enrollments DESC LIMIT 1;
SELECT degree_summary_name, count(*) as quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY count(*) DESC LIMIT 1;
SELECT degree_summary_name, COUNT(*) as quantity FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT  Degree_Programs.degree_summary_name, COUNT(*) AS num_students FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students DESC LIMIT 1; 
SELECT degree_summary_name, count(*) as student_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT   Degree_Programs.degree_summary_name,   COUNT(Student_Enrolment.student_enrolment_id) AS enrolment_count FROM   Student_Enrolment JOIN   Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY   Degree_Programs.degree_summary_name ORDER BY   enrolment_count DESC LIMIT 1;
SELECT degree_summary_name, count(*) as enrolment_count FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY enrolment_count DESC LIMIT 1;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT  last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT   last_name FROM   Students JOIN   Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN   Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE   Addresses.state_province_county = 'North Carolina'   AND Student_Enrolment.degree_program_id IS NULL;
SELECT last_name FROM Students INNER JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL 
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL; 
SELECT last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.degree_program_id IS NULL;
SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (SELECT student_id FROM Student_Enrolment) 
SELECT last_name FROM Students INNER JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'North Carolina' AND student_id NOT IN (   SELECT student_id   FROM Student_Enrolment ) 
SELECT last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se)
SELECT transcript_date, t1.student_id FROM Student_Enrolment_Courses t1 JOIN Student_Enrolment_Courses t2 ON t1.student_enrolment_id = t2.student_enrolment_id AND t1.student_course_id <> t2.student_course_id JOIN Transcripts ON t1.student_course_id = Transcripts.transcript_id 
SELECT Transcript_Contents.student_course_id, COUNT(*) AS result_count FROM Transcript_Contents GROUP BY Transcript_Contents.student_course_id HAVING COUNT(*) >= 2;
SELECT transcript_date, student_id FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY student_id HAVING COUNT(DISTINCT course_id) >= 2;
SELECT transcript_date, student_id FROM Student_Enrolment SE JOIN Student_Enrolment_Courses SEC ON SE.student_enrolment_id = SEC.student_enrolment_id JOIN Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id JOIN Transcripts T ON TC.transcript_id = T.transcript_id GROUP BY student_id HAVING COUNT(*) >= 2;
SELECT Transcript_Contents.student_course_id, Transcripts.transcript_date FROM Transcript_Contents INNER JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Transcript_Contents.student_course_id HAVING COUNT(*) >= 2;
SELECT date_first_registered, student_id FROM Student_Enrolment GROUP BY student_id HAVING COUNT(*) >= 2 
SELECT transcript_id,    DATE_FIRST_REGISTERED as date FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY student_enrolment.student_id HAVING COUNT(*) >= 2;
SELECT date_first_registered, student_id FROM Student_Enrolment GROUP BY student_id HAVING COUNT(*) >= 2 
SELECT student_id, date_first_registered FROM Student_Enrolment GROUP BY student_id, date_first_registered HAVING COUNT(*) >= 2;
SELECT DISTINCT se1.student_id, se1.student_enrolment_id, se1.date_first_registered FROM Student_Enrolment se1 JOIN Student_Enrolment se2 ON se1.student_id = se2.student_id GROUP BY se1.student_id, se1.student_enrolment_id, se1.date_first_registered HAVING COUNT(*) >= 2;
SELECT Sorry, I cannot fulfill this request.
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT Sorry, but I can't assist with that request.
SELECT  cell_mobile_number FROM Students WHERE first_name = 'Timothy' AND last_name = 'Ward'; 
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT TOP 1 first_name, middle_name, last_name FROM Students ORDER BY date_first_registered;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (   SELECT MIN(date_first_registered)   FROM Students )
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students);
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT  first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students) 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1; 
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (SELECT MIN(date_left) FROM Students WHERE date_left IS NOT NULL) 
SELECT first_name, middle_name, last_name FROM Students WHERE date_left = (   SELECT MIN(date_left)   FROM Students ) 
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id ORDER BY Student_Enrolment.date_left LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students WHERE Students.date_left IS NOT NULL ORDER BY Students.date_left LIMIT 1;
SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY transcripts.transcript_date LIMIT 1;
SELECT Students.first_name FROM Students INNER JOIN Addresses AS PermAddress ON Students.permanent_address_id = PermAddress.address_id INNER JOIN Addresses AS CurrAddress ON Students.current_address_id = CurrAddress.address_id WHERE PermAddress.line_1 != CurrAddress.line_1 OR PermAddress.line_2 != CurrAddress.line_2 OR PermAddress.line_3 != CurrAddress.line_3 OR PermAddress.city != CurrAddress.city OR PermAddress.zip_postcode != CurrAddress.zip_postcode OR PermAddress.state_province_county != CurrAddress.state_province_county OR PermAddress.country != CurrAddress.country OR PermAddress.other_address_details != CurrAddress.other_address_details;
SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id 
SELECT Students.first_name FROM Students JOIN Addresses perm_address ON perm_address.address_id = Students.permanent_address_id JOIN Addresses curr_address ON curr_address.address_id = Students.current_address_id WHERE perm_address.line_1 != curr_address.line_1 OR perm_address.line_2 != curr_address.line_2 OR perm_address.line_3 != curr_address.line_3 OR perm_address.city != curr_address.city OR perm_address.zip_postcode != curr_address.zip_postcode OR perm_address.state_province_county != curr_address.state_province_county OR perm_address.country != curr_address.country OR perm_address.other_address_details != curr_address.other_address_details;
SELECT Students.first_name FROM Students JOIN Addresses permanent_address ON Students.permanent_address_id = permanent_address.address_id JOIN Addresses current_address ON Students.current_address_id = current_address.address_id WHERE permanent_address.line_1 <> current_address.line_1  OR permanent_address.line_2 <> current_address.line_2  OR permanent_address.line_3 <> current_address.line_3  OR permanent_address.city <> current_address.city  OR permanent_address.zip_postcode <> current_address.zip_postcode  OR permanent_address.state_province_county <> current_address.state_province_county  OR permanent_address.country <> current_address.country  OR permanent_address.other_address_details <> current_address.other_address_details;
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id;
SELECT Students.first_name FROM Students WHERE Students.permanent_address_id <> Students.current_address_id;
SELECT first_name FROM Students JOIN Addresses AS permanent_address ON Students.permanent_address_id = permanent_address.address_id JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id WHERE permanent_address.line_1 != current_address.line_1 
SELECT Students.first_name FROM Students INNER JOIN Addresses current_addr ON Students.current_address_id = current_addr.address_id INNER JOIN Addresses perm_addr ON Students.permanent_address_id = perm_addr.address_id WHERE current_addr.line_1 <> perm_addr.line_1;
SELECT Students.first_name FROM Students JOIN Addresses AS permanent_address ON Students.permanent_address_id = permanent_address.address_id JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id WHERE permanent_address.line_1 <> current_address.line_1 OR permanent_address.line_2 <> current_address.line_2 OR permanent_address.line_3 <> current_address.line_3 OR permanent_address.city <> current_address.city OR permanent_address.zip_postcode <> current_address.zip_postcode OR permanent_address.state_province_county <> current_address.state_province_county OR permanent_address.country <> current_address.country OR permanent_address.other_address_details <> current_address.other_address_details;
SELECT Students.first_name FROM Students JOIN Addresses permanent_address on permanent_address.address_id = Students.permanent_address_id JOIN Addresses current_address on current_address.address_id = Students.current_address_id WHERE permanent_address.line_1 != current_address.line_1;
SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(Address_Id), line_1, line_2, line_3 FROM Addresses WHERE Address_Id IN (   SELECT Current_Address_Id   FROM Students   GROUP BY Current_Address_Id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT I would use the following SQL query to answer the question:
SELECT  addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 from addresses INNER JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT current_address_id, line_1, line_2, line_3 FROM Students GROUP BY current_address_id, line_1, line_2, line_3 ORDER BY COUNT(*) DESC LIMIT 1; 
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT AVG(transcript_date) AS average_print_date FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) as average_print_date FROM Transcripts;
SELECT AVG(transcript_date) as average_print_date FROM Transcripts;
SELECT AVG(date_first_registered) FROM Students;
SELECT Avg(date_first_registered) FROM Students;
SELECT AVG(date_first_registered) AS average_student_record_date FROM Students
SELECT AVG(date_first_registered) as average_student_record_date FROM Students
SELECT I can write SQL code for your question, but first, I need to know which date field from the Students table you would like to use to calculate the average student record date. Could you please specify the date field?
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT `date_first_registered`, `other_student_details` FROM Students ORDER BY `date_first_registered` LIMIT 1;
SELECT `date_first_registered`, `other_student_details` FROM Students ORDER BY `date_first_registered` LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT MIN(transcript_date) AS earliest_transcript_release_date,    transcript_id,    transcript_date,    other_details FROM Transcripts;
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts;
SELECT MIN(transcript_date), * FROM Transcripts;
SELECT MIN(transcript_date) AS earliest_transcript_date, transcript_id, other_details FROM Transcripts
SELECT count(student_id) as quantity FROM Students;
SELECT COUNT(*) FROM Students;
SELECT COUNT(*) FROM Students;
SELECT Count(student_id) FROM Students;
SELECT count(*) as student_count FROM Students;
SELECT COUNT(*) FROM Students;
SELECT COUNT(*) FROM Students; 
SELECT Count(*) from Students;
SELECT Count(*) FROM Students;
SELECT COUNT(*) FROM Students 
SELECT transcripts.transcript_date FROM students JOIN student_enrolment ON student_enrolment.student_id = students.student_id JOIN transcripts ON transcripts.transcript_id = (SELECT MAX(transcript_id) FROM transcript_contents WHERE student_course_id IN (SELECT student_course_id FROM student_enrolment_courses WHERE student_enrolment_id = student_enrolment.student_enrolment_id)) ORDER BY transcripts.transcript_date DESC LIMIT 1;
SELECT MAX(date_left) AS last_student_release_date FROM Students;
SELECT transcripts.transcript_date FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY transcript_date DESC LIMIT 1;
SELECT MAX(transcript_date) as last_student_record_release_date FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT MAX(date_left) FROM Students;
SELECT MAX(date_left) FROM Students;
SELECT MAX(date_left) as last_release_date FROM Students;
SELECT MAX(date_left) FROM Students;
SELECT count(student_enrolment_id) as quantity,student_enrolment_id FROM Student_Enrolment GROUP BY student_enrolment_id ORDER BY quantity DESC LIMIT 1;
SELECT COUNT(DISTINCT se.student_enrolment_id) AS max_enrollment_occurrences, se.student_enrolment_id FROM Student_Enrolment se
SELECT COUNT(DISTINCT student_id) AS max_enrollment_occurrences, student_enrolment_id FROM Student_Enrolment GROUP BY student_enrolment_id ORDER BY max_enrollment_occurrences DESC LIMIT 1;
SELECT COUNT(DISTINCT student_enrolment_id) AS max_enrollment_occurrences FROM Student_Enrolment;
SELECT COUNT(*) AS max_enrollment_times, student_enrolment_id FROM Student_Enrolment GROUP BY student_enrolment_id ORDER BY max_enrollment_times DESC LIMIT 1;
SELECT degree_program_id, COUNT(*) AS curriculum_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY curriculum_count DESC LIMIT 1;
SELECT  Degree_Programs.degree_program_id, count(*) as max_occurrences FROM Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY max_occurrences DESC LIMIT 1; 
SELECT degree_program_id, count(*) as quantity FROM Student_Enrolment GROUP BY degree_program_id ORDER BY quantity DESC LIMIT 1;
SELECT MAX(count) AS max_count, course_id AS max_count_course_id FROM (   SELECT course_id, count(*) AS count   FROM Student_Enrolment_Courses   GROUP BY course_id, student_enrolment_id ) subquery;
SELECT  degree_program_id, COUNT(*) AS max_enrollment_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY max_enrollment_count DESC LIMIT 1; 
SELECT date_first_registered, student_id FROM Students ORDER BY (SELECT count(*) FROM Student_Enrolment WHERE student_id = Students.student_id) ASC LIMIT 1; 
SELECT date_first_registered AS date_of_student_record, student_id, count(*) AS number_of_results FROM Students GROUP BY date_first_registered, student_id ORDER BY number_of_results LIMIT 1; 
SELECT date_first_registered AS date_of_student_record, student_id, COUNT(*) AS quantity FROM Students GROUP BY date_first_registered, student_id ORDER BY quantity LIMIT 1;
SELECT date_first_registered, student_id FROM Students ORDER BY (SELECT COUNT(*)      FROM Student_Enrolment      WHERE Student_Enrolment.student_id = Students.student_id) LIMIT 1;
SELECT   student_enrolment_id, date_first_registered FROM  Student_Enrolment ORDER BY  (SELECT   COUNT(*)  FROM   Student_Enrolment SE  WHERE   SE.student_id = Student_Enrolment.student_id  GROUP BY   SE.student_id) LIMIT 1; 
SELECT student_id, date_first_registered FROM Student_Enrolment GROUP BY student_id, date_first_registered ORDER BY COUNT(*) ASC LIMIT 1;
SELECT student_id, date_first_registered FROM Students ORDER BY (SELECT COUNT(*) FROM Student_Enrolment WHERE Students.student_id = Student_Enrolment.student_id) ASC LIMIT 1;
SELECT    MIN(count_results) AS min_results,   student_id,   date_first_registered FROM (   SELECT     se.student_id,     se.date_first_registered,     COUNT(*) AS count_results   FROM Student_Enrolment se   JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id   GROUP BY se.student_id, se.date_first_registered ) subquery ORDER BY min_results LIMIT 1; 
SELECT MIN(count_results), student_id, date_first_registered FROM (   SELECT student_id, date_first_registered, COUNT(*) as count_results   FROM Student_Enrolment   GROUP BY student_id, date_first_registered ) as result_count;
SELECT  SELECT student_id, date_first_registered FROM Student_Enrolment GROUP BY student_id, date_first_registered ORDER BY COUNT(*) ASC LIMIT 1; 
SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Student_Enrolment.semester_id = Semesters.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Semesters.semester_name HAVING COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Master' THEN Student_Enrolment.student_enrolment_id END) > 0  AND COUNT(DISTINCT CASE WHEN Degree_Programs.degree_summary_name = 'Bachelor' THEN Student_Enrolment.student_enrolment_id END) > 0;
SELECT Semester_name, Count(*) FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Bachelor', 'Master') GROUP BY Semester_name;
SELECT  SELECT s.semester_name FROM Semesters s INNER JOIN Student_Enrolment se ON s.semester_id = se.semester_id INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') 
SELECT Semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_summary_name IN ('Master', 'Bachelor')
SELECT DISTINCT semester_name FROM Semesters WHERE semester_id IN   (SELECT semester_id    FROM Student_Enrolment    JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id    WHERE degree_summary_name IN ('Master', 'Bachelor'))
SELECT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2; 
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (   SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_name = 'Masters'   INTERSECT   SELECT degree_program_id   FROM Degree_Programs   WHERE degree_summary_name = 'Bachelors' ) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2; 
SELECT se1.semester_id FROM Student_Enrolment se1 WHERE se1.degree_program_id IN (   SELECT dp.degree_program_id   FROM Degree_Programs dp   WHERE dp.degree_summary_name = 'Masters' ) AND EXISTS (   SELECT 1   FROM Student_Enrolment se2   WHERE se2.degree_program_id IN (     SELECT dp.degree_program_id     FROM Degree_Programs dp     WHERE dp.degree_summary_name = 'Bachelors'   )   AND se2.semester_id = se1.semester_id ); 
SELECT  semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'); 
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN   (SELECT degree_program_id    FROM Degree_Programs    WHERE degree_summary_name LIKE '%Master%'    OR degree_summary_name LIKE '%Bachelor%') GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) as Number_of_different_places_currently_living FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) FROM Students;
SELECT COUNT(DISTINCT Students.current_address_id) AS number_of_different_places_currently_lived FROM Students;
SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses a JOIN Students s ON s.permanent_address_id = a.address_id;
SELECT Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country FROM Addresses INNER JOIN Students ON Students.permanent_address_id = Addresses.address_id;
SELECT DISTINCT city, state_province_county, country FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id;
SELECT Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country FROM Addresses JOIN Students ON Students.current_address_id = Addresses.address_id
SELECT Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.state_province_county, Addresses.country FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT other_student_details, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;
SELECT   other_student_details FROM   Students ORDER BY   last_name DESC;
SELECT  * FROM Students ORDER BY last_name DESC 
SELECT section_name, section_description FROM Sections WHERE section_name = 'h';
SELECT section_name, section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_name, section_description FROM Sections WHERE section_id = 'h';
SELECT section_id, course_id, section_name, section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT section_id,course_id,section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT distinct first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students INNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' 
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones'
SELECT id,Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Cartoon.Title, Cartoon.Directed_by, TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by, Cartoon.Original_air_date FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by, TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by, TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by, TV_series.Air_Date FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Carton.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT TV_Channel.Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY COUNT(*) DESC;
SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS Number_of_Channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Number_of_Channels DESC;
SELECT TV_Channel.Country, COUNT(TV_Channel.id) as number_of_channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY number_of_channels DESC;
SELECT TV_Channel.Country, count(*) as Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS number_of_channels FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY number_of_channels DESC LIMIT 1;
SELECT  Country, COUNT(*) AS Channel_count FROM TV_Channel GROUP BY Country ORDER BY Channel_count DESC LIMIT 1;
SELECT State, count(*) as num_channels FROM TV_Channel GROUP BY State ORDER BY num_channels DESC LIMIT 1;
SELECT TV_Channel.Country, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT TV_Channel.Country, COUNT(*) AS quantity FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY quantity DESC LIMIT 1;
SELECT State.Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY State.Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS num_serial_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS number_of_serial_names,     COUNT(DISTINCT Content) AS number_of_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS serial_names, COUNT(DISTINCT Content) AS contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS num_serial_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS serial_count, COUNT(DISTINCT Content) AS content_count FROM TV_Channel;
SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT TV_series.series_name) AS serials_count, COUNT(DISTINCT TV_Channel.Content) AS contents_count FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_channel.id = TV_series.Channel WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_Channel.Package_Option FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.series_name = 'Sky Radio';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT count(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) as quantity FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) as Total_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Total_TV_Channel LIMIT 1;
SELECT Language, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC;
SELECT Language, COUNT(*) AS NumberOfTVChannels FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC;
SELECT Language, count(*) AS number_of_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY number_of_TV_Channel LIMIT 1;
SELECT Language, COUNT(*) AS Number_of_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channel ASC;
SELECT TV_Channel.Language, COUNT(*) AS No_of_Channels FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY No_of_Channels LIMIT 1;
SELECT  Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (   SELECT MIN(LanguageCount)   FROM (     SELECT COUNT(*) AS LanguageCount     FROM TV_Channel     GROUP BY Language   ) AS T ) 
SELECT Language, Count(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language HAVING Count(*) = (SELECT MIN(LanguageCount) FROM (SELECT COUNT(*) AS LanguageCount FROM TV_Channel GROUP BY Language) AS T)
SELECT TV_Channel.Language, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY TV_Channel.Language HAVING COUNT(*) = (SELECT MIN(LanguageCount)          FROM (SELECT COUNT(*) AS LanguageCount             FROM TV_Channel             GROUP BY Language) AS Counts)
SELECT Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_Channels LIMIT 1;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) AS Quantity FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) as Quantity FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TV_Channel.Language, COUNT(*) as Number_of_Channels FROM TV_Channel GROUP BY TV_Channel.Language;
SELECT TC.Language, COUNT(TC.id) AS TV_Channel_count FROM TV_Channel TC GROUP BY TC.Language;
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Title = 'The Rise of the Blue Beetle';
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Title FROM Cartoon WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.id, TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.*, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.id, TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.id, TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;
SELECT MIN(Share) AS minimum_share, MAX(Share) AS maximum_share FROM TV_series;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MIN(Share) AS minimum_share, MAX(Share) AS maximum_share FROM TV_series;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MIN(Share) AS minimum_share, MAX(Share) AS maximum_share FROM TV_series;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM TV_series;
SELECT MAX(Share) AS maximum_share, MIN(Share) AS minimum_share FROM TV_series;
SELECT MAX(Share), MIN(Share) FROM TV_series;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT Original_air_date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_series.Air_Date FROM TV_series INNER JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Title = "A Love of a Lifetime";
SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT Original_air_date FROM Cartoon WHERE Title = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT s.Weekly_Rank FROM TV_series s WHERE s.Episode = "A Love of a Lifetime"
SELECT (SELECT Episode, Air_Date, Rating, Share FROM TV_series WHERE Episode = 'A Love of a Lifetime') as Episode_Score;
SELECT Weekly_Rank, Episode, Rating, Share FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_series.Weekly_Rank, TV_series.Rating FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Rating, TV_series.Share, TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime"
SELECT TV_series.Weekly_Rank, TV_series.Rating FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM TV_Series WHERE Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT series_name FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Title FROM Cartoon WHERE Episode = 'A Love of a Lifetime';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series WHERE TV_series.Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series WHERE TV_series.id = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series WHERE TV_series.Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio');
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, count(*) as Quantity FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Animation_Count FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Cartoon.Directed_by, COUNT(*) AS quantity FROM Cartoon GROUP BY Cartoon.Directed_by;
SELECT Directed_by, COUNT(*) AS Animation_Count FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) as quantity FROM Cartoon GROUP BY Directed_by;
SELECT   Production_code, Cartoon.Channel FROM   Cartoon WHERE   Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1;
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.High_definition_TV = 'Yes';
SELECT TV_Channel.package_option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.high_definition_tv = true;
SELECT TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey'
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey' GROUP BY TV_Channel.Country HAVING COUNT(*) = 0;
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey'   );
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT c.Channel   FROM Cartoon c   WHERE c.Written_by = 'Todd Casey' )
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT TV_series.Channel   FROM TV_series   WHERE TV_series.id IN (     SELECT Cartoon.Channel     FROM Cartoon     WHERE Cartoon.Written_by = 'Todd Casey'   ) );
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' ) 
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Written_by = 'Todd Casey' AND Cartoon.Content = 'Animation');
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Content != 'Animation' AND TV_Channel.id NOT IN   (SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey')
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' )
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Content <> 'Animation' AND TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = 'Todd Casey');
SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Written_by = 'Todd Casey' AND Cartoon.Content = 'Animation' )
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') 
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE (Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE (Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang')
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language != 'English';
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country = 'States' GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country = 'United States' GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE Country = 'United States' GROUP BY Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE Country = 'United States' GROUP BY Country HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country = 'USA' GROUP BY TV_Channel.Country HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Channel = TV_Channel.id )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Channel = TV_Channel.id )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT TV_Channel.id FROM TV_Channel INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones') AND TV_Channel.Content != 'Animation';
SELECT `id` FROM TV_Channel WHERE id NOT IN (   SELECT c.Channel   FROM Cartoon c   WHERE Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT c.Channel   FROM Cartoon c   WHERE c.Directed_by = 'Ben Jones' )
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones')
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT DISTINCT cartoon.Channel   FROM Cartoon   WHERE cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')
SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by IS NULL
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' );
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT cartoon.channel   FROM cartoon   WHERE cartoon.directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT c.Channel   FROM Cartoon c   WHERE c.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones'  );
SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id NOT IN (   SELECT Cartoon.Channel   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones' )
SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT channel   FROM cartoon   WHERE cartoon.directed_by = 'Ben Jones' );
SELECT COUNT(*) FROM people WHERE Nationality = 'car gamer';
SELECT COUNT(*) FROM people WHERE Nationality = 'car gamer';
SELECT count(*) FROM people WHERE Nationality = 'car gamer';
SELECT COUNT(*) FROM people WHERE Nationality = 'car gamer';
SELECT COUNT(*) FROM people WHERE Nationality = 'car gamer';
SELECT COUNT(*) FROM people WHERE Nationality = 'car gamers';
SELECT COUNT(*) FROM people WHERE Nationality = 'Car'
SELECT COUNT(*) FROM people WHERE Nationality = 'Car'
SELECT COUNT(*) FROM people WHERE Nationality = 'Car Gamer';
SELECT COUNT(*) FROM people WHERE People_ID IN (   SELECT People_ID   FROM poker_player   WHERE Best_Finish = 'Car Gamer' );
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT `Earnings` FROM `poker_player` ORDER BY `Earnings` DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT earnings FROM poker_player ORDER BY earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamers';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamers';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer'
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer';
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality = 'car gamer';
SELECT AVG(Earnings) AS average_revenues FROM poker_player WHERE Poker_Player_ID IN (   SELECT Poker_Player_ID   FROM poker_player   INNER JOIN people ON poker_player.People_ID = people.People_ID   WHERE Nationality = 'car gamer' )
SELECT  AVG(earnings) as average_revenues  FROM poker_player  WHERE poker_player.people_id IN   (SELECT people_id FROM people WHERE nationality = 'car gamer');
SELECT AVG(earnings) FROM poker_player WHERE people_id IN (SELECT people_id FROM people WHERE nationality = 'car gamer')
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality = 'car gamers'; 
SELECT ROUND(AVG(Earnings), 2) AS Average_Income FROM poker_player;
SELECT AVG(earnings) FROM poker_player WHERE Poker_Player_ID IN (SELECT Poker_Player_ID FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Nationality = 'car gamer'));
SELECT AVG(Earnings) FROM poker_player;
SELECT  SELECT AVG(Earnings) FROM poker_player 
SELECT AVG(Earnings) as average_income FROM poker_player;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer' ORDER BY poker_player.Earnings DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer' ORDER BY poker_player.Earnings DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Nationality = 'car gamer' ORDER BY poker_player.Earnings DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Nationality = 'car gamer' ORDER BY Earnings DESC LIMIT 1);
SELECT MAX(Money_Rank) AS money_rank FROM poker_player;
SELECT money_rank FROM poker_player WHERE Earnings = (   SELECT MAX(Earnings) FROM poker_player )
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(Money_Rank) AS money_rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT COUNT(*) FROM poker_player WHERE Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000)
SELECT  COUNT(*) AS last_tables FROM poker_player WHERE Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000)
SELECT MAX(Final_Table_Made) AS Max_Final_Table_Made FROM poker_player WHERE Poker_Player_ID IN (   SELECT Poker_Player_ID   FROM poker_player   WHERE Earnings < 200000 )
SELECT   COUNT(*) AS quantity FROM   poker_player p   JOIN people pe ON p.People_ID = pe.People_ID WHERE   pe.Nationality = 'car'   AND p.Earnings < 200000   AND p.Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000 AND People_ID IN (SELECT People_ID FROM people WHERE Nationality = 'car'))
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT COUNT(*) AS Max_Final_Tables FROM poker_player p JOIN people pp ON p.People_ID = pp.People_ID WHERE p.Final_Table_Made = (SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Money_Rank < 200000;
SELECT MAX(Final_Table_Made) AS max_final_tables FROM poker_player WHERE Earnings < 200000;
SELECT max(Final_Table_Made) as Max_Final_Tables FROM poker_player WHERE Earnings < 200000;
SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;
SELECT people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)
SELECT People.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)
SELECT People.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID IN (   SELECT People_ID   FROM poker_player )
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;
SELECT Name FROM people WHERE People_ID IN (   SELECT People_ID   FROM poker_player )
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;
SELECT p.name FROM people p JOIN poker_player pp ON p.people_id = pp.people_id WHERE pp.earnings > 300000;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000
SELECT poker_player.Best_Finish FROM poker_player WHERE poker_player.Earnings > 300000;
SELECT ### SQL QUERY  SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000; 
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
SELECT `Name` FROM `people` INNER JOIN `poker_player` ON people.People_ID = poker_player.People_ID WHERE `Earnings` > 300000;
SELECT Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT poker_player.Final_Table_Made, people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT p.name FROM people p JOIN poker_player pp ON p.people_id = pp.people_id WHERE p.nationality = 'car' AND p.best_finish = 'final table' ORDER BY COUNT(pp.final_table_made) ASC;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE p.Nationality = 'car gamers' ORDER BY pp.Final_Table_Made ASC;
SELECT   Name FROM   people JOIN   poker_player ON people.People_ID = poker_player.People_ID WHERE   Name LIKE '%car gamer%' ORDER BY   Final_Table_Made ASC;
SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT p.Birth_Date FROM people p INNER JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Money_Rank = (SELECT MIN(Money_Rank) FROM poker_player)
SELECT people.Birth_Date FROM   people   JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE   poker_player.Best_Finish = 'car gamer' AND poker_player.Money_Rank = (     SELECT       MIN(Money_Rank)     FROM       poker_player     WHERE       Best_Finish = 'car gamer'   );
SELECT people.Birth_date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Money_Rank = (SELECT MIN(Money_Rank) FROM poker_player)
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Money_Rank = (SELECT MIN(Money_Rank) FROM poker_player)
SELECT birth_date FROM people WHERE people.people_id IN (   SELECT people_id   FROM poker_player   WHERE best_finish = (SELECT MIN(best_finish) FROM poker_player) )
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings LIMIT 1;
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people)
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON people.People_ID = poker_player.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality = 'car gamer' AND Height > 200;
SELECT AVG(p.earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200
SELECT AVG(pp.Earnings) as average_revenues FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;
SELECT  AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE Nationality = 'car' AND Height > 200; 
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE height > 200
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT AVG(earnings) AS average_revenues FROM poker_player JOIN people ON poker_player.people_id = people.people_id WHERE nationality = 'car gamer' AND height > 200;
SELECT  SELECT AVG(p.earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200 
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT pe.Name FROM people pe JOIN poker_player po ON pe.People_ID = po.People_ID ORDER BY po.Earnings DESC;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC;
SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT People.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.name FROM people JOIN poker_player ON people.people_id = poker_player.people_id ORDER BY poker_player.earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality;
SELECT Nationality, count(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS People_Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Quantity FROM people GROUP BY Nationality;
SELECT People.Nationality, COUNT(*) AS quantity FROM People GROUP BY People.Nationality;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality;
SELECT Nationality, count(*) as quantity FROM people GROUP BY Nationality;
SELECT Nationality, count(*) as quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) as Quantity FROM people GROUP BY Nationality ORDER BY Quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS quantity FROM people GROUP BY Nationality ORDER BY quantity DESC LIMIT 1;
SELECT Nationality, COUNT(*) as quantity FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2; 
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC; 
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality != "Russia";
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT people.Name FROM people WHERE people.Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT   Name FROM   people WHERE   People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) 
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM car_gamers)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM car_gamers)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL;
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT People.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) AS distinct_countries FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) AS distinct_countries FROM people;
SELECT COUNT(DISTINCT Nationality) AS distinct_countries FROM people;
SELECT COUNT(DISTINCT Nationality) AS CountryCount FROM people;
SELECT COUNT(DISTINCT Nationality) AS country_count FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) as country_count FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) AS state_count FROM AREA_CODE_STATE;
SELECT Count(*) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) as state_count FROM AREA_CODE_STATE;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS ORDER BY CONTESTANT_NAME DESC;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;
SELECT MAX(area_code) AS maximum_area_code, MIN(area_code) AS minimum_area_code FROM AREA_CODE_STATE;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(area_code) as max_area_code, MIN(area_code) as min_area_code FROM AREA_CODE_STATE;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT DISTINCT state, created FROM VOTES;
SELECT state, created FROM VOTES
SELECT DISTINCT state, created FROM VOTES;
SELECT DISTINCT state, created FROM VOTES;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(*) >= 2;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS WHERE CONTESTANT_NUMBER IN   (SELECT CONTESTANT_NUMBER   FROM VOTES   GROUP BY CONTESTANT_NUMBER   HAVING COUNT(*) >= 2)
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number = (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT CONTESTANT_NUMBER, CONTESTANT_NAME FROM CONTESTANTS WHERE CONTESTANT_NUMBER = (   SELECT CONTESTANT_NUMBER   FROM VOTES   GROUP BY CONTESTANT_NUMBER   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_number = (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state WHERE a.state = 'NY' OR a.state = 'CA';
SELECT COUNT(*) AS number_of_votes FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) AS vote_count FROM VOTES WHERE state IN ('NY', 'CA')
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT COUNT(*) FROM CONTESTANTS WHERE CONTESTANTS.contestant_number NOT IN   (SELECT VOTES.contestant_number FROM VOTES)
SELECT COUNT(DISTINCT c.contestant_number) - COUNT(DISTINCT v.contestant_number) AS competitors_not_voted FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number;
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT area_code, count(*) as quantity FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY quantity DESC LIMIT 1;
SELECT AREA_CODE_STATE.area_code, count(*) as quantity FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY count(*) DESC LIMIT 1;
SELECT area_code, count(*) as vote_count FROM VOTES INNER JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY vote_count DESC LIMIT 1;
SELECT AREA_CODE_STATE.area_code, COUNT(*) as quantity FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY AREA_CODE_STATE.area_code ORDER BY quantity DESC LIMIT 1;
SELECT area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT V.created, A.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number=C.contestant_number JOIN AREA_CODE_STATE A ON V.state=A.state WHERE C.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' OR CONTESTANTS.contestant_name = 'Kelly Clauss' GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_number) = 2;
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' AND AREA_CODE_STATE.area_code IN (   SELECT AREA_CODE_STATE.area_code   FROM AREA_CODE_STATE   INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state   INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Kelly Clauss' )
SELECT area_code FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number JOIN AREA_CODE_STATE a ON v.state = a.state WHERE c.contestant_name = 'Tabatha Gehling' OR c.contestant_name = 'Kelly Clauss' GROUP BY a.area_code HAVING COUNT(DISTINCT c.contestant_name) = 2;
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' OR CONTESTANTS.contestant_name = 'Kelly Clauss' GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2;
SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' OR CONTESTANTS.contestant_name = 'Kelly Clauss' GROUP BY AREA_CODE_STATE.area_code HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2;
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950;
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT country.Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT Count(DISTINCT country.Code) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) AS quantity FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(DISTINCT country.Code) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' AND c.Region = 'Caribbean'
SELECT SUM(c.SurfaceArea) AS Territory FROM country c WHERE c.Continent = 'North America' OR c.Continent = 'South America'
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America'
SELECT SUM(c.SurfaceArea) FROM country c WHERE c.Continent = 'North America' OR c.Continent = 'South America'
SELECT SUM(c.SurfaceArea) AS TotalTerritory FROM country c WHERE c.Continent = 'North America'
SELECT country.Continent FROM country WHERE country.Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT continent continent FROM country WHERE Code = 'AIA';
SELECT continent FROM country WHERE code = 'AIA';
SELECT c.Continent FROM country c WHERE c.Code = 'AIA';
SELECT Continent FROM country WHERE code = 'AIA';
SELECT continent FROM country WHERE code = 'AIA';
SELECT country.Region FROM city INNER JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT country.Region FROM city LEFT JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT Language, MAX(Percentage) as MostPopularLanguage FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language, MAX(Percentage) as Maximum_percentage FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language, MAX(Percentage) AS Popularity FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage WHERE CountryCode = 'ABW' GROUP BY Language;
SELECT Language, max(Percentage) AS MostPopularPercentage FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Language  FROM countrylanguage  WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' 
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';
SELECT language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT region, SUM(Population) as number_of_people FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT country.Region, SUM(city.Population) AS Residents FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE country.Name = 'Angola'
SELECT country.Region, sum(city.Population) AS "Number of Residents" FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Name = 'Angola'
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT region, sum(population) as residents FROM country WHERE name='Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE region='Central Africa'
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy ASC LIMIT 1;
SELECT country.Name AS State FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy LIMIT 1;
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS max_gnp FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS max_gnp FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population), MAX(country.GNP) FROM country WHERE continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS max_gnp FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_people, MAX(country.GNP) AS max_GNP FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS largest_GNP FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population_in_asia,     MAX(country.GNP) AS largest_GNP_in_asia  FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS TotalPopulation, MAX(country.GNP) AS LargestGNP FROM country WHERE country.Continent = 'Asia';
SELECT SUM(country.Population) AS total_population, MAX(country.GNP) AS largest_GNP FROM country WHERE country.Continent = 'Asia'
SELECT SUM(country.Population) as total_population, MAX(country.GNP) as largest_GNP FROM country WHERE country.Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm='Republic';
SELECT ROUND(AVG(country.LifeExpectancy), 2) FROM country WHERE continent = 'Africa' AND GovernmentForm LIKE '%Republic%';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT Average(country.LifeExpectancy) FROM country WHERE country.Continent = 'Africa' AND country.GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT SUM(C.surfaceArea) AS TotalTerritory FROM country C WHERE C.Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) AS total_territory FROM country c WHERE c.Continent IN ('Asia', 'Europe');
SELECT sum(SurfaceArea) as total_territory FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(c.SurfaceArea) AS TotalTerritory FROM country AS c WHERE c.Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe'); 
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia'   OR Continent = 'Europe';
SELECT SUM(SurfaceArea) AS TotalTerritory FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT  count(*) as Population FROM city WHERE District = 'Gelderland';
SELECT Population FROM city WHERE District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT Sum(city.Population) FROM city WHERE city.District = 'Gelderland';
SELECT COUNT(*) FROM city WHERE District = 'Gelderland'
SELECT COUNT(*) as total_residents FROM city WHERE District = 'Gelderland';
SELECT COUNT(*) AS total_residents FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT COUNT(*) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) as average_GNP, SUM(Population) as total_population FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(country.GNP) as averageGNP, SUM(city.Population) as totalPopulation FROM country JOIN city ON country.Code = city.CountryCode WHERE country.GovernmentForm = 'US territory';
SELECT AVG(country.GNP) AS average_GNP, SUM(city.Population) AS total_population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.GovernmentForm = 'US territory';
SELECT 
SELECT AVG(country.GNP), SUM(city.Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.GovernmentForm = 'US territory';
SELECT AVG(c.GNP) AS mean_GNP, SUM(c.Population) AS total_population FROM country c WHERE c.Continent = 'North America' AND c.GovernmentForm = 'US territory'
SELECT AVG(country.GNP) AS meanGNP, SUM(country.Population) AS totalPopulation FROM country WHERE country.Continent = 'North America' AND country.GovernmentForm = 'Nonmetropolitan Territory of the US'
SELECT   AVG(country.GNP) AS mean_GNP,   SUM(country.Population) AS total_population FROM   country WHERE   country.Continent = 'North America'   AND country.GovernmentForm LIKE '%US%'
SELECT ROUND(AVG(country.GNP), 2) AS mean_GNP,     SUM(country.Population) AS total_population FROM country WHERE country.Continent = 'North America' AND country.Region = 'Caribbean'
SELECT AVG(GNP) as mean_gnp, SUM(Population) as total_population FROM country WHERE Continent = 'North America' AND GovernmentForm = 'Dependent Territory'
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS unique_languages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage;
SELECT count(DISTINCT Language) as NumberOfLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS Number_of_Languages FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT GovernmentForm, COUNT(*) AS Quantity FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT GovernmentForm, COUNT(*) AS quantity FROM country WHERE Continent = 'Africa' GROUP BY GovernmentForm;
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) as TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT Count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(Language) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT country.Name FROM country INNER JOIN (   SELECT CountryCode, COUNT(*) AS NumLanguages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY NumLanguages DESC   LIMIT 1 ) AS LargestLanguages ON country.Code = LargestLanguages.CountryCode;
SELECT country.Name, COUNT(countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY language_count DESC LIMIT 1;
SELECT country.Name FROM country INNER JOIN (   SELECT CountryCode, COUNT(*) AS LanguageCount   FROM countrylanguage   GROUP BY CountryCode   ORDER BY COUNT(*) DESC   LIMIT 1 ) AS LanguageCountSubquery ON country.Code = LanguageCountSubquery.CountryCode
SELECT   country.Name FROM   country WHERE   country.Code = (     SELECT       CountryCode     FROM       (         SELECT           CountryCode, COUNT(*) AS language_count         FROM           countrylanguage         GROUP BY           CountryCode         ORDER BY           language_count DESC         LIMIT 1       ) AS max_language_count   )
SELECT country.Name, COUNT(DISTINCT countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY num_languages DESC LIMIT 1;
SELECT Country.Name AS State, COUNT(DISTINCT CountryLanguage.Language) AS LanguageCount FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode GROUP BY Country.Name ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Name AS State, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY COUNT(DISTINCT countrylanguage.Language) DESC LIMIT 1;
SELECT District FROM city WHERE Population = (SELECT MAX(Population) FROM city)
SELECT country.Name as State FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY countrylanguage.CountryCode ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT country.Continent, count(DISTINCT countrylanguage.Language) as LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT continent, count(DISTINCT language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY continent ORDER BY language_count DESC LIMIT 1;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS NumberOfLanguages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY NumberOfLanguages DESC;
SELECT Continent, COUNT(Language) AS NumberOfLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumberOfLanguages DESC;
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY LanguageCount DESC;
SELECT Continent, COUNT(DISTINCT Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY LanguageCount DESC;
SELECT country.Continent, count(DISTINCT countrylanguage.Language) AS num_languages FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY num_languages DESC;
SELECT COUNT(DISTINCT cl.CountryCode) AS States FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT COUNT(*) AS States FROM countrylanguage cl1 INNER JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'
SELECT COUNT(*) AS States FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING COUNT(DISTINCT Language) = 2;
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.CountryCode IN   (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Dutch' AND cl.IsOfficial = 'T')
SELECT COUNT(*) FROM countrylanguage l1 JOIN countrylanguage l2 ON l1.CountryCode = l2.CountryCode WHERE l1.Language = 'English' AND l2.Language = 'Dutch'
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch')
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch')
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch');
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'French' )
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;
SELECT country.Name FROM country WHERE Code IN   (SELECT CountryCode    FROM countrylanguage    WHERE Language IN ('English', 'French')    GROUP BY CountryCode   HAVING COUNT(DISTINCT Language) = 2)
SELECT country.Name FROM countrylanguage AS cl1 JOIN countrylanguage AS cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country ON cl1.CountryCode = country.Code WHERE cl1.Language = 'English' AND cl2.Language = 'French'
SELECT country.Name FROM country WHERE country.Code IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language IN ('English', 'French')   GROUP BY cl.CountryCode   HAVING COUNT(DISTINCT cl.Language) = 2 )
SELECT country.Name FROM country WHERE country.Code IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' AND cl.IsOfficial = 'T'   INTERSECT   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'French' AND cl.IsOfficial = 'T' )
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'French') GROUP BY countrylanguage.CountryCode HAVING COUNT(*) = 2;
SELECT country.Name FROM country WHERE country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English', 'French')   GROUP BY CountryCode   HAVING COUNT(DISTINCT Language) = 2 )
SELECT country.Name FROM country WHERE country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English','French')   GROUP BY CountryCode   HAVING COUNT(*) = 2 )
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(*) = 2;
SELECT country.Name FROM country WHERE country.Code IN  (SELECT CountryCode  FROM countrylanguage  WHERE Language = 'English' AND IsOfficial = 'T'  INTERSECT  SELECT CountryCode  FROM countrylanguage  WHERE Language = 'French' AND IsOfficial = 'T'  );
SELECT country.Name FROM country WHERE country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' ) AND country.Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'French' AND IsOfficial = 'T' )
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T' GROUP BY country.Name;
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'French') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T')   OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T') OR (countrylanguage.Language = 'French' AND countrylanguage.IsOfficial = 'T');
SELECT country.Name FROM country WHERE country.Code IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English' AND cl.IsOfficial = 'T') AND country.Code IN (SELECT cl2.CountryCode FROM countrylanguage cl2 WHERE cl2.Language = 'French' AND cl2.IsOfficial = 'T');
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese';
SELECT COUNT(DISTINCT c1.Continent) FROM countrylanguage cl JOIN country c ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT continent) FROM country WHERE code IN   (SELECT countrycode   FROM countrylanguage   WHERE language = 'Chinese');
SELECT count(DISTINCT c.Continent) as num_continents FROM countrylanguage cl JOIN country c on cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT(country.Continent)) AS num_continents_speak_chinese FROM countrylanguage WHERE Language = 'Chinese'
SELECT COUNT(DISTINCT c.Continent) AS Count_Chinese_Continents FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'
SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage WHERE Language = 'Chinese';
SELECT region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English','Dutch'));
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch') 
SELECT country.Region FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT region FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') 
SELECT country.Region FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch')
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English') 
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');
SELECT country.Region, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' OR countrylanguage.Language = 'English'
SELECT country.Region FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('Dutch', 'English')
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'Tobacco'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T' 
SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch');
SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English','Dutch') AND countrylanguage.IsOfficial = 'T' 
SELECT country.Name FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T'
SELECT language, MAX(percentage) AS popular_percentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY language;
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY Language;
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language;
SELECT Language, MAX(Percentage) AS MostPopularPercentage FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Asia') GROUP BY Language;
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = "Asia" ORDER BY countrylanguage.Percentage DESC LIMIT 1;
SELECT Language, COUNT(*) AS Quantity FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND IsOfficial = 'T' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(*) AS NumOfNations FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' AND cl.IsOfficial = 'T' GROUP BY Language ORDER BY NumOfNations DESC LIMIT 1;
SELECT Language, COUNT(*) as Quantity FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(*) AS Quantity FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND IsOfficial = 'T' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') ORDER BY Percentage DESC LIMIT 1;
SELECT countrylanguage.Language FROM   countrylanguage JOIN   country ON countrylanguage.CountryCode = country.Code WHERE   country.GovernmentForm = 'Republic' GROUP BY   countrylanguage.Language HAVING   COUNT(*) = 1
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT country.Code) = 1
SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(*) = 1
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(*) = 1;
SELECT language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN   (SELECT Code   FROM country   WHERE GovernmentForm = 'Republic'   GROUP BY Code   HAVING COUNT(*) = 1)
SELECT countrylanguage.Language FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(*) = 1;
SELECT City.Name, MAX(City.Population) AS LargestPopulation FROM City JOIN CountryLanguage ON City.CountryCode = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English'
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) as population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name;
SELECT City.Name FROM City JOIN CountryLanguage ON City.CountryCode = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' ORDER BY City.Population DESC LIMIT 1;
SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) as population FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name ORDER BY Population DESC LIMIT 1;
SELECT   city.Name FROM  city JOIN  countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE  countrylanguage.Language = 'English' ORDER BY  city.Population DESC LIMIT 1;
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY city.Name;
SELECT city.Name, country.Name, MAX(city.Population) as Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'
SELECT  country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT  country.Name, MAX(country.Population) AS population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' GROUP BY country.Name, country.LifeExpectancy;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT ROUND(AVG(LifeExpectancy), 2) AS average_lifespan FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code IN(SELECT CountryCode        FROM countrylanguage        WHERE Language <> 'English' AND IsOfficial = 'F')
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T');
SELECT AVG(LifeExpectancy) AS mean_lifespan FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT ROUND(AVG(LifeExpectancy), 2) AS MeanLifespan FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');
SELECT ROUND(AVG(LifeExpectancy), 2) AS mean_lifespan FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT Country.Name, AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' and countrylanguage.IsOfficial = 'F' GROUP BY Country.Name;
SELECT MEAN(lifeExpectancy) AS mean_lifespan FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT COUNT(*) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT SUM(country.Population) AS total_population FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) as TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' ) 
SELECT COUNT(*) as TotalPopulation FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T');
SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' AND cl.IsOfficial = 'T' )
SELECT COUNT(*) as TotalPopulation FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT COUNT(*) as PeopleLivingInNonEnglishSpeakingNations FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT COUNT(*) AS population FROM city WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' 
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT cl.Language) AS TotalUniqueOfficialLanguages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT(countrylanguage.Language)) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.Language) AS TotalDistinctOfficialLanguages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930;
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 and countrylanguage.IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) AS TotalDistinctOfficialLanguages FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE IndepYear < 1930 ) AND IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) as TotalDistinctLanguages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 and cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930;
SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE country.SurfaceArea >   (SELECT MAX(SurfaceArea)    FROM country    WHERE continent = 'Europe')
SELECT country.Name FROM country WHERE country.Continent != 'Europe' AND country.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' );
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' )
SELECT Name FROM Country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM Country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')
SELECT c1.Name FROM country c1, country c2 WHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea)             FROM country c2             WHERE c2.Continent = 'Europe');
SELECT country.Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(c.Population)              FROM country c              WHERE c.Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia');
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(Population) FROM country c2 WHERE c2.Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population)               FROM country               WHERE Continent = 'Asia');
SELECT country.Name as AfricanNation FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')
SELECT country.Name AS CountryName FROM country WHERE country.Continent = 'Africa' AND country.Population < (SELECT MIN(Population) FROM country WHERE continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Africa' AND country.Population < ALL (SELECT Population FROM country WHERE Continent = 'Asia')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (   SELECT MAX(country.Population)   FROM country   WHERE country.Continent = 'Africa' )
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(country.Population)              FROM country              WHERE country.Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (   SELECT MAX(Population)   FROM country   WHERE continent ='Africa') 
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > ALL (SELECT country.Population                FROM country                WHERE country.Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population)            FROM country            WHERE Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > ANY (  SELECT country.Population  FROM country  WHERE country.Continent = 'Africa' )
SELECT country.Name AS State FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT country.Name AS State, country.Population AS Residents FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT country.Name FROM country WHERE country.Continent = 'Asia' AND country.Population > (SELECT MAX(Population)              FROM country              WHERE continent = 'Africa');
SELECT country.Name AS State FROM country WHERE country.Continent = 'Asia' AND country.Population > (   SELECT MAX(Population)   FROM country   WHERE continent = 'Africa' )
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English'   AND countrylanguage.IsOfficial = 'T' )
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language = 'English'   AND countrylanguage.IsOfficial = 'T' )
SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English');
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )
SELECT c.Code FROM country c WHERE c.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English'   AND cl.IsOfficial = 'T' )
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' GROUP BY country.Code;
SELECT country.Code FROM country WHERE country.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English'   AND cl.IsOfficial = 'T' )
SELECT country.Code FROM country WHERE country.Code IN (   SELECT   countrylanguage.CountryCode   FROM   countrylanguage   WHERE   countrylanguage.Language != 'English' )
SELECT country.Code FROM countrylanguage WHERE Language <> 'English';
SELECT country.Code FROM country WHERE country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English');
SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English';
SELECT country.Code FROM countrylanguage WHERE Language <> 'English'
SELECT country.Code FROM country WHERE country.Code IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language <> 'English' )
SELECT country.Code FROM country WHERE country.Code IN   (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English')
SELECT country.Code FROM country WHERE country.Code IN (   SELECT DISTINCT CountryCode   FROM countrylanguage   WHERE Language <> 'English'   )
SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English'
SELECT country.Code FROM country WHERE country.Code IN (   SELECT countrylanguage.CountryCode   FROM countrylanguage   WHERE countrylanguage.Language <> 'English' );
SELECT country.Code FROM country WHERE country.Code IN   (SELECT countrylanguage.CountryCode    FROM countrylanguage    WHERE Language <> 'English'    AND countrylanguage.CountryCode NOT IN      (SELECT country.Code      FROM country      WHERE GovernmentForm <> 'Republic')   )
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic'
SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE NOT (countrylanguage.Language = 'English' AND country.GovernmentForm = 'Republic')
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm NOT LIKE '%Republic%'
SELECT country.Code FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic'
SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND country.GovernmentForm <> 'Republic';
SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic'
SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm <> 'Republic';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial <> 'T'
SELECT city.Name FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND country.Continent = 'Europe' AND countrylanguage.IsOfficial = 'F'
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' AND country.Continent = 'Europe';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F' 
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'; 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city INNER JOIN country ON city.CountryCode = country.Code INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' 
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, Population FROM country WHERE Population = (   SELECT MIN(Population)   FROM country )
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Population, country.Name, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);
SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT Population, country.Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, city.Population, country.HeadOfState FROM country JOIN city ON country.Capital = city.ID ORDER BY country.SurfaceArea DESC LIMIT 1;
SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name AS country_name, country.Population AS number_of_residents, country.HeadOfState AS leader_of_country FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT country.Name, count(countrylanguage.Language) as Number_of_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING count(countrylanguage.Language) >= 3;
SELECT country.Name, count(countrylanguage.Language) as num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING count(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countryLanguage.Language) as LanguageCount FROM country JOIN countryLanguage ON country.Code = countryLanguage.CountryCode GROUP BY country.Name HAVING COUNT(countryLanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3;
SELECT country.Name, count(countrylanguage.Language) as LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING count(countrylanguage.Language) >= 3;
SELECT country.Name, COUNT(countrylanguage.Language) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT country.Name, COUNT(countrylanguage.Language) as NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2;
SELECT country.Name, COUNT(countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2;
SELECT country.Name, COUNT(*) AS LanguageCount FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(*) > 2;
SELECT country.Name, COUNT(countrylanguage.Language) AS NumberOfLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;
SELECT city.District, COUNT(*) FROM city WHERE city.Population > (SELECT AVG(Population) FROM city) GROUP BY city.District;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) AS QUANTITY FROM CITY WHERE POPULATION > (SELECT AVG(POPULATION) FROM CITY) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT  DISTRICT, COUNT(*) AS TOWN_COUNT FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) AS NUM_TOWNS FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT DISTRICT, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY DISTRICT;
SELECT DISTRICT, COUNT(*) AS QUANTITY FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY DISTRICT;
SELECT  District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District; 
SELECT DISTRICT, COUNT(*) AS QUANTITY FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
SELECT GovernmentForm, SUM(Population) as TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) as Residents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) as TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalResidents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(city.Population) as TotalResidents FROM country JOIN city ON country.Capital = city.ID WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, sum(Population) as total_residents FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT continent, AVG(lifeexpectancy) AS avg_lifespan, SUM(population) AS total_population FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT country.Continent, AVG(country.LifeExpectancy) AS average_lifespan, SUM(country.Population) AS total_population FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72;
SELECT Continent, AVG(LifeExpectancy) AS average_lifespan, SUM(Population) AS total_population FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT continent, AVG(LifeExpectancy) as average_lifespan, SUM(Population) as total_population FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, AVG(LifeExpectancy) AS average_lifespan, SUM(Population) AS total_population FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT country.Continent, SUM(country.Population) AS TotalPopulation, AVG(country.LifeExpectancy) AS AverageLifespan FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72; 
SELECT country.Continent, sum(country.Population) as total_population, avg(country.LifeExpectancy) as average_lifespan FROM country GROUP BY country.Continent HAVING avg(country.LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS total_population, AVG(LifeExpectancy) AS average_lifespan FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT continent, SUM(country.Population) as total_population, AVG(country.LifeExpectancy) as average_lifespan FROM country GROUP BY continent HAVING AVG(country.LifeExpectancy) < 72;
SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_lifespan FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT  country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT country.Name, country.Continent FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea AS Territory FROM country ORDER BY SurfaceArea DESC LIMIT 5; 
SELECT country.Name FROM country ORDER BY population DESC LIMIT 3;
SELECT country.Name, count(*) as population FROM country GROUP BY country.Name ORDER BY population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3; 
SELECT Country.Name, COUNT(*) AS Population FROM country GROUP BY Country.Name ORDER BY Population DESC LIMIT 3;
SELECT country.Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT TOP 3 Name FROM country ORDER BY Population DESC;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Country.Name FROM Country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT country.Name FROM country ORDER BY country.Population LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT   SELECT Name FROM country ORDER BY Population LIMIT 3; 
SELECT  Name FROM country ORDER BY Population LIMIT 3; 
SELECT Country.Name FROM Country ORDER BY Population LIMIT 3;
SELECT  SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT country.Name FROM country INNER JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Europe' AND city.Population = 80000;
SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND Population = 80000;
SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Europe' AND city.Population = 80000;
SELECT Name FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe') AND Population = 80000;
SELECT country.Name AS State FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT country.Name FROM country WHERE continent = 'Europe' AND population = 80000;
SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;
SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_territory FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000 
SELECT SUM(Population) AS total_people, AVG(SurfaceArea) AS average_territory FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT  SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_territory FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_territory FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_territory FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT  SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_territory FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;
SELECT  COUNT(country.Population) AS total_population,  AVG(country.SurfaceArea) AS average_territory  FROM country  WHERE country.Continent = 'North America'  AND country.SurfaceArea > 3000;
SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_territory FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_territory FROM country WHERE continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT  SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT City.Name FROM City WHERE City.Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT ID, Name FROM city WHERE Population BETWEEN 160000 AND 900000; 
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT City.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(DISTINCT CountryCode) AS Number_of_Nations FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY Number_of_Nations DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT CountryCode) AS NumberOfNations FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1; 
SELECT Language, COUNT(DISTINCT cl.CountryCode) AS NumNations FROM countrylanguage cl GROUP BY Language ORDER BY NumNations DESC LIMIT 1;
SELECT language, count(countrycode) as nations_spoken FROM countrylanguage WHERE isofficial = 'T' GROUP BY language ORDER BY nations_spoken DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT CountryCode) AS Quantity FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT Language, COUNT(*) AS Quantity FROM countrylanguage WHERE IsOfficial = 'T' GROUP BY Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language, COUNT(DISTINCT(cl.CountryCode)) AS Quantity FROM countrylanguage cl GROUP BY cl.Language ORDER BY Quantity DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT country.Name as State,     countrylanguage.Language as Language,    MAX(Percentage) as Population FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name;
SELECT country.Name, country.District, countrylanguage.Language, MAX(countrylanguage.Percentage) AS Population FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.District;
SELECT country.Name AS State, countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Name HAVING MAX(Percentage)
SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage cl WHERE cl.CountryCode = country.Code) ORDER BY country.Name;
SELECT country.Name, country.District, countrylanguage.Language, MAX(countrylanguage.Percentage) AS SpokenPercentage FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name, country.District;
SELECT country.Code AS nation_abbreviation,     countrylanguage.Language AS most_spoken_language,    MAX(countrylanguage.Percentage) AS quantity FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code;
SELECT country.Code AS NationAbbreviation, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage                   WHERE countrylanguage.CountryCode = country.Code) GROUP BY country.Code;
SELECT country.Code AS NationAbbreviation,   countrylanguage.Language FROM   country JOIN   countrylanguage ON country.Code = countrylanguage.CountryCode WHERE   countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code) GROUP BY   country.Code
SELECT country.Code AS nation_abbreviation, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) ORDER BY country.Code;
SELECT country.Code AS nation_abbreviation, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = country.Code) GROUP BY country.Code;
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*) as total_nations FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(*) AS Quantity FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT count(DISTINCT(cl.CountryCode)) FROM countrylanguage cl WHERE cl.Language = 'Spanish' and cl.Percentage = (SELECT max(Percentage) FROM countrylanguage cl2 WHERE cl.CountryCode = cl2.CountryCode and cl2.Language = 'Spanish')
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT country.Code, country.Name, count(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.IsOfficial = 'T' GROUP BY country.Code, country.Name;
SELECT countrylanguage.Language, count(*) as Quantity FROM countrylanguage WHERE IsOfficial = 'T' and Language='Spanish' GROUP BY Language;
SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'
SELECT code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC;
SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' ORDER BY countrylanguage.Percentage DESC;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC;
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode ORDER BY SUM(Percentage) DESC;
SELECT countrylanguage.CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' GROUP BY CountryCode HAVING MAX(Percentage)
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' and IsOfficial = 'T' 
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' and IsOfficial = 'T';
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish') 
SELECT country.Code FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;
SELECT COUNT(*) AS directors_count FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Count(*) as directors FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Count(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Conductor.Name FROM Conductor ORDER BY Conductor.Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age ASC;
SELECT Conductor.Name FROM conductor ORDER BY Conductor.Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Age;
SELECT Conductor.Name FROM conductor WHERE Conductor.Nationality <> 'USA'
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Conductor.Name FROM conductor WHERE conductor.Nationality != 'USA'
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT Orchestra, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT `Record_Company`, COUNT(*) FROM `orchestra` GROUP BY `Year_of_Founded` ORDER BY `Year_of_Founded` DESC;
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC; 
SELECT orchestra.Orchestra, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT orchestra.Orchestra_ID, orchestra.Orchestra, orchestra.Year_of_Founded, orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT orchestra.Record_Company, orchestra.Year_of_Founded FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;
SELECT orchestra.Orchestra, orchestra.Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT I can use a SQL query to answer the question based on the given database schema. Here's the SQL query:
SELECT Sorry, but I can't fulfill that request.
SELECT AVG(Attendance) AS Avg_show_guest FROM show; 
SELECT  SELECT AVG(Attendance) as average_guest_of_shows FROM show; 
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance)  FROM show;
SELECT AVG(Attendance) AS Average_guest FROM show; 
SELECT AVG(Attendance) AS average_guest FROM show;
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final';
SELECT **SQL Query:**  SELECT   MAX(Share) AS Maximum_Share,   MIN(Share) AS Minimum_Share FROM   performance WHERE   Type != 'Live final'; 
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type != 'Live final'; 
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share) as Max_Share, MIN(Share) as Min_Share FROM performance WHERE Type <> 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) AS different_countries FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS CountryCount FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS country_count FROM conductor
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS CountryCount FROM conductor;
SELECT  COUNT(DISTINCT Nationality) AS NumberOfCountries FROM conductor; 
SELECT COUNT(DISTINCT Nationality) AS Num_Different_Countries FROM conductor; 
SELECT COUNT(DISTINCT Nationality) AS number_of_different_countries FROM conductor;
SELECT COUNT(DISTINCT Nationality) as Num_of_countries FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS NumberOfCountries FROM conductor;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM Conductor ORDER BY Conductor.Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;
SELECT Conductor_ID, Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1; 
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1; 
SELECT Conductor.Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT Conductor.Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT Conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;
SELECT conductor.Name, COUNT(Year_of_Work) AS Years_Worked FROM conductor GROUP BY conductor.Conductor_ID ORDER BY Years_Worked DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name, COUNT(*) AS Ensembles_Conducted FROM Conductor GROUP BY Conductor.Conductor_ID HAVING COUNT(*) > 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) as Quantity FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, Conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1;
SELECT conductor.Name, COUNT(orchestra.Orchestra_ID) AS Conducted_Ensembles FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name, COUNT(DISTINCT orchestra.Orchestra_ID) AS Ensemble_Count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Name FROM conductor GROUP BY Conductor_ID HAVING COUNT(DISTINCT Orchestra_ID) > 1;
SELECT Conductor.Name, COUNT(DISTINCT orchestra.Orchestra_ID) AS Ensemble_Count FROM Conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Conductor.Name HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;
SELECT Conductor.Name, COUNT(Orchestra_ID) AS EnsembleCount FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name HAVING COUNT(Orchestra_ID) > 1;
SELECT Conductor.Name FROM conductor GROUP BY Conductor.Name HAVING COUNT(DISTINCT Conductor_ID) > 1;
SELECT Conductor.Name, COUNT(*) AS quantity FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name ORDER BY quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS quantity FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS Ensemble_Count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY Ensemble_Count DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra_ID) AS Ensemble_Count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra.Orchestra_ID) AS Ensemble_Count FROM Conductor JOIN Orchestra ON Conductor.Conductor_ID = Orchestra.Conductor_ID GROUP BY Conductor.Name ORDER BY Ensemble_Count DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS EnsembleCount FROM conductor JOIN orchestra ON conductor.Conductor_ID=orchestra.Conductor_ID GROUP BY Conductor.Conductor_ID ORDER BY EnsembleCount DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS Ensemble_Count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY Ensemble_Count DESC LIMIT 1;
SELECT conductor.Name, COUNT(orchestra.Orchestra_ID) AS Quantity FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY Quantity DESC LIMIT 1;
SELECT Conductor.Name, COUNT(orchestra.Orchestra_ID) AS Ensemble_count FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY Ensemble_count DESC LIMIT 1;
SELECT Conductor.Name, COUNT(Orchestra_ID) AS Ensembles_Directed FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY Ensembles_Directed DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor WHERE conductor.Year_of_Work > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Conductor.Name FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;
SELECT Name FROM conductor WHERE Year_of_Work > 2008;
SELECT DISTINCT Record_Company, count(*) as NumberOfEnsembles FROM orchestra GROUP BY Record_Company;
SELECT Sorry, I cannot assist with that.
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Ensembles FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(DISTINCT orchestra.Orchestra_ID) AS NumberOfEnsembles FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS num_of_ensembles FROM orchestra GROUP BY Record_Company;
SELECT COUNT(orchestra.Orchestra_ID), conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID, conductor.Name;
SELECT COUNT(*), c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name;
SELECT COUNT(*) AS ensemble_count, Record_Company AS enterprise FROM orchestra GROUP BY Record_Company;
SELECT orchestra.Record_Company, count(*) as quantity FROM orchestra GROUP BY orchestra.Record_Company;
SELECT orchestra.Record_Company, COUNT(orchestra.Orchestra_ID) AS Quantity FROM orchestra GROUP BY orchestra.Record_Company;
SELECT Type, COUNT(*) AS quantity FROM performance GROUP BY Type ORDER BY quantity ASC; 
SELECT Sure! Here's the SQL query to show the record type of ensembles in ascending order of count:
SELECT Type, COUNT(*) AS quantity FROM performance GROUP BY Type ORDER BY quantity ASC; 
SELECT COUNT(O.Orchestra_ID) AS count_of_ensembles, O.Orchestra AS ensemble_record_type FROM orchestra O GROUP BY O.Orchestra_ID ORDER BY count_of_ensembles ASC;
SELECT ensemble, count(*) as quantity FROM orchestra GROUP BY ensemble ORDER BY quantity ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT orchestra.Major_Record_Format, COUNT(*) AS frequency FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC; 
SELECT `Major_Record_Format`, COUNT(*) as quantity FROM orchestra GROUP BY `Major_Record_Format` ORDER BY COUNT(*) DESC;
SELECT orchestra.Major_Record_Format, count(*) AS frequency FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Quantity FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Quantity FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1; 
SELECT COUNT(Record_Company) AS Quantity FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT  RECORD_COMPANY, COUNT(DISTINCT O.Orchestra_ID) AS ENSEMBLE_COUNT FROM ORCHESTRA O GROUP BY RECORD_COMPANY ORDER BY ENSEMBLE_COUNT DESC LIMIT 1; 
SELECT COUNT(*) as quantity, Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT `Record_Company`, COUNT(*) AS `Quantity` FROM `orchestra` GROUP BY `Record_Company` ORDER BY `Quantity` DESC LIMIT 1;
SELECT  RECORD_COMPANY, COUNT(DISTINCT Orchestra_ID) AS ENSEMBLES_COUNT FROM orchestra GROUP BY RECORD_COMPANY ORDER BY ENSEMBLES_COUNT DESC LIMIT 1;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Quantity FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(*) AS Quantity, Record_Company FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT COUNT(*) AS Quantity FROM orchestra GROUP BY Record_Company ORDER BY Quantity DESC LIMIT 1;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT  orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance) 
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performace_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING MIN(Year_of_Founded) < 2003 AND MAX(Year_of_Founded) > 2003;
SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003 UNION SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded > 2003;
SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded < 2003 UNION SELECT orchestra.Record_Company FROM orchestra WHERE orchestra.Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING MIN(Year_of_Founded) < 2003 AND MAX(Year_of_Founded) > 2003;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 UNION SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM  orchestra WHERE  Year_of_Founded < 2003 AND Record_Company IN   (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003);
SELECT DISTINCT o.Record_Company FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE o.Year_of_Founded < 2003 AND o.Record_Company IN (   SELECT Record_Company   FROM orchestra   WHERE Year_of_Founded >= 2003 )
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(DISTINCT CASE WHEN Year_of_Founded < 2003 THEN Orchestra_ID END) > 0 AND COUNT(DISTINCT CASE WHEN Year_of_Founded > 2003 THEN Orchestra_ID END) > 0;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT record_company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT count(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = "CD" OR Major_Record_Format = "DVD";
SELECT   COUNT(orchestra.Orchestra_ID) FROM   orchestra WHERE   orchestra.Major_Record_Format = 'CD' OR orchestra.Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD','DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT 	Year_of_Founded FROM 	orchestra WHERE 	Orchestra_ID IN ( 		SELECT 			Orchestra_ID 		FROM 			performance 		GROUP BY 			Orchestra_ID 		HAVING 			COUNT(*) > 1 	)
SELECT YEAR_OF_FOUNDED FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 )
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(performance.Performance_ID) > 1;
SELECT YEAR(Date) AS Ensemble_Setup_Year FROM performance GROUP BY YEAR(Date) HAVING COUNT(*) > 1;
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1;
SELECT `Year_of_Founded` FROM `orchestra` WHERE `Orchestra_ID` IN   (SELECT `Orchestra_ID`    FROM `performance`    GROUP BY `Orchestra_ID`    HAVING COUNT(*) > 1);
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 ) 
SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 ) 
SELECT Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(*) > 1;
SELECT DISTINCT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN   (SELECT Orchestra_ID    FROM performance    GROUP BY Orchestra_ID    HAVING COUNT(*) > 1) 
SELECT COUNT(*) FROM Highschooler;
SELECT  SELECT count(*) FROM Highschooler; 
SELECT COUNT(*) as num_students FROM Highschooler;
SELECT count(*) FROM Highschooler; 
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(ID) FROM Highschooler;
SELECT count(*) as student_count FROM Highschooler;
SELECT COUNT(DISTINCT ID) FROM Highschooler;
SELECT COUNT(*)  FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler;
SELECT Highschooler.grade FROM Highschooler
SELECT grade FROM Highschooler;
SELECT Highschooler.ID, Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT Highschooler.ID, Highschooler.name, Highschooler.grade FROM Highschooler
SELECT Highschooler.ID, Highschooler.grade FROM Highschooler;
SELECT Highschooler.ID, Highschooler.name, Highschooler.grade FROM Highschooler;
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT  Highschooler.name FROM Highschooler WHERE grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT count(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT  COUNT(*) FROM Highschooler WHERE grade IN (9, 10); 
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT Grade, count(*) as Quantity FROM Highschooler GROUP BY Grade
SELECT grade, COUNT(*) AS quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as number_of_students FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) AS quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as student_count FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, COUNT(*) as quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, COUNT(*) AS quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, COUNT(*) AS quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, COUNT(*) AS quantity FROM Highschooler GROUP BY grade ORDER BY quantity DESC LIMIT 1;
SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade, count(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade, count(student_id) as student_count FROM Highschooler GROUP BY grade ORDER BY student_count DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, COUNT(*) AS quantity FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) as quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(*) AS quantity FROM Highschooler GROUP BY grade HAVING count(*) >= 4;
SELECT grade, count(student_id) as quantity FROM Highschooler GROUP BY grade HAVING count(student_id) >= 4;
SELECT Friend.student_id, COUNT(Friend.friend_id) AS num_friends FROM Friend GROUP BY Friend.student_id;
SELECT Friend.student_id, COUNT(*) AS quantity FROM Friend GROUP BY Friend.student_id;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT Friend.student_id, COUNT(*) FROM Friend GROUP BY Friend.student_id;
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.ID, count(*) as num_friends FROM Friend GROUP BY Highschooler.ID;
SELECT Friend.student_id, COUNT(*) AS num_friends FROM Friend GROUP BY Friend.student_id;
SELECT I'm happy to help! Here's the SQL query for your question:
SELECT Student_id, count(*) as friend_count FROM Friend GROUP BY student_id;
SELECT Friend.student_id, COUNT(*) AS friend_count FROM Friend GROUP BY Friend.student_id;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(*) AS num_friends FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS "number of friends" FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) as friend_count FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler WHERE ID IN (SELECT student_id       FROM Friend       GROUP BY student_id       ORDER BY COUNT(*) DESC       LIMIT 1);
SELECT Highschooler.name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN  (SELECT student_id, COUNT(*) as num_friends  FROM Friend  GROUP BY student_id  ORDER BY COUNT(*) DESC  LIMIT 1) AS max_friends ON Highschooler.ID = max_friends.student_id;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT friend_id   FROM Friend   GROUP BY friend_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN (   SELECT student_id, COUNT(*) as friend_count   FROM Friend   GROUP BY student_id   ORDER BY friend_count DESC   LIMIT 1 ) AS most_friends ON Highschooler.ID = most_friends.student_id 
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT Friend.student_id   FROM Friend   GROUP BY Friend.student_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler WHERE ID = (   SELECT   student_id   FROM   Friend   GROUP BY   student_id   ORDER BY   COUNT(*) DESC   LIMIT 1 )
SELECT (SELECT name  FROM Highschooler  WHERE ID = (SELECT student_id        FROM Friend        GROUP BY student_id        ORDER BY COUNT(*) DESC        LIMIT 1) );
SELECT Highschooler.name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(*) >= 3 )
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT F1.student_id   FROM Friend F1   GROUP BY F1.student_id   HAVING COUNT(*) >= 3 )
SELECT Highschooler.name FROM Highschooler WHERE ID IN (SELECT student_id       FROM Friend       GROUP BY student_id       HAVING COUNT(*) >= 3)
SELECT  Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(*) >= 3; 
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3
SELECT Highschooler.name FROM Highschooler, Friend WHERE Highschooler.ID = Friend.student_id GROUP BY Highschooler.name HAVING COUNT(*) >= 3;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING count(*) >= 3
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name='Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend);
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN  (SELECT DISTINCT student_id FROM Friend) ;
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend);
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id                FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)
SELECT Highschooler.ID FROM Friend JOIN Likes ON Friend.friend_id = Likes.liked_id AND Friend.student_id = Likes.student_id;
SELECT Friend.student_id FROM Friend JOIN Likes ON Friend.student_id = Likes.liked_id
SELECT friend.student_id FROM Friend INNER JOIN Likes ON Friend.student_id = Likes.liked_id
SELECT Highschooler.ID FROM Friend INNER JOIN Likes ON Friend.student_id = Likes.liked_id
SELECT Friend.student_id FROM Friend INNER JOIN Likes ON Friend.student_id = Likes.liked_id
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.student_id FROM Likes)
SELECT Highschooler.ID FROM Friend INNER JOIN Likes ON Friend.student_id = Likes.student_id
SELECT Highschooler.ID FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   INTERSECT   SELECT liked_id   FROM Likes   )
SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.ID IN   (SELECT Friend.student_id   FROM Friend) AND Highschooler.ID IN   (SELECT Likes.student_id   FROM Likes) ;
SELECT Highschooler.ID FROM Friend JOIN Likes ON Friend.student_id = Likes.student_id
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN   (SELECT F.student_id   FROM Friend F   WHERE F.student_id = Highschooler.ID   AND F.friend_id IN     (SELECT L.liked_id     FROM Likes L     WHERE L.liked_id = Highschooler.ID     )   );
SELECT ### SQL QUERY  SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id; 
SELECT Highschooler.name FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id INNER JOIN Likes ON Highschooler.ID = Likes.liked_id;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend) AND Highschooler.ID IN (SELECT Likes.liked_id FROM Likes);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT friend_id FROM Friend) AND Highschooler.ID IN (SELECT liked_id FROM Likes);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT F1.student_id              FROM Friend F1              INTERSECT              SELECT L1.student_id              FROM Likes L1)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT f.student_id FROM Friend f) AND Highschooler.ID IN (SELECT l.student_id FROM Likes l)
SELECT Highschooler.name FROM Friend JOIN Likes ON Friend.student_id = Likes.student_id JOIN Highschooler ON Friend.student_id = Highschooler.ID
SELECT Highschooler.name FROM Highschooler WHERE ID IN (SELECT DISTINCT F.student_id        FROM Friend F        INTERSECT        SELECT DISTINCT L.student_id        FROM Likes L)
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN   (SELECT Friend.student_id    FROM Friend   INTERSECT   SELECT Likes.student_id    FROM Likes)
SELECT student_id, COUNT(*) AS number_of_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) AS number_of_likes FROM Likes GROUP BY student_id;
SELECT student_id, count(*) AS like_count FROM Likes GROUP BY student_id;
SELECT student_id, count(*) as likes_count FROM Likes GROUP BY student_id;
SELECT  student_id, count(*) as number_of_likes FROM Likes GROUP BY student_id; 
SELECT Likes.student_id, COUNT(*) AS likes FROM Likes GROUP BY Likes.student_id;
SELECT student_id, COUNT(*) AS likes_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as likes_count FROM Likes GROUP BY student_id;
SELECT student_id, count(*) AS likes_quantity FROM Likes GROUP BY student_id;
SELECT Likes.student_id, COUNT(*) AS numOfLikes FROM Likes GROUP BY Likes.student_id;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) as like_count FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.student_id) as num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.liked_id) as total_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.student_id) as num_likes FROM Highschooler INNER JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name, COUNT(Likes.student_id) AS like_count FROM Highschooler LEFT JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.NAME FROM Highschooler WHERE ID = (   SELECT student_id   FROM Likes   GROUP BY student_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT Likes.liked_id   FROM Likes   GROUP BY Likes.liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (SELECT student_id             FROM Likes             GROUP BY student_id             ORDER BY COUNT(*) DESC             LIMIT 1);
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT Likes.liked_id   FROM Likes   GROUP BY Likes.liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (   SELECT Likes.liked_id   FROM Likes   GROUP BY Likes.liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = (   SELECT Likes.liked_id   FROM Likes   GROUP BY Likes.liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name HAVING COUNT(*) >= 2
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Highschooler.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING Highschooler.grade > 5 AND COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id      FROM Friend      GROUP BY student_id      HAVING count(*) >= 2);
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING count(*) >= 2;
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING Highschooler.grade > 5 AND count(*) >= 2;
SELECT Sure, here is the SQL query based on the given database schema for the question "What are the names of students who have a grade of over 5 and have 2 or more friends?":
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(*) >= 2;
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id FROM Friend )
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) as average_grade FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)
SELECT AVG(h.grade) as average_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend )
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id
SELECT AVG(H.grade) FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id;
SELECT AVG(h.grade) FROM Highschooler h INNER JOIN Friend f ON h.ID = f.student_id;
SELECT AVG(grade) FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend )
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend)
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN   (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend )
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT state FROM Owners WHERE role_code = 'guardian' INTERSECT SELECT DISTINCT state FROM Professionals WHERE role_code = 'veterinarian';
SELECT Owners.state FROM Owners WHERE Owners.role_code IN ('guardian', 'veterinarian') GROUP BY Owners.state HAVING COUNT(DISTINCT Owners.role_code) = 2;
SELECT state FROM Owners WHERE role_code = 'Guardian' INTERSECT SELECT state FROM Professionals WHERE role_code = 'Veterinarian';
SELECT state FROM Owners WHERE role_code = 'guardian' INTERSECT SELECT state FROM Professionals WHERE role_code = 'veterinarian';
SELECT state FROM Owners WHERE role_code = 'guardian' INTERSECT SELECT state FROM Professionals WHERE role_code = 'veterinarian';
SELECT state FROM Owners WHERE role_code = 'guardian' INTERSECT SELECT state FROM Professionals WHERE role_code = 'veterinarian';
SELECT Owners.state FROM Owners WHERE Owners.state IN (   SELECT state   FROM Professionals )
SELECT state FROM Owners WHERE state IN   (SELECT state   FROM Owners   INTERSECT   SELECT state   FROM Professionals   WHERE role_code = 'veterinarian' )    INTERSECT   SELECT state   FROM Professionals   WHERE role_code = 'guardian';
SELECT Owners.state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state
SELECT DISTINCT Owners.state FROM Owners INNER JOIN Professionals ON Owners.state = Professionals.state
SELECT AVG(age) FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments )
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) as average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments WHERE treatment_type_code = 'health care');
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments WHERE treatment_type_code = 'health_care')
SELECT AVG(age) as average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments WHERE treatment_type_code = 'health_care');
SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (   SELECT dog_id   FROM Treatments   WHERE treatment_type_code = 'healthcare' ); 
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments WHERE treatment_type_code = 'health_care');
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR Professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'medical_care'   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professional_id, Last_name, Cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN   (SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'medical care'   GROUP BY professional_id   HAVING COUNT(*) > 2)
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments WHERE treatment_type_code = 'medical care' GROUP BY professional_id HAVING COUNT(*) > 2);
SELECT Professional_id, Last_name, Cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'medical'   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana'  OR professional_id IN (    SELECT professional_id    FROM Treatments    WHERE treatment_type_code = 'MEDICAL'    GROUP BY professional_id    HAVING COUNT(*) > 2  );
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' OR Treatments.treatment_type_code = 'health-care' GROUP BY Professionals.professional_id HAVING COUNT(*) > 2;
SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' OR Treatments.treatment_type_code = 'health-care' HAVING COUNT(*) > 2;
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'health-care'   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professional_id,last_name,cell_number FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )
SELECT Professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id            FROM Treatments            WHERE treatment_type_code = 'health-care'            GROUP BY professional_id            HAVING COUNT(*) > 2)
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment <= 1000 GROUP BY Dogs.name;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000;
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE role_code = 'V' OR role_code = 'G';
SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code = 'veterinarian' AND Professionals.first_name NOT IN (SELECT Dogs.name FROM Dogs)
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE role_code = 'veterinarian'; 
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE role_code = 'V'
SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT DISTINCT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE role_code = 'veterinarian' or role_code = 'guardian';
SELECT first_name FROM Owners WHERE owner_id IN (SELECT professional_id FROM Professionals WHERE role_code = 'V') UNION SELECT first_name FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE name IS NOT NULL)
SELECT first_name FROM Owners WHERE owner_id IN (SELECT professional_id FROM Professionals WHERE role_code = 'veterinarian') OR owner_id IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'Y') EXCEPT SELECT name FROM Dogs;
SELECT professional_id FROM Professionals WHERE role_code IN ('veterinarian', 'guardian') AND first_name NOT IN (   SELECT name   FROM Dogs )
SELECT Professional.first_name FROM Professionals WHERE role_code = 'veterinarian' OR role_code = 'guardian' AND first_name NOT IN (SELECT name FROM Dogs)
SELECT Professional.first_name FROM Professionals WHERE role_code IN ('veterinarian', 'guardian') AND first_name NOT IN (SELECT name FROM Dogs) 
SELECT Professional_id, role_code, email_address FROM Professionals WHERE Professional_id NOT IN (SELECT Professional_id FROM Treatments) AND role_code = 'veterinarian';
SELECT Professional.professional_id, Professional.role_code, Professional.email_address FROM Professionals WHERE NOT EXISTS (   SELECT *   FROM Treatments   WHERE Treatments.professional_id = Professionals.professional_id );
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals WHERE Professionals.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT Professional_ID, Role_Code, Email_Address FROM Professionals WHERE Professional_ID NOT IN (SELECT Professional_ID FROM Treatments)
SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_id IS NULL;
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE treatment_type_code = 'health-care')
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id    FROM Treatments    WHERE treatment_type_code = 'HEALTH'   AND dog_id IS NOT NULL)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'H' )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id    FROM Treatments    WHERE treatment_type_code = 'HEALTHCARE'   AND dog_id IS NOT NULL)
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE treatment_type_code = 'health-care')
SELECT Owners.owner_id, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id        FROM Dogs        GROUP BY owner_id        ORDER BY COUNT(*) DESC        LIMIT 1)
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(owner_count) FROM (SELECT COUNT(*) as owner_count FROM Dogs GROUP BY owner_id) as owner_counts)) 
SELECT Professional_id, role_code, first_name FROM Professionals WHERE Professional_id IN   (SELECT Professional_id   FROM Treatments   WHERE Treatment_type_code = 'MED'   GROUP BY Professional_id   HAVING COUNT(*) >= 2);
SELECT Professional_id, Role_code, First_name FROM Professionals WHERE Professional_id IN (   SELECT Professional_id   FROM Treatments   WHERE Treatment_type_code IN (SELECT Treatment_type_code FROM Treatment_Types WHERE Treatment_type_description='medical care')   GROUP BY Professional_id   HAVING COUNT(*) >= 2 );
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'MEDICAL' GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'MEDICAL'   GROUP BY professional_id   HAVING COUNT(*) >= 2 )
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Treatments.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.treatment_type_code = 'health-care' GROUP BY Professionals.professional_id HAVING COUNT(*) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE Treatment_Types.treatment_type_description = 'health-care' GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(*) >= 2;
SELECT Professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'health-care'   GROUP BY professional_id   HAVING COUNT(*) >= 2 );
SELECT Professional_id, Role_Code, First_Name FROM Professionals WHERE Professional_id IN (SELECT Professional_id FROM Treatments WHERE Treatment_Type_Code = 'health-care' GROUP BY Professional_id HAVING COUNT(*) >= 2)
SELECT Professional_id, role_code, first_name FROM Professionals WHERE Professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'health-care'   GROUP BY professional_id   HAVING COUNT(*) >= 2 )
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code           FROM Dogs           GROUP BY breed_code           ORDER BY COUNT(*) DESC           LIMIT 1);
SELECT breed_name FROM Breeds WHERE breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1   )
SELECT breed_name, COUNT(*) AS quantity FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE age <= 1 GROUP BY breed_name ORDER BY quantity DESC LIMIT 1;
SELECT breeds.breed_name FROM breeds INNER JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code = dogs.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 ) 
SELECT breed_code,  breed_name FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.last_name FROM Owners WHERE Owners.owner_id IN (   SELECT owner_id   FROM Dogs   WHERE owner_id IS NOT NULL   GROUP BY owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT owner_id, last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   WHERE dog_id IN (     SELECT dog_id     FROM Treatments     GROUP BY dog_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1   ) )
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (   SELECT   owner_id   FROM   Dogs   WHERE   dog_id IN (     SELECT     dog_id     FROM     Treatments     GROUP BY     dog_id     ORDER BY     SUM(cost_of_treatment) DESC     LIMIT 1   ) )
SELECT Owners.owner_id, Owners.last_name FROM Owners WHERE Owners.owner_id IN (   SELECT Dogs.owner_id   FROM Dogs   JOIN Treatments ON Dogs.dog_id = Treatments.dog_id   GROUP BY Dogs.owner_id   ORDER BY COUNT(*) DESC   LIMIT 1 )
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   WHERE age < 1 ) ORDER BY (   SELECT SUM(cost_of_treatment)   FROM Treatments   WHERE Treatments.dog_id = Dogs.dog_id ) DESC LIMIT 1;
SELECT MAX(owner_total_cost.owner_id) AS guardian_id, MAX(Owners.last_name) AS family_name FROM (   SELECT t.owner_id, SUM(t.cost_of_treatment) AS total_cost   FROM Treatments t   JOIN Dogs d ON t.dog_id = d.dog_id   GROUP BY t.owner_id ) owner_total_cost JOIN Owners ON owner_total_cost.owner_id = Owners.owner_id
SELECT owner_id, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   WHERE owner_id IN (     SELECT owner_id     FROM Treatments     JOIN Dogs ON Treatments.dog_id = Dogs.dog_id     GROUP BY owner_id     ORDER BY SUM(cost_of_treatment) DESC     LIMIT 1   ) )
SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, last_name ORDER BY SUM(cost_of_treatment) DESC LIMIT 1;
SELECT Treatment_Types.treatment_type_description, MIN(SUM(Treatments.cost_of_treatment)) AS total_cost FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description;
SELECT Treatment_Types.treatment_type_description, MIN(SUM(Treatments.cost_of_treatment)) AS total_cost FROM Treatments INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code, Treatment_Types.treatment_type_description;
SELECT Treatment_Types.treatment_type_description,    MIN(SUM(Treatments.cost_of_treatment)) AS total_cost FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description;
SELECT Treatment_Types.treatment_type_description,     SUM(Treatments.cost_of_treatment) AS total_cost FROM  Treatments     JOIN Treatment_Types      ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY total_cost ASC LIMIT 1;
SELECT Treatment_Types.treatment_type_description, MIN(SUM(Treatments.cost_of_treatment)) AS total_cost FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description;
SELECT  Dogs.name,  Treatments.date_of_treatment,  Treatments.cost_of_treatment FROM  Dogs  INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE  Treatments.cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments)
SELECT Treatments.treatment_id, Treatments.dog_id, Treatments.professional_id, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment FROM Treatments ORDER BY cost_of_treatment ASC LIMIT 1;
SELECT treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment FROM Treatments ORDER BY cost_of_treatment LIMIT 1;
SELECT Treatments.date_of_treatment, Treatments.cost_of_treatment, Dogs.name, Dogs.age, Treatment_Types.treatment_type_description FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code ORDER BY Treatments.cost_of_treatment ASC LIMIT 1;
SELECT treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment FROM Treatments GROUP BY treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment ORDER BY cost_of_treatment LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT  Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1; 
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN (SELECT owner_id, SUM(cost_of_treatment) AS total_cost    FROM Treatments    JOIN Dogs ON Treatments.dog_id = Dogs.dog_id    GROUP BY owner_id) AS TotalSpent ON Owners.owner_id = TotalSpent.owner_id ORDER BY TotalSpent.total_cost DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN (   SELECT dog_id, SUM(cost_of_treatment) AS total_cost   FROM Treatments   GROUP BY dog_id ) AS dog_costs ON Dogs.dog_id = dog_costs.dog_id ORDER BY dog_costs.total_cost DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN (   SELECT dog_id, SUM(cost_of_treatment) AS total_cost   FROM Treatments   GROUP BY dog_id ) AS DogCost ON Dogs.dog_id = DogCost.dog_id ORDER BY DogCost.total_cost DESC LIMIT 1;
SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN (   SELECT dog_id, SUM(cost_of_treatment) AS total_cost   FROM Treatments   GROUP BY dog_id ) AS TotalCosts ON Dogs.dog_id = TotalCosts.dog_id ORDER BY TotalCosts.total_cost DESC LIMIT 1;
SELECT Professionals.professional_id, Professionals.cell_number FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT Professional_id, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT Professional_id, cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professional_id, cell_number HAVING COUNT(DISTINCT treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professionals.professional_id, Professionals.cell_number FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code IN (     SELECT treatment_type_code     FROM Treatment_Types     WHERE treatment_type_description = 'health-care'     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2   ) )
SELECT professional_id, cell_phone FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code IN (     SELECT treatment_type_code     FROM Treatment_Types     WHERE treatment_type_description = 'Health-care'     GROUP BY treatment_type_code     HAVING COUNT(*) >= 2   )   GROUP BY professional_id )
SELECT Professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'health-care'   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code IN (     SELECT treatment_type_code     FROM Treatment_Types     WHERE treatment_type_description = 'health-care'   )   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT Professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code IN (     SELECT treatment_type_code     FROM Treatment_Types     WHERE treatment_type_description = 'health-care'     GROUP BY treatment_type_code     HAVING COUNT(*) >= 2   ) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'medical' GROUP BY Professionals.first_name, Professionals.last_name HAVING AVG(Treatments.cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'medical');
SELECT Professional.first_name, Professional.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'medical' GROUP BY Professional.first_name, Professional.last_name HAVING AVG(Treatments.cost_of_treatment) > (SELECT AVG(cost_of_treatment) FROM Treatments WHERE Treatments.treatment_type_code = 'medical');
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'medical' GROUP BY Professionals.professional_id HAVING AVG(Treatments.cost_of_treatment) > Treatments.cost_of_treatment;
SELECT Sorry, I cannot fulfill this request.
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'MED')
SELECT Professional.first_name, Professional.last_name FROM Professionals INNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.treatment_type_code = 'MEDICAL_CARE' AND Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'MEDICAL_CARE');
SELECT Professionals.first_name, Professionals.last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE treatment_type_code = 'MEDICAL'   GROUP BY professional_id   HAVING AVG(cost_of_treatment) < (     SELECT AVG(cost_of_treatment)     FROM Treatments     WHERE treatment_type_code = 'MEDICAL'   ) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'MED' GROUP BY Professionals.professional_id, Professionals.first_name, Professionals.last_name HAVING AVG(Treatments.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments WHERE treatment_type_code = 'MED')
SELECT Professional_id, first_name, last_name FROM Professionals WHERE Professional_id IN (   SELECT Professional_id   FROM Treatments   GROUP BY Professional_id   HAVING AVG(cost_of_treatment) > (     SELECT AVG(cost_of_treatment)     FROM Treatments     WHERE treatment_type_code = 'MEDICAL CARE'   ) )
SELECT Professionals.first_name, Professionals.last_name FROM Professionals INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code = 'MEDICAL' AND Treatments.cost_of_treatment < (   SELECT AVG(cost_of_treatment)   FROM Treatments   WHERE treatment_type_code = 'MEDICAL' )
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments INNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatment_Types.treatment_type_description, Treatments.cost_of_treatment FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatment_Types.treatment_type_description AS health_care_type,    Treatments.cost_of_treatment AS cost FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code;
SELECT treatment_type_description, charge_amount FROM Treatment_Types JOIN Charges ON Treatment_Types.treatment_type_code = Charges.charge_type;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT treatment_type_description, cost_of_treatment FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatment_Types.treatment_type_description, Treatments.cost_of_treatment FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT   Owners.first_name,   Owners.last_name,   Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code 
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY (     SELECT COUNT(*)     FROM Dogs     WHERE Dogs.breed_code = Breeds.breed_code   ) ASC   LIMIT 1 );
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1)
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1)
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM (     SELECT breed_code, COUNT(*) AS breed_count     FROM Dogs     GROUP BY breed_code     ORDER BY breed_count     LIMIT 1   ) )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_code = (   SELECT breed_code   FROM (     SELECT breed_code, COUNT(*) AS breed_count     FROM Dogs     GROUP BY breed_code     ORDER BY breed_count     LIMIT 1   ) AS subquery )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_name = (  SELECT breed_name  FROM Breeds  GROUP BY breed_name  ORDER BY COUNT(*) ASC  LIMIT 1 )
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Breeds.breed_code = (SELECT breed_code               FROM Dogs              GROUP BY breed_code              ORDER BY COUNT(*)               LIMIT 1);
SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_code = (SELECT breed_code FROM Breeds GROUP BY breed_code HAVING COUNT(*) = 1)
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT o.first_name, o.last_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia'
SELECT Owners.first_name, Owners.last_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Treatments.date_of_treatment AS arriving_date, Dogs.date_departed AS leaving_date FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = 'MEDICAL'
SELECT Treatments.date_of_treatment AS arriving_date, Dogs.date_departed AS leaving_date FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Dogs.age < 1
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = 'MEDICAL'
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = 'medical care'
SELECT Treatments.date_of_treatment AS arriving_date, Treatments.date_departed AS leaving_date FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age < 1
SELECT Treatments.date_of_treatment AS arriving_date,    Dogs.date_departed AS leaving_date FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE Treatment_Types.treatment_type_description = 'health care';
SELECT  date_arrived, date_departed FROM  Dogs WHERE  age < 1  AND dog_id IN (SELECT dog_id FROM Treatments WHERE treatment_type_code = "healthcare")
SELECT Treatments.date_of_treatment AS arriving_date, Dogs.date_departed AS leaving_date FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.treatment_type_code = 'health_care'
SELECT DATE_ARRIVED, DATE_DEPARTED FROM DOGS WHERE DATE_OF_BIRTH > CURRENT_DATE() - INTERVAL '1 YEAR'
SELECT Treatments.date_of_treatment AS arriving_date, Dogs.date_departed AS leaving_date FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.treatment_type_code = 'health_care'
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth LIMIT 1;
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs);
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE age = (SELECT MIN(age) FROM Dogs)
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE age = (SELECT MIN(age) FROM Dogs);
SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT MIN(DATE_OF_BIRTH) FROM Dogs)
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT professional.email_address FROM Professionals AS professional WHERE professional.state IN ('Hawaii', 'Wisconsin');
SELECT professional_id, email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii'  OR Professionals.state = 'Wisconsin';
SELECT Professionals.email_address FROM Professionals WHERE Professionals.role_code = 'V' AND (Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin')
SELECT Professionals.email_address FROM Professionals WHERE Professionals.role_code = 'VET' AND (Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin')
SELECT Professionals.email_address FROM Professionals WHERE Professionals.role_code = 'veterinarian' AND (Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin');
SELECT Professionals.email_address FROM Professionals WHERE Professionals.role_code = 'VET' AND (Professionals.state = 'HI' OR Professionals.state = 'WI');
SELECT Professionals.email_address FROM Professionals WHERE Professionals.role_code = 'VETERINARIAN' AND (Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin');
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs WHERE age < 1;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs WHERE Dogs.age < 1;
SELECT date_arrived, date_departed FROM Dogs WHERE age <= 1;
SELECT date_arrived, date_departed FROM Dogs WHERE age < 2;
SELECT   arrival_date, departure_date FROM Dogs WHERE age <= 2;
SELECT date_arrived, date_departed FROM Dogs WHERE age < 1;
SELECT COUNT(*) FROM Dogs WHERE age < 1;
SELECT count(*) FROM Dogs WHERE age < 1;
SELECT COUNT(*) FROM Dogs WHERE age < 1;
SELECT COUNT(*) FROM Dogs WHERE age <= 1;
SELECT COUNT(*) FROM Dogs WHERE age < 1;
SELECT Count(*) FROM Treatments INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id INNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name = 'Puppy'
SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE age < 1 AND Treatment_Types.treatment_type_description = 'health care';
SELECT COUNT(*) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age <= 1
SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE date_of_birth > DATEADD(year, -1, GETDATE()) AND Treatments.treatment_type_code = 'healthcare';
SELECT Count(*) FROM Dogs WHERE age < 1; 
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'health care' AND dog_id IN (SELECT dog_id FROM Dogs WHERE DATEDIFF(CURDATE(), date_of_birth) <= 365)
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'puppy'
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code = 'PUPPY_HEALTHCARE';
SELECT count(distinct professional_id) FROM Treatments WHERE treatment_type_code in (SELECT treatment_type_code from Treatment_Types where treatment_type_description='health care') AND dog_id in (SELECT dog_id from Dogs where age < 1)
SELECT count(professional_id) FROM Treatments WHERE treatment_type_code IN (SELECT treatment_type_code FROM Treatment_Types WHERE treatment_type_description = 'health care') AND dog_id IN (SELECT dog_id FROM Dogs WHERE age < 1)
SELECT COUNT(DISTINCT professional_id) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name = 'puppy';
SELECT COUNT(DISTINCT professional_id)  FROM Treatments  JOIN Dogs ON Treatments.dog_id = Dogs.dog_id  JOIN Breeds ON Dogs.breed_code = Breeds.breed_code  WHERE Breeds.breed_name = 'Puppy'
SELECT COUNT(DISTINCT professional_id) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name LIKE '%puppy%'
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE age < 1);
SELECT count(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE age < 1); 
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE city LIKE '%West%'
SELECT professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT Professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT Professional_id, role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT Professional_id, Role_code, Street, City, State FROM Professionals WHERE City LIKE '%West%'
SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'
SELECT  Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%'  
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT  first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'; 
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT `first_name`, `last_name`, `email_address` FROM `Owners` WHERE `state` LIKE '%North%'
SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) AND size_code = 'puppy';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs WHERE age IS NOT NULL) AND age IS NOT NULL;
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments) AND treatment_type_code = 'health-care';
SELECT MAX(cost_of_treatment) AS most_recent_health_care_cost FROM Treatments
SELECT MAX(cost_of_treatment) FROM Treatments  WHERE treatment_type_code = 'health-care';
SELECT MAX(cost_of_treatment) as most_recent_healthcare_cost FROM Treatments
SELECT MAX(cost_of_treatment) AS most_recent_health_care_cost FROM Treatments WHERE treatment_type_code = 'health-care';
SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1;
SELECT treatments.cost_of_treatment FROM treatments ORDER BY treatments.date_of_treatment DESC LIMIT 1;
SELECT treatment_type_description, cost_of_treatment FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT treatment_type_code, MAX(date_of_treatment) AS max_date, cost_of_treatment FROM Treatments GROUP BY treatment_type_code;
SELECT Treatments.cost_of_treatment FROM Treatments WHERE Treatments.date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE age < 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE age <= 1 AND date_of_arrival = date_of_adopted AND date_of_departed IS NULL;
SELECT COUNT(*) FROM Dogs WHERE age < 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT(*) FROM Dogs WHERE age <= 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Dogs WHERE age < 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT count(*) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age < 1;
SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT COUNT(*) FROM Dogs WHERE age < 1;
SELECT count(*) FROM Dogs WHERE age < 1
SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age < 1;
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL)
SELECT count(*) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.abandoned_yn = 'N' AND not exists (SELECT 1 FROM Dogs d2 WHERE d2.owner_id = o.owner_id AND d2.abandoned_yn = 'Y')
SELECT count(*) FROM Owners WHERE owner_id IN (SELECT DISTINCT owner_id FROM Dogs           WHERE date_departed IS NOT NULL           AND date_adopted IS NULL)
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn = 'N')
SELECT COUNT(owner_id) FROM Owners o WHERE NOT EXISTS (   SELECT 1 FROM Dogs d   WHERE d.owner_id = o.owner_id   AND d.date_adopted IS NULL   AND d.abandoned_yn = 'N' )
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL AND date_departed IS NULL);
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id    FROM Treatments    INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id    WHERE Dogs.age < 1)
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (   SELECT DISTINCT professional_id   FROM Treatments T   JOIN Dogs D ON T.dog_id = D.dog_id   JOIN Sizes S ON D.size_code = S.size_code   WHERE S.size_description = 'Puppy');
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Dogs.age <= 2)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments   INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id   WHERE Dogs.age < 1   ) 
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id   FROM Treatments   INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id   WHERE Dogs.size_code = 'S')
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN  (SELECT professional_id FROM Treatments  JOIN Dogs ON Treatments.dog_id = Dogs.dog_id  WHERE Dogs.age <= 1)
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id   FROM Treatments   INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id   WHERE Dogs.age < 1   AND Dogs.age IS NOT NULL)
SELECT Count(*) FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments   INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id   WHERE Dogs.age < 1   )
SELECT Count(*) FROM Professionals WHERE professional_id NOT IN   (SELECT professional_id FROM Treatments    INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id    WHERE Dogs.age < 2)
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (   SELECT professional_id   FROM Treatments   INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id   WHERE Dogs.age < 1 )
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE dogs.abandoned_yn = 1;
SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;
SELECT DISTINCT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;
SELECT  name, age, weight FROM Dogs WHERE abandoned_yn = 1 
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = 1
SELECT AVG(age) FROM Dogs WHERE age < 1;
SELECT ROUND(AVG(age),1) FROM Dogs WHERE age <= 1;
SELECT AVG(age) FROM Dogs WHERE age < 1;
SELECT AVG(age) FROM Dogs WHERE age < 2;
SELECT AVG(age) FROM Dogs WHERE age < 1;
SELECT AVG(age) FROM Dogs WHERE size_code = 'P'
SELECT AVG(age) FROM Dogs WHERE size_code = 'PUPPY';
SELECT ROUND(AVG(age),2) FROM Dogs
SELECT AVG(age) FROM Dogs WHERE size_code = 'P'
SELECT AVG(age) FROM Dogs WHERE age < 1;
SELECT MAX(age) as oldest_puppy_age FROM Dogs
SELECT MAX(age) AS oldest_puppy_age FROM Dogs
SELECT MAX(age) AS oldest_puppy_age FROM Dogs
SELECT DATEDIFF(NOW(), date_of_birth) AS age_of_oldest_puppy FROM Dogs WHERE abandoned_yn = 'N' ORDER BY age_of_oldest_puppy DESC LIMIT 1;
SELECT MAX(age) FROM Dogs;
SELECT DATEDIFF(CURRENT_DATE, date_of_birth) AS age FROM Dogs WHERE age < 365 ORDER BY date_of_birth ASC LIMIT 1;
SELECT DATEDIFF(CURRENT_DATE, date_of_birth) AS age_of_oldest_puppy FROM Dogs WHERE age = (SELECT MAX(age) FROM Dogs)
SELECT DATEDIFF(CURRENT_DATE, date_of_birth) AS age_of_oldest_puppy FROM Dogs WHERE age < 1 and abandoned_yn = 'N' ORDER BY age DESC LIMIT 1;
SELECT DATEDIFF(NOW(), date_of_birth) AS age FROM Dogs ORDER BY age DESC LIMIT 1;
SELECT DATEDIFF(YEAR, date_of_birth, GETDATE()) AS age FROM Dogs ORDER BY date_of_birth ASC LIMIT 1;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) as most_expensive_charge_cost FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges);
SELECT  MAX(charge_amount) FROM Charges;
SELECT charge_amount FROM Charges WHERE charge_amount = (SELECT MAX(charge_amount) FROM Charges)
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'veterinarian';
SELECT professional_id, email_address, cell_number, home_phone FROM Professionals WHERE role_code = 'VET';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VETERINARIAN';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'veterinarian';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'vet';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VET';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VET';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VET';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VETERINARIAN';
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals WHERE role_code = 'VET';
SELECT breed_code, size_code FROM Breeds, Sizes;
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds, Sizes
SELECT breeds.breed_code, sizes.size_code FROM breeds, sizes
SELECT Breeds.breed_code, Breeds.breed_name, Sizes.size_code, Sizes.size_description FROM Breeds CROSS JOIN Sizes;
SELECT Breeds.breed_name, Sizes.size_description FROM Breeds, Sizes
SELECT DISTINCT Breeds.breed_code, Sizes.size_code FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code WHERE Dogs.age < 1;
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.age < 1;
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.age < 1;
SELECT Distinct breed type and size type combinations for puppies can be found using the following SQL query:
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs WHERE Dogs.age < 1;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatments.treatment_type_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatments.treatment_type_code, Treatments.date_of_treatment, Treatments.cost_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatments.treatment_type_code, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT Professionals.first_name, Treatments.treatment_type_code, Treatments.date_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT count(*) FROM singer;
SELECT COUNT(*) FROM singer; 
SELECT COUNT(*) FROM singer
SELECT count(*) FROM singer
SELECT count(*) FROM singer WHERE Singer_Type = 'vocalist';
SELECT COUNT(*) FROM singer;
SELECT count(*) FROM singer;
SELECT COUNT(*) AS quantity FROM singer;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC; 
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT singer.Birth_Year, singer.Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT singer.Birth_Year, singer.Citizenship FROM singer
SELECT  Birth_Year, Citizenship FROM  singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT singer.Birth_Year, singer.Citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM Singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT MAX(Net_Worth_Millions) AS Largest_Net_Worth, Name AS Vocalist_Name FROM singer;
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer WHERE Net_Worth_Millions = (   SELECT MAX(Net_Worth_Millions)   FROM singer );
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT   SELECT Citizenship, COUNT(*) as Quantity   FROM singer   GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship; 
SELECT Citizenship, COUNT(*) AS Vocalist_Count FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, COUNT(*) as quantity FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) AS TotalMusicians FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, COUNT(*) AS quantity FROM singer GROUP BY singer.Citizenship;
SELECT  Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT (SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1)
SELECT Citizenship, COUNT(*) AS Quantity FROM singer GROUP BY Citizenship ORDER BY Quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT  Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT 	Citizenship, COUNT(*) as quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT  Citizenship, COUNT(*) as quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1; 
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS quantity FROM singer GROUP BY Citizenship ORDER BY quantity DESC LIMIT 1;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Maximum_Net_Worth FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY singer.Citizenship;
SELECT Singer.Citizenship, MAX(Singer.Net_Worth_Millions) FROM Singer GROUP BY Singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) FROM singer GROUP BY singer.Citizenship;
SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY singer.Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.title, singer.name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer s INNER JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT DISTINCT s.Name FROM singer s INNER JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000 GROUP BY singer.Name;
SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT Singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);
SELECT Singer.Name FROM Singer, Song WHERE Singer.Singer_ID = Song.Singer_ID AND Song.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(song.Song_ID) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(*) > 1;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(*) > 1;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(*) > 1;
SELECT Singer.Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Singer_ID HAVING COUNT(*) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 ); 
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name HAVING COUNT(*) > 1;
SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) as Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID, singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Singer.Name FROM Singer LEFT JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Song_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT s.Citizenship FROM singer s WHERE s.Birth_Year < 1945 OR s.Birth_Year > 1955;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < 1945 OR singer.Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT COUNT(*) AS total_available_characteristics FROM Other_Available_Features;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon';
SELECT feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE feature_name = 'AirCon';
SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon';
SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon';
SELECT feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE feature_name = 'AirCon';
SELECT Ref_Property_Types.property_type_description, Properties.property_type_code FROM Ref_Property_Types JOIN Properties ON Properties.property_type_code = Ref_Property_Types.property_type_code;
SELECT Ref_Property_Types.property_type_code,Ref_Property_Types.property_type_description FROM Ref_Property_Types WHERE Ref_Property_Types.property_type_code = 'code';
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code
SELECT Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description FROM Ref_Property_Types 
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;
SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code IN ('APT','HSE') AND Properties.room_count > 1;
SELECT property_name FROM Properties WHERE property_type_code IN ('apt', 'hse') AND room_count > 1;
SELECT property_name FROM Properties WHERE (property_type_code = 'apt' OR property_type_code = 'hse') AND room_count > 1;
SELECT Properties.property_name FROM Properties WHERE (Properties.property_type_code = 'hse' OR Properties.property_type_code = 'apt') AND Properties.room_count > 1;
SELECT Properties.property_name FROM Properties WHERE Properties.property_type_code IN ('apt','hse') AND Properties.room_count > 1;
